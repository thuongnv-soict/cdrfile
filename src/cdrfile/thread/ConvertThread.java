package cdrfile.thread;

import java.io.BufferedInputStream;
/**
 * <p>Title: CDR File(s) System</p>
 * <p>Description: VMS IS Departerment</p>
 * <p>Copyright: Copyright (c)  by eKnowledge 2004</p>
 * <p>Company: VietNam Mobile Telecom Services</p>
 * @author eKnowledge - Software
 * @version 1.0
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import cdrfile.convert.StructAlcatelCDR;
import cdrfile.convert.StructBRFCDR;
import cdrfile.convert.StructCounter;
import cdrfile.convert.StructEricssonCDR;
import cdrfile.convert.StructEricssonLTE;
import cdrfile.convert.StructFCDR;
import cdrfile.convert.StructGGSN;
import cdrfile.convert.StructHeader;
import cdrfile.convert.StructHuaweiCDR;
import cdrfile.convert.StructICC;
import cdrfile.convert.StructICCNEIF;
import cdrfile.convert.StructIN;
import cdrfile.convert.StructNokiaLTE;
import cdrfile.convert.StructRTPV;
import cdrfile.convert.StructSGSN;
import cdrfile.convert.StructSMPPG4;
import cdrfile.convert.StructSamSung;
import cdrfile.general.General;
import cdrfile.global.ChangeOfCharCondition;
import cdrfile.global.ConstSgwTag;
import cdrfile.global.EnumeRatedSgw;
import cdrfile.global.Global;
import cdrfile.global.IOUtils;
import cdrfile.global.TextFile;
import cdrfile.global.cdrfileParam;
import cdrfile.zip.SmartZip;

//----------------------------------------------------------------------------
//Change History
//2013.11.04 datnh
//		- Xu ly thong tin numberOfSequence
//2013.12.09 datnh
// 		- Them thong tin tai khoan vi WALLET1, WALLET2
//2013.12.10 datnh
//	- Them thong tin tai khoan IRD
//2013.12.17 datnh
//	- Xu ly DateForStartOfCharge, TimeForStartOfCharge null trong Module14_INIncomingCall()
//2014.01.06 datnh
//	- Bo sung thong tin ICC.causeRecClose
//2014.03.04 datnh
// 	- Bo sung thong tin ICC.correlationIdentifier
//2014.04.03 datnh
//	- Bo sung thong tin MSC smsResult tren Ericsson, Huawei
//2014.04.26 datnh
//	- ICC NEIF
//2014.05.19 datnh
// 	- ICC.communityIdentifier, ICC.topupProfile
//2014.06.27 datnh
//	- ICC.oldFnfNum -> ICC.bundleGROUPInitial
//2014.10.28 datnh
//	- Bo sung tai khoan KM99T
//2014.11.24 datnh
//	- Xu ly truong hop HuaweiCDR service_center.length = 0
//2015.06.01 datnh
//	- Bo sung tai khoan LM1, DATA_KM1
//2015.06.01 datnh
//	- Bo sung thong tin CallTypeDetail tren MSC Huawei & E///
//2015.06.29 datnh
//	- Bo sung thong tin InServiceResult tren ICC
//2015.07.29 datnh
//	- Bo sung thong tin RMnumber tren MSC Huawei & E///
//2015.08.13 datnh
//	- Bo sung tai khoan DATA6
//2015.08.27 datnh
//	- Bo sung tai khoan KMKNDL, LM_DL, DATA5
//2015.11.03 datnh
//	- Bo sung GGSN
//	- Bo sung SamSung
//2015.12.11 anhnt
//	- Bo sung tai khoan chia se
//	- Bo sung tai khoan wifi calling
//2015.12.29 datnh
//- Xu ly truong hop HuaweiCDR service_center.length = 0
//2016.01.11 datnh
//- Cap nhat Huawei.smsResult tren ban ghi SMT
//2016.01.15 anhnt
//- Bo sung tai khoan DataDem IN/ICC
//2016.03.11 anhnt
//- Bo sung tai khoan M-loyalty IN/ICC
//2016.04.04 anhnt 
//- Bo sung LTE Ericsson
//2016.05.16 anhnt
//- Bo sung LTE Ericsson egsnPDPRecord
//- Fixbug LTE Samsung
//2016.05.23 TrungNQ
//- Bo xung LTE Nokia 
//2016.06.10 anhnt
//- Chinh sua convert LTE SamSung 
//2016.07.18 anhnt
//- Bo sung tai khoan KM4 IN/ICC
//- Bo sung tai khoan KM4T IN/ICC
//- Bo sung tai khoan KMDK4 IN/ICC
//- Bo sung tai khoan THOAILM1 IN/ICC
//- Chinh sua cat cellid vs calltype=189
//2016.10.05 TRUNGNQ
//- convert igw-sonic: chi lay 40 fields cua stop record
//2016.09.14 anhnt
//- Bo sung tai khoan tien IRA IN/ICC
//- Bo sung tai khoan tien IRB IN/ICC
//- Bo sung tai khoan tien IRVS IN/ICC
//- Bo sung tai khoan tien IRSMS IN/ICC
//- Bo sung tai khoan san luong VOICE_KM1 
//- Bo sung tai khoan san luong DATA_31 
//- Bo sung route number
//2016.09.14 anhnt
//- Bo sung tai khoan tien SMSRefill IN/ICC
//- Bo sung tai khoan tien VIDEO IN/ICC
//- Bo sung tai khoan tien WALLET3 IN/ICC
//- Bo sung tai khoan tien RM IN/ICC
//- Bo sung tai khoan tien SMS3 IN/ICC
//- Bo sung tai khoan tien DataZ1 IN/ICC
//- Bo sung tai khoan tien DataZ2 IN/ICC
//- Bo sung tai khoan tien DataZ3 IN/ICC
//2016.11.07 anhnt
//- Bo sung tai khoan khach hang lau nam
//2016.11.30 anhnt
//- Bo sung tai khoan nguyen gia TK1
//2017.01.12 anhnt
//- Bo sung tai khoan sms fw
//2017.02.22 anhnt
//- Bo sung tai khoan KM1V
//- Bo sung tai khoan KM2V
//- Bo sung tai khoan KM3V
//- Bo sung tai khoan KM4V
//2017.03.07 anhnt
//- Cap nhat CDR Text IN/ICC : Thï¿½m tag  3100.2.143.2 : reason code
//- Cap nhat CDR MSC Text : Them thong tin originalCalledNumber
//2017.03.30 anhnt
//- Cap nhat nhan biet tai khoan mvoice_TH
//- Chinh sua convert IGW Sonus
//2017.04.28 anhnt
//- Bo sung tai khoan Credit2  
//2017.05.03 taivv
//- Bo sung tai khoan Credit3 
//09/05/2017 anhnt
//--cap nhat smsfw 
//2017.08.20 taivv
//- cap nhat tai khoan DATA_LN
//2017.10.16 taivv
//- cap nhat tai khoan DATA_VC
//----------------------------------------------------------------------------

public class ConvertThread extends ThreadInfo {

	protected String mStrValues = "";
	protected byte mBuffer[] = null;
	protected int mByteN = 0;
	protected int mFileByte = 0;
	protected int mRecOG = 0;
	protected int mRecIC = 0;
	protected int mRecSMO = 0;
	protected int mRecSMT = 0;
	protected int mRecAnnoun = 0;
	protected int mRecDivert = 0;
	protected int mRecTransit = 0;
	protected int mRecOther = 0;
	protected int mRecConvert = 0;
	protected int mRecData = 0;
	protected String mValue = "";
	protected int mRet = 0;
	protected int mRecLength = 0;
	protected int mLength = 0;
	protected String mSQL = null; 
	
	protected final String DIRECTORY = "C:\\Users\\Thuong\\Desktop\\alldau11so.txt";
	/*
	 * Contructor
	 * Read alldau11so.txt
	 * Put it on HashMap
	 * Author: thuongnv
	 */
	protected HashMap<String, String> map = new HashMap<String, String>();
	public ConvertThread() {
		String fileName = DIRECTORY;
		BufferedReader br = null;
		try {
			String currentLine;
			br = new BufferedReader(new FileReader(fileName));
 
			while ((currentLine = br.readLine()) != null) {
				if (currentLine.contains("N")) {
					String[] split = currentLine.split(Pattern.quote("|"), -1);
					System.out.println(split[0]+ "     " + split[1] + "    "+split[2]);
					map.put(split[0], split[1]);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)
					br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}
	
	/*
	 * convert 11 number to 10
	 * Using HashMap
	 * Author: thuongnv
	 */
	public String convertHeadNumber(String initNumber) {
		String newNumber = "";
		String oldHead;
		String newHead;
		if (initNumber.length() > 7) {
			if (initNumber.startsWith("84")) {
				oldHead = initNumber.substring(2, 7);
				newHead = map.get(oldHead);
				if (newHead != null) {
					newNumber = "84" + newHead + initNumber.substring(7);
				}
				else {
					newNumber = initNumber;
				}
			}
			else if (initNumber.startsWith("0")) {	
				oldHead = initNumber.substring(1, 6);
				newHead = map.get(oldHead);
				if (newHead != null) {
					newNumber = "0" + newHead + initNumber.substring(6);
				}
				else {
					newNumber = initNumber;
				}	 
			}
			else {
				oldHead = initNumber.substring(0, 5);
				newHead = map.get(oldHead);
				if (newHead != null) {
					newNumber = newHead + initNumber.substring(5);
				}
				else {
					newNumber = initNumber;
				}	 
			}
		}
		else {
			newNumber = initNumber;
		}
		
		return newNumber;
	}
	
	
	public void finalize() {
		destroy();
		System.runFinalization();
		System.gc();
	}

	public void processSession() throws Exception {
		int mRet = 0;
		String mPath = "";
		IOUtils IOUtil = new IOUtils();
		SmartZip zip = new SmartZip();
		if (!getSubThreadID().equals("")) {
			mSQL = "SELECT a.center_id,a.local_getfile_dir,b.file_name,"
					+ " b.file_id,b.current_dir,a.local_backup_dir,"
					+ " a.local_error_dir,a.file_type,a.id,a.file_type,"
					+ " d.id file_type_id,a.local_split_file_by_day," + " a.convert_dir, a.mail_to,a.convert_dir_temp,"
					+ " a.zip_after_download,a.unzip_before_convert,a.check_header"
					+ " FROM data_param a, import_header b," + " node_cluster c,file_type d  ,thread_sub e"
					+ " WHERE b.status=" + Global.StateFileFtpOK + " AND a.id=b.ftp_id AND a.convert_thread_id ="
					+ getThreadID() + " AND a.run_on_node=c.id AND c.ip='" + Global.getLocalSvrIP()
					+ "' AND a.file_type =d.file_type" + " AND a.convert_thread_id=e.thread_ID(+)"
					+ " AND nvl(e.subthread_id,0) =" + getSubThreadID()
					+ " AND mod(b.file_ID,nvl(e.dividex,1))=nvl(e.modulox,0)" + " ORDER BY b.current_dir,b.file_id";
		} else {
			mSQL = "SELECT a.center_id,a.local_getfile_dir,b.file_name,"
					+ " b.file_id,b.current_dir,a.local_backup_dir,"
					+ " a.local_error_dir,a.file_type,a.id,a.file_type,"
					+ " d.id file_type_id,a.local_split_file_by_day," + " a.convert_dir, a.mail_to,a.convert_dir_temp, "
					+ " a.zip_after_download,a.unzip_before_convert,a.check_header"
					+ " FROM data_param a, import_header b," + " node_cluster c,file_type d" + " WHERE b.status="
					+ Global.StateFileFtpOK + " AND a.id=b.ftp_id AND a.convert_thread_id =" + getThreadID()
					+ " AND a.run_on_node=c.id AND c.ip='" + Global.getLocalSvrIP() + "' AND a.file_type =d.file_type "
					+ " ORDER BY b.current_dir,b.file_id";
		}

		Statement stmt = mConnection.createStatement();
		ResultSet rs = stmt.executeQuery(mSQL);
		ConvertAlcatel cvAlcatel = null;
		ConvertEricsson cvEricsson = null;
		ConvertHuawei cvHuawei = null;
		ConvertIN cvIN = null;
		ConvertSMSC cvSMSC = null;
		ConvertRTPV cvRTPV = null;
		ConvertAcounting cvAcounting = null;
		ConvertMOSMPPG4 cvMOSMPPG4 = null;
		ConvertMTSMPPG4 cvMTSMPPG4 = null;
		ConvertICC cvICC = null;
		ConvertSGSN cvSGSN = null;
		ConvertICCNEIF cvNEIF = null;
		ConvertGGSN cvGGSN = null;
		ConvertSamSungLTE cvSamSung = null;
		ConvertEricssonLTE cvEricssonLTE = null;
		ConvertNokiaLTE cvNokiaLTE = null;
		ConvertIGWSonic cvIGWSonic = null;
		ConvertFCDR cvFCDR = null;

		try {
			while (rs.next() && miThreadCommand != THREAD_STOP) {
				if (rs.getInt("local_split_file_by_day") == 1) {
					mPath = IOUtil.FillPath(rs.getString("local_getfile_dir"), Global.mSeparate)
							+ rs.getString("current_dir") + Global.mSeparate;
					writeLogFile(
							" - Converting file " + mPath + rs.getString("file_name") + " - " + rs.getInt("file_id"));
				} else {
					mPath = IOUtil.FillPath(rs.getString("local_getfile_dir"), Global.mSeparate);
					writeLogFile(
							" - Converting file " + mPath + rs.getString("file_name") + " - " + rs.getInt("file_id"));
				}
				if (rs.getInt("unzip_before_convert") == 1) { // kieu file zip
					IOUtil.forceFolderExist(rs.getString("convert_dir_temp"));

					if (rs.getInt("zip_after_download") == 0) {
						zip.UnZipFile(mPath + rs.getString("file_name"),
								IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate)
										+ rs.getString("file_name"));
						mPath = IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate);
					} else {
						zip.UnZipFile(mPath + rs.getString("file_name") + ".zip",
								IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate)
										+ rs.getString("file_name"));
						mPath = IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate);
					}
				} else if (rs.getInt("unzip_before_convert") == 2) // kieu file
				// gzip
				{
					IOUtil.forceFolderExist(rs.getString("convert_dir_temp"));

					if (rs.getInt("zip_after_download") == 0) {
						zip.GUnZipFile(mPath + rs.getString("file_name"),
								IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate)
										+ rs.getString("file_name"));
						mPath = IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate);
					} else {
						zip.GUnZipFile(mPath + rs.getString("file_name") + ".gz",
								IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate)
										+ rs.getString("file_name"));
						mPath = IOUtil.FillPath(rs.getString("convert_dir_temp"), Global.mSeparate);
					}
				}
				mRet = 0;

				switch (rs.getInt("file_type_id")) {
				case 1:
				case 2:
					if (cvAlcatel == null) {
						cvAlcatel = new ConvertAlcatel();
					}
					mRet = cvAlcatel.AlcatelFile_R6(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 3:
				case 4:
				case 5:
					if (cvEricsson == null) {
						cvEricsson = new ConvertEricsson();
					}
					mRet = cvEricsson.EricssonFile_R10(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 7:
					if (cvHuawei == null) {
						cvHuawei = new ConvertHuawei();
					}
					mRet = cvHuawei.Huawei_V212(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 9:
					if (cvIN == null) {
						cvIN = new ConvertIN();
					}
					if ((!rs.getString("file_name").endsWith(".csv"))
							&& (!rs.getString("file_name").endsWith(".txt"))) {
						mRet = cvIN.INFile_PPS331(mPath, rs.getString("file_name"), rs.getInt("file_id"),
								rs.getString("convert_dir"), rs.getString("current_dir"),
								rs.getInt("local_split_file_by_day"));
						mConnection.commit();
					}
					break;
				case 10:
					if (cvIN == null) {
						cvIN = new ConvertIN();
					}
					if (rs.getString("file_type").compareTo("IN_PPS_V421") == 0) {
						mRet = cvIN.INFile_PPS421(mPath, rs.getString("file_name"), rs.getInt("file_id"),
								rs.getString("convert_dir"), rs.getString("current_dir"),
								rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
						mConnection.commit();
					}
					break;
				case 12:
					if (cvSMSC == null) {
						cvSMSC = new ConvertSMSC();
					}
					mRet = cvSMSC.BRF_V452(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 14:
					if (cvRTPV == null) {
						cvRTPV = new ConvertRTPV();
					}
					mRet = cvRTPV.RTPVFile(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 15:
					if (cvAcounting == null) {
						cvAcounting = new ConvertAcounting();
					}
					mRet = cvAcounting.Acounting(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 16:
					if (cvMOSMPPG4 == null) {
						cvMOSMPPG4 = new ConvertMOSMPPG4();
					}
					mRet = cvMOSMPPG4.smppg4MO(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 17:
					if (cvMTSMPPG4 == null) {
						cvMTSMPPG4 = new ConvertMTSMPPG4();
					}
					mRet = cvMTSMPPG4.smppg4MT(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 18:
					if (cvICC == null) {
						cvICC = new ConvertICC();
					}
					mRet = cvICC.INFile_ICC462(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 19:
					if (cvSGSN == null)
						cvSGSN = new ConvertSGSN();
					mRet = cvSGSN.GPP_SGSNFile(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 20:
					if (cvSGSN == null)
						cvSGSN = new ConvertSGSN();
					mRet = cvSGSN.SG7CD8_GPP_SGSNFile(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 21:
					if (cvNEIF == null)
						cvNEIF = new ConvertICCNEIF();
					mRet = cvNEIF.ICC_NEIF(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 23:
					if (cvGGSN == null)
						cvGGSN = new ConvertGGSN();
					mRet = cvGGSN.eGSN(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 24:
					if (cvSamSung == null)
						cvSamSung = new ConvertSamSungLTE();
					mRet = cvSamSung.convertSamSung(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 25:
					if (cvEricssonLTE == null)
						cvEricssonLTE = new ConvertEricssonLTE();
					mRet = cvEricssonLTE.convertEricssonLTE(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 26:
					if (cvNokiaLTE == null)
						cvNokiaLTE = new ConvertNokiaLTE();
					mRet = cvNokiaLTE.convertNokiaLTE(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;
				case 27:
					if (cvIGWSonic == null)
						cvIGWSonic = new ConvertIGWSonic();
						mRet = cvIGWSonic.convertIGWSonic(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;	
				case 28:
					if (cvFCDR == null)
						cvFCDR = new ConvertFCDR();
					mRet = cvFCDR.convertFCDR(mPath, rs.getString("file_name"), rs.getInt("file_id"),
							rs.getString("convert_dir"), rs.getString("current_dir"),
							rs.getInt("local_split_file_by_day"), rs.getInt("center_id"));
					break;	
				default:
					writeLogFile(" - Unkhonw module convert for file_type: " + rs.getString("file_type"));

					// miThreadCommand = THREAD_STOP;
					break;
				}
				switch (mRet) {
				case 0:
					writeLogFile(" - Undefined class module convert for " + rs.getString("file_type"));
					Global.writeEventThreadErr(Integer.parseInt(getThreadID()), 3,
							" - Undefined class module convert for " + rs.getString("file_type"));
					General.SendMail(mConnection, 2, rs.getString("mail_to"),
							"Undefined class module convert for " + rs.getString("file_type"));

					// General.addNewSMS(mConnection,rs.getInt("id"), 2,
					// "Undefined class module convert for "
					// + rs.getString("file_type"));
					mSQL = "UPDATE import_header SET status=-1,note=' ";
					mSQL += " - Undefined class module convert for " + rs.getString("file_type");
					mSQL += "WHERE file_id=" + rs.getInt("file_id");
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					break;
				case Global.OKFileConverted:
					if ((rs.getString("local_backup_dir") != null)
							&& (rs.getString("local_backup_dir").compareTo("") != 0)) {
						IOUtil.renameFile(
								IOUtil.FillPath(rs.getString("local_getfile_dir"), "/") + rs.getString("file_name"),
								IOUtil.FillPath(rs.getString("local_backup_dir"), "/") + rs.getString("file_name"));
					}
					if (rs.getInt("unzip_before_convert") == 1 || rs.getInt("unzip_before_convert") == 2) { // co
																											// file
																											// nen
						IOUtil.deleteFile(mPath + rs.getString("file_name"));
					}
					writeLogFile(" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
							+ " converted successfull");
					break;
				case Global.ErrFileConverted:
					Global.writeEventThreadErr(Integer.parseInt(getThreadID()), 1,
							" - ERROR convert file " + rs.getString("file_name") + " - " + rs.getInt("file_id"));
					writeLogFile(" - ERROR convert file " + rs.getString("file_name") + " - " + rs.getInt("file_id"));
					General.SendMail(mConnection, 2, rs.getString("mail_to"),
							"ERROR convert file " + rs.getString("file_name") + " - " + rs.getInt("file_id"));

					break;
				case Global.ErrFileNotFound:
					mSQL = "UPDATE import_header SET status= " + Global.StateConvertedError;
					mSQL += "WHERE file_id=" + rs.getInt("file_id");
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile(" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
							+ " with ERROR converted (File not found)");
					Global.writeEventThreadErr(Integer.parseInt(getThreadID()), 1,
							" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
									+ " with ERROR converted (File not found)");
					General.SendMail(mConnection, 2, rs.getString("mail_to"), "File " + rs.getString("file_name")
							+ " - " + rs.getInt("file_id") + " with ERROR converted (File not found)");

					// General.addNewSMS(mConnection, rs.getInt("id"),2,
					// "File "
					// + rs.getString("file_name")
					// + " - "
					// + rs.getInt("file_id")+" with ERROR converted (File not
					// found)");

					break;
				case Global.ErrCenterNotDefined:
					IOUtil.renameFile(
							IOUtil.FillPath(rs.getString("local_getfile_dir"), "/") + rs.getString("file_name"),
							IOUtil.FillPath(rs.getString("local_error_dir"), "/") + rs.getString("file_name"));
					Global.writeEventThreadErr(Integer.parseInt(getThreadID()), 1,
							" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
									+ " with ERROR converted (undefined center for subscriber)");
					writeLogFile(" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
							+ " with ERROR converted (undefined center for subscriber)");
					General.SendMail(mConnection, 2, rs.getString("mail_to"), "File " + rs.getString("file_name")
							+ " - " + rs.getInt("file_id") + " with ERROR converted (undefined center for subscriber)");

					// General.addNewSMS(mConnection, rs.getInt("id"),2,
					// "File "
					// + rs.getString("file_name")
					// + " - "
					// + rs.getInt("file_id")+" with ERROR converted (undefined
					// center for subscriber)");

					break;
				default:
					Global.writeEventThreadErr(Integer.parseInt(getThreadID()), 1, " - File "
							+ rs.getString("file_name") + " - " + rs.getInt("file_id") + " without ERROR knowledge");
					writeLogFile(" - File " + rs.getString("file_name") + " - " + rs.getInt("file_id")
							+ " without ERROR unknowledge");
					General.SendMail(mConnection, 2, rs.getString("mail_to"), "File " + rs.getString("file_name")
							+ " - " + rs.getInt("file_id") + " without ERROR unknowledge");

					// General.addNewSMS(mConnection,rs.getInt("id"), 2,
					// "File "
					// + rs.getString("file_name")
					// + " - "
					// + rs.getInt("file_id")+" without ERROR unknowledge");

					break;
				}
			}
		} catch (FileNotFoundException e) {
			writeLogFile(" - " + e.toString());
			mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
					+ "' WHERE file_id = " + rs.getInt("file_id");
			Global.ExecuteSQL(mConnection, mSQL);
			mConnection.commit();
			General.SendMail(mConnection, 2, rs.getString("mail_to"),
					e.toString() + " file " + rs.getString("file_name") + " - " + rs.getInt("file_id"));

			// General.addNewSMS(mConnection,rs.getInt("id"), 2,
			// "File "
			// + rs.getString("file_name")
			// + " - "
			// + rs.getInt("file_id")+" is not found");

		} catch (Exception e) {
			mSQL = "UPDATE import_header SET status=-1,note='" + e.toString();
			mSQL += "' WHERE file_id=" + rs.getInt("file_id");
			Global.ExecuteSQL(mConnection, mSQL);
			General.SendMail(mConnection, 2, rs.getString("mail_to"),
					e.toString() + " file " + rs.getString("file_name") + " - " + rs.getInt("file_id"));
			/*
			 * General.addNewSMS(mConnection, rs.getInt("id"),2, "File " +
			 * rs.getString("file_name") + " - " + rs.getInt("file_id")+
			 * " has error occurred");
			 */

			throw e;
		} finally {
			try {
				rs.close();
				rs = null;
				stmt.close();
				stmt = null;
				IOUtil = null;
			} catch (Exception e) {
			}
		}
	}

	public void appendValue(String strValue) {
		if (mStrValues.length() == 0) {
			mStrValues = strValue;
		} else {
			mStrValues += Global.cstrDelimited;
			mStrValues += strValue;
		}
	}

	class ConvertAlcatel {

		protected StructAlcatelCDR AlcatelCDR = new StructAlcatelCDR();
		protected int mListOfInvokeLength = 0;

		private int AlcatelFile_R6(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			RandomAccessFile fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			String mSQL = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mMSCHeaderCharge);
				} else {
					fileConvert.addText(Global.mMSCHeaderNoCharge);
				}

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mByteN = 0;
				mRecN = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecAnnoun = 0;
				mRecDivert = 0;
				mRecTransit = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mListOfInvokeLength = 0;
				mValue = "";
				mRet = 0;
				mRecLength = 0;
				mLength = 0;
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				while (mFileByte < mFileLength) {
					AlcatelCDR.Version = "";
					AlcatelCDR.MSCTypeAndCallType = "";
					AlcatelCDR.CallOriginChargingIndicator = "";
					AlcatelCDR.RequiredTeleservice = "";
					AlcatelCDR.RequiredBearerService = "";
					AlcatelCDR.CallStaTime = "";
					AlcatelCDR.CallDuration = 0;
					AlcatelCDR.CallEndTime = "";
					AlcatelCDR.IMEI = "";
					AlcatelCDR.NumberofInvokedINservices = "";
					AlcatelCDR.TAGSMOCalledNumber = "";
					AlcatelCDR.LinkInformation = "";
					AlcatelCDR.MobileSubscriberIdentity = "";
					AlcatelCDR.MSCIdentity = "";
					AlcatelCDR.CallPartnerIdentity = "";
					AlcatelCDR.MSLocationIdentity = "";
					AlcatelCDR.MSLocationIdentityExtension = "";
					AlcatelCDR.RequiredBearerCapability = "";
					AlcatelCDR.InformationReceivedFromtheFixednetwork = "";
					AlcatelCDR.TAGforIncomingTrunkGroup = "";
					AlcatelCDR.RecordType = "";
					AlcatelCDR.CallType = "";
					AlcatelCDR.Calling_isdn = "";
					AlcatelCDR.Called_isdn = "";
					AlcatelCDR.ic_route = "";
					AlcatelCDR.og_route = "";
					AlcatelCDR.tariff_class = "";
					AlcatelCDR.in_mark = "";
					AlcatelCDR.org_call_id = "";
					AlcatelCDR.rec_seq_number = 0;
					AlcatelCDR.Service_center = "";
					AlcatelCDR.Cell_id = "";
					AlcatelCDR.CallingOrg = "";
					AlcatelCDR.CalledOrg = "";
					AlcatelCDR.MsgTypeIndicator = "";
					AlcatelCDR.EmlppPriorityLevel = "";
					AlcatelCDR.FCIData = "";
					AlcatelCDR.StorageOfServiceKey = "";
					AlcatelCDR.levelOfCAMEL = "";
					AlcatelCDR.originalCalledNumber = "";

					mRecLength = Global.fixSignedByte(mBuffer[mFileByte]) + 1;
					mFileByte++;
					mByteN = 0;
					while (mByteN < mRecLength) {
						// version
						AlcatelCDR.Version = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						if (AlcatelCDR.Version.compareTo("04") != 0) {
							mSource = "TMP" + pFileID;
							mConnection.rollback();
							mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
									+ ",note='Mistake version of cdrfile : " + mFileByte + " - rec:" + mRecConvert
									+ "'  WHERE file_id = " + pFileID;
							Global.ExecuteSQL(mConnection, mSQL);
							mConnection.commit();
							writeLogFile("    - Mistake version of cdrfile: " + mFileByte + " - rec:" + mRecConvert);
							return (Global.ErrFileConverted);
						}
						// Record length most significant part
						// AlcatelCDR.RecordLengthMostSignificantPart =
						// HexToBCD(fixSignedByte(
						// mBuffer[mByteN]));
						convertRecord();

						if ((AlcatelCDR.MSCTypeAndCallType.compareTo("00") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("01") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("02") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("16") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("14") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("15") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("08") != 0)
								&& (AlcatelCDR.MSCTypeAndCallType.compareTo("18") != 0)) // OG,
																							// IC,
																							// DV,
																							// DV,
																							// Reroute,
																							// Reroute
																							// forward,
																							// Transit
						{ // Transit
							// bo qua nhung ban ghi nay
						} else {
							// if (mRecConvert == 582)
							// mRecConvert++;

							Analyse();
							mRecConvert++;
							if (cdrfileParam.ChargeCDRFile) {
								appendValue(AlcatelCDR.RecordType);
								appendValue(AlcatelCDR.CallType);
								appendValue(AlcatelCDR.Calling_isdn);
								appendValue(AlcatelCDR.MobileSubscriberIdentity); // Calling_imsi
								appendValue(AlcatelCDR.CallStaTime);
								appendValue(String.valueOf(AlcatelCDR.CallDuration));
								appendValue(AlcatelCDR.CallEndTime);
								appendValue(AlcatelCDR.Called_isdn);
								appendValue(AlcatelCDR.Cell_id); // CELL_ID
								appendValue(AlcatelCDR.Service_center);
								appendValue(AlcatelCDR.ic_route.trim()); // IC_ROUTE
								appendValue(AlcatelCDR.og_route.trim()); // OG_ROUTE
								appendValue(AlcatelCDR.tariff_class); // tariff
								// class
								appendValue(AlcatelCDR.RequiredTeleservice);
								appendValue(AlcatelCDR.RequiredBearerService);
								appendValue(AlcatelCDR.NumberofInvokedINservices);
								appendValue(AlcatelCDR.CallOriginChargingIndicator); // cha_indicator
								appendValue(AlcatelCDR.org_call_id);
								appendValue(""); // TransISDN
								appendValue(String.valueOf(AlcatelCDR.rec_seq_number));
								appendValue(AlcatelCDR.IMEI);
								appendValue(AlcatelCDR.CallingOrg);
								appendValue(AlcatelCDR.CalledOrg);
								appendValue(AlcatelCDR.EmlppPriorityLevel);

								fileConvert.addText(mStrValues);
								mStrValues = "";
								// Pha 7
								try {
									String callStartTime = AlcatelCDR.CallStaTime.substring(6, 8) + "/"
											+ AlcatelCDR.CallStaTime.substring(4, 6) + "/"
											+ AlcatelCDR.CallStaTime.substring(0, 4) + " "
											+ AlcatelCDR.CallStaTime.substring(8, 10) + ":"
											+ AlcatelCDR.CallStaTime.substring(10, 12) + ":"
											+ AlcatelCDR.CallStaTime.substring(12, 14);

									if (lastCallingTime.equals("")) {
										lastCallingTime = callStartTime;
									} else if (Global.compareTo(callStartTime, lastCallingTime) == 1) {
										lastCallingTime = callStartTime;
									}

									// get first calling time.(18/2/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = callStartTime;
									} else if (Global.compareTo(callStartTime, firstCallingTime) == 2) {
										firstCallingTime = callStartTime;
									}

								} catch (Exception ex) {
								}
							} else {
								mRecN++;
								mStrValues = mRecN + "|" + pCenterID + "|" + AlcatelCDR.CallType + "|" + "|" + "|" + "|"
										+ "|" + AlcatelCDR.Calling_isdn + "|" + AlcatelCDR.MobileSubscriberIdentity
										+ "|" + AlcatelCDR.CallStaTime.substring(6, 8) + "/"
										+ AlcatelCDR.CallStaTime.substring(4, 6) + "/"
										+ AlcatelCDR.CallStaTime.substring(0, 4) + " "
										+ AlcatelCDR.CallStaTime.substring(8, 10) + ":"
										+ AlcatelCDR.CallStaTime.substring(10, 12) + ":"
										+ AlcatelCDR.CallStaTime.substring(12, 14) + "|" // chargeResult.strPO_CODE
																							// +,
																							// chargeResult.dblTaxAir
																							// +,
																							// chargeResult.dblTaxIdd
																							// +,
																							// chargeResult.dblTaxSer
																							// +
										+ AlcatelCDR.CallDuration + "|" + AlcatelCDR.CallEndTime + "|"
										+ AlcatelCDR.Called_isdn + "|" + AlcatelCDR.Cell_id + "|"
										+ AlcatelCDR.Service_center + "|" + AlcatelCDR.ic_route.trim() + "|"
										+ AlcatelCDR.og_route.trim() + "|" + AlcatelCDR.tariff_class + "|"
										+ AlcatelCDR.RequiredTeleservice + "|" + AlcatelCDR.RequiredTeleservice + "|"
										+ AlcatelCDR.NumberofInvokedINservices + "|"
										+ AlcatelCDR.CallOriginChargingIndicator + "|" + AlcatelCDR.org_call_id + "|"
										+ AlcatelCDR.rec_seq_number + "|" + "|" + AlcatelCDR.IMEI + "|"
										+ AlcatelCDR.CallingOrg + "|" + AlcatelCDR.CalledOrg + "|" + "|" + "|" + "|"
										+ "|" + "|" + "|" + AlcatelCDR.MsgTypeIndicator + "|" + "|"
										+ AlcatelCDR.EmlppPriorityLevel + "|" + AlcatelCDR.FCIData + "|" + "|"
										+ AlcatelCDR.levelOfCAMEL + "|" + AlcatelCDR.StorageOfServiceKey + "|" + "|"
										+ AlcatelCDR.originalCalledNumber;

								fileConvert.addText(mStrValues);
								mStrValues = "";
								// Pha 7
								try {
									String callStartTime = AlcatelCDR.CallStaTime.substring(6, 8) + "/"
											+ AlcatelCDR.CallStaTime.substring(4, 6) + "/"
											+ AlcatelCDR.CallStaTime.substring(0, 4) + " "
											+ AlcatelCDR.CallStaTime.substring(8, 10) + ":"
											+ AlcatelCDR.CallStaTime.substring(10, 12) + ":"
											+ AlcatelCDR.CallStaTime.substring(12, 14);
									if (lastCallingTime.equals("")) {
										lastCallingTime = callStartTime;
									} else if (Global.compareTo(callStartTime, lastCallingTime) == 1) {
										lastCallingTime = callStartTime;
									}

									// get first calling time.(18/2/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = callStartTime;
									} else if (Global.compareTo(callStartTime, firstCallingTime) == 2) {
										firstCallingTime = callStartTime;
									}

								} catch (Exception ex) {

								}
							}
						}
					}
				}
				writeLogFile("         - Transit           : " + Global.rpad(Integer.toString(mRecTransit), 6, " "));
				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - Annoucement       : " + Global.rpad(Integer.toString(mRecAnnoun), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				}

				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				// e.printStackTrace();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				// ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert ALCATEL : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileCDR.close();
					fileCDR = null;
					fileConvert.closeFile();
					fileConvert = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		private void Analyse() {
			if (AlcatelCDR.MSCTypeAndCallType.compareTo("00") == 0) {
				AlcatelCDR.CallType = "OG";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("01") == 0) {
				AlcatelCDR.CallType = "IC";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("02") == 0) {
				AlcatelCDR.CallType = "DV";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("16") == 0) {
				AlcatelCDR.CallType = "DV";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("14") == 0) {
				AlcatelCDR.CallType = "RR";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("15") == 0) {
				AlcatelCDR.CallType = "RR";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("08") == 0) {
				AlcatelCDR.CallType = "TS";
			} else if (AlcatelCDR.MSCTypeAndCallType.compareTo("18") == 0) {
				AlcatelCDR.CallType = "TS";
			}

			if (AlcatelCDR.RequiredTeleservice.compareTo("11") == 0) {
				AlcatelCDR.RecordType = "CALL";
			} else if (AlcatelCDR.RequiredTeleservice.compareTo("12") == 0) {
				AlcatelCDR.RecordType = "CALL";
				AlcatelCDR.CallType = "OG";
			} else if (AlcatelCDR.RequiredTeleservice.compareTo("21") == 0) {
				AlcatelCDR.RecordType = "SMS";
				AlcatelCDR.CallType = "SMT";
			} else if (AlcatelCDR.RequiredTeleservice.compareTo("22") == 0) {
				AlcatelCDR.RecordType = "SMS";
				AlcatelCDR.CallType = "SMO";
			} else {
				AlcatelCDR.RecordType = "CALL";
			}

			AlcatelCDR.CallingOrg = AlcatelCDR.LinkInformation;
			if ((AlcatelCDR.LinkInformation.compareTo("") != 0) && (AlcatelCDR.LinkInformation.length() > 9)) {
				AlcatelCDR.Calling_isdn = AlcatelCDR.LinkInformation.substring(3);
			} else {
				AlcatelCDR.Calling_isdn = "";
			}

			if (AlcatelCDR.CallType.compareTo("OG") == 0) {
				if (AlcatelCDR.CallOriginChargingIndicator.lastIndexOf("2") == 1) {
					AlcatelCDR.CallType = "AN";
					mRecAnnoun++;
				} else {
					mRecOG++;
				}

				AlcatelCDR.CalledOrg = AlcatelCDR.CallPartnerIdentity;
				AlcatelCDR.tariff_class = AlcatelCDR.CallPartnerIdentity.substring(0, 2);
				if (AlcatelCDR.tariff_class.compareTo("19") == 0) { // Internaltional
																	// call
					AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
					if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("a4") == 0) {
						AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(2);
					} else if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
					} else {
						AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
					}
				} else if (AlcatelCDR.tariff_class.compareTo("1a") == 0) {
					AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
				} else if (AlcatelCDR.CallPartnerIdentity.substring(2, 3).compareTo("-") == 0) {
					AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
					if ((AlcatelCDR.Called_isdn.length() > 4)
							&& (AlcatelCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0)) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(4);
					}
				} else {
					AlcatelCDR.Called_isdn = "";
					AlcatelCDR.CallType = "ERO";
				}
			} else if (AlcatelCDR.CallType.compareTo("IC") == 0) {
				mRecIC++;
				if (AlcatelCDR.CallPartnerIdentity.compareTo("") != 0) {
					AlcatelCDR.tariff_class = AlcatelCDR.CallPartnerIdentity.substring(0, 2);
					AlcatelCDR.CalledOrg = AlcatelCDR.CallPartnerIdentity;
					if (AlcatelCDR.tariff_class.compareTo("19") == 0) {
						AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
						if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
						} else {
							if ((AlcatelCDR.Called_isdn.length() > 4)
									&& (AlcatelCDR.Called_isdn.substring(0, 4).compareTo("0084") != 0)) {
								AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
							}
						}
					} else if (AlcatelCDR.CallPartnerIdentity.substring(2, 3).compareTo("-") == 0) {
						AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
						if ((AlcatelCDR.Called_isdn.substring(0, 1).compareTo("0") != 0)
								&& AlcatelCDR.Called_isdn.length() != 7) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn;
						}
					} else {
						AlcatelCDR.Called_isdn = "";
						AlcatelCDR.CallType = "ERI";
					}
				}
			} else if (AlcatelCDR.CallType.compareTo("DV") == 0) {
				if (AlcatelCDR.CallOriginChargingIndicator.lastIndexOf("2") == 1) {
					AlcatelCDR.CallType = "AN";
					mRecAnnoun++;
				} else {
					mRecDivert++;
				}
				if (AlcatelCDR.MSCIdentity.length() > 4) {
					if (AlcatelCDR.CallPartnerIdentity.length() > 3) {
						AlcatelCDR.Cell_id = AlcatelCDR.CallPartnerIdentity.substring(3);
					}
				}
				AlcatelCDR.tariff_class = AlcatelCDR.MSLocationIdentity.substring(0, 2);
				AlcatelCDR.CalledOrg = AlcatelCDR.MSLocationIdentity;
				if (AlcatelCDR.tariff_class.compareTo("19") == 0) {
					AlcatelCDR.Called_isdn = AlcatelCDR.MSLocationIdentity.substring(3);
					if (AlcatelCDR.Called_isdn.length() > 9) {
						if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
						} else {
							AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
							if (AlcatelCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(3);
							}
						}

					}

					if (AlcatelCDR.CallPartnerIdentity.length() > 3) {
						AlcatelCDR.org_call_id = AlcatelCDR.CallPartnerIdentity.substring(3);
						if (AlcatelCDR.org_call_id.substring(0, 2).compareTo("84") == 0) {
							AlcatelCDR.org_call_id = "0" + AlcatelCDR.org_call_id.substring(2);
						} else {
							AlcatelCDR.org_call_id = "00" + AlcatelCDR.org_call_id;
						}

						if (AlcatelCDR.org_call_id.endsWith("f")) {
							AlcatelCDR.org_call_id = AlcatelCDR.org_call_id.substring(0,
									AlcatelCDR.org_call_id.length() - 1);
						}
					}
				}
				// else if (AlcatelCDR.tariff_class.compareTo("1a") == 0)
				// {
				// AlcatelCDR.Called_isdn =
				// AlcatelCDR.MSLocationIdentity.substring(3);
				// }
				else {
					AlcatelCDR.Called_isdn = AlcatelCDR.MSLocationIdentity.substring(3);

					if ((AlcatelCDR.Called_isdn.substring(0, 1).compareTo("0") != 0)
							&& AlcatelCDR.Called_isdn.length() > 6) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn;
					}
					if (AlcatelCDR.CallPartnerIdentity.length() > 0) {
						AlcatelCDR.org_call_id = AlcatelCDR.CallPartnerIdentity.substring(3);
						if ((AlcatelCDR.org_call_id.substring(0, 1).compareTo("0") != 0)
								&& AlcatelCDR.org_call_id.length() != 7) {
							AlcatelCDR.org_call_id = "0" + AlcatelCDR.org_call_id;
						}
					}

					if (AlcatelCDR.org_call_id.endsWith("f")) {
						AlcatelCDR.org_call_id = AlcatelCDR.org_call_id.substring(0,
								AlcatelCDR.org_call_id.length() - 1);
					}
				}
			} else if (AlcatelCDR.CallType.compareTo("SMO") == 0) {
				mRecSMO++;
				AlcatelCDR.CallDuration = 0;
				if (AlcatelCDR.TAGSMOCalledNumber.indexOf("-") >= 2 && AlcatelCDR.TAGSMOCalledNumber.length() > 5) {
					AlcatelCDR.tariff_class = AlcatelCDR.TAGSMOCalledNumber.substring(0, 2);
					AlcatelCDR.CalledOrg = AlcatelCDR.TAGSMOCalledNumber;

					if (AlcatelCDR.tariff_class.compareTo("19") == 0) {
						AlcatelCDR.Called_isdn = AlcatelCDR.TAGSMOCalledNumber.substring(3);
						if (AlcatelCDR.Called_isdn.compareTo("") != 0) {
							if (AlcatelCDR.Called_isdn.substring(0, 3).compareTo("084") == 0) {
								AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(3);
							} else if (AlcatelCDR.Called_isdn.substring(0, 3).compareTo("840") == 0) {
								AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(3);
							} else if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
								AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
							} else if ((AlcatelCDR.Called_isdn.substring(0, 2).compareTo("00") != 0)
									&& (AlcatelCDR.Called_isdn.substring(0, 1).compareTo("0") != 0)
									&& (AlcatelCDR.Called_isdn.length() > 7)) {
								AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
							}
						}
					} else {
						AlcatelCDR.Called_isdn = AlcatelCDR.TAGSMOCalledNumber.substring(3);
						if ((AlcatelCDR.Called_isdn.length() > 10)
								&& (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("00") != 0)
								&& (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("09") != 0)
								&& (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("01") != 0)) {
							AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
							if ((AlcatelCDR.Called_isdn.length() > 4)
									&& (AlcatelCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0)) {
								AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(4);
							} else if (AlcatelCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(1);
							}
						}
					}
				}
				AlcatelCDR.Service_center = AlcatelCDR.CallPartnerIdentity.substring(3);
				if (AlcatelCDR.Service_center.endsWith("f")) {
					AlcatelCDR.Service_center = AlcatelCDR.Service_center.substring(0,
							AlcatelCDR.Service_center.length() - 1);
				}
				if (AlcatelCDR.Called_isdn.endsWith("f")) {
					AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(0, AlcatelCDR.Called_isdn.length() - 1);
				}
				if ((!Global.isNumeric(AlcatelCDR.Called_isdn)) || (AlcatelCDR.Called_isdn.length() <= 2)) {
					AlcatelCDR.Called_isdn = AlcatelCDR.Service_center;
					if (AlcatelCDR.Called_isdn.length() > 2
							&& AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
					}
				}
			} else if (AlcatelCDR.CallType.compareTo("SMT") == 0) {
				mRecSMT++;
				AlcatelCDR.CallDuration = 0;
				AlcatelCDR.tariff_class = AlcatelCDR.CallPartnerIdentity.substring(0, 2);
				if (AlcatelCDR.TAGSMOCalledNumber.trim() != "" || !AlcatelCDR.TAGSMOCalledNumber.trim().equals("")) {
					AlcatelCDR.CalledOrg = AlcatelCDR.TAGSMOCalledNumber;
				} else {
					AlcatelCDR.CalledOrg = AlcatelCDR.CallPartnerIdentity;
				}

				if (AlcatelCDR.tariff_class.compareTo("19") == 0) {
					if (AlcatelCDR.TAGSMOCalledNumber.trim() != ""
							|| !AlcatelCDR.TAGSMOCalledNumber.trim().equals("")) {
						AlcatelCDR.Called_isdn = AlcatelCDR.TAGSMOCalledNumber.substring(3);
						AlcatelCDR.Service_center = AlcatelCDR.CallPartnerIdentity.substring(3);
					} else {
						AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
						AlcatelCDR.Service_center = AlcatelCDR.Called_isdn;
					}
					if (AlcatelCDR.Called_isdn.compareTo("") != 0) {
						if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
						} else if ((AlcatelCDR.Called_isdn.substring(0, 2).compareTo("00") != 0)
								&& (AlcatelCDR.Called_isdn.substring(0, 1).compareTo("0") != 0)
								&& (AlcatelCDR.Called_isdn.length() > 7)) {
							AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
						} else if (AlcatelCDR.Called_isdn.length() > 10) {
							AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
						}
					}
				} else {
					AlcatelCDR.Called_isdn = AlcatelCDR.TAGSMOCalledNumber;
					AlcatelCDR.Service_center = AlcatelCDR.CallPartnerIdentity.substring(3);
					AlcatelCDR.Called_isdn = AlcatelCDR.Service_center;
					if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
					}
				}

				if (AlcatelCDR.Service_center.endsWith("f")) {
					AlcatelCDR.Service_center = AlcatelCDR.Service_center.substring(0,
							AlcatelCDR.Service_center.length() - 1);
				}
			} else if ((AlcatelCDR.CallType.compareTo("TS") == 0) || ((AlcatelCDR.CallType.compareTo("RR") == 0))) {
				mRecTransit++;
				if (AlcatelCDR.CallPartnerIdentity.compareTo("") != 0) {
					AlcatelCDR.tariff_class = AlcatelCDR.CallPartnerIdentity.substring(0, 2);
					AlcatelCDR.CalledOrg = AlcatelCDR.CallPartnerIdentity;
					if (AlcatelCDR.tariff_class.compareTo("19") == 0) { // Internaltional
																		// call
						AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
						if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("a4") == 0) {
							AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(2);
						} else if (AlcatelCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(2);
						} else {
							AlcatelCDR.Called_isdn = "00" + AlcatelCDR.Called_isdn;
						}
					} else if (AlcatelCDR.tariff_class.compareTo("1a") == 0) {
						AlcatelCDR.Called_isdn = "0" + AlcatelCDR.CallPartnerIdentity.substring(3);
						if (AlcatelCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
							AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(1);
						}
					} else if (AlcatelCDR.CallPartnerIdentity.substring(2, 3).compareTo("-") == 0) {
						AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
						if ((AlcatelCDR.Called_isdn.length() > 4)
								&& (AlcatelCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0)) {
							AlcatelCDR.Called_isdn = "0" + AlcatelCDR.Called_isdn.substring(4);
						}
					}
				} else {
					AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity;
				}
			} else {
				if (AlcatelCDR.CallPartnerIdentity.compareTo("") != 0) {
					AlcatelCDR.CalledOrg = AlcatelCDR.CallPartnerIdentity;
					AlcatelCDR.Called_isdn = AlcatelCDR.CallPartnerIdentity.substring(3);
				}
			}
			if (AlcatelCDR.Calling_isdn.length() > 0) {
				if (AlcatelCDR.Calling_isdn.endsWith("f")) {
					AlcatelCDR.Calling_isdn = AlcatelCDR.Calling_isdn.substring(0,
							AlcatelCDR.Calling_isdn.length() - 1);
				}
				if (AlcatelCDR.Calling_isdn.substring(0, 2).compareTo("84") == 0) {
					AlcatelCDR.Calling_isdn = AlcatelCDR.Calling_isdn.substring(2);
				}
			}
			if (AlcatelCDR.Called_isdn.endsWith("f")) {
				AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(0, AlcatelCDR.Called_isdn.length() - 1);
			}

			if (AlcatelCDR.IMEI.endsWith("f")) {
				AlcatelCDR.IMEI = AlcatelCDR.IMEI.substring(0, AlcatelCDR.IMEI.length() - 1);
			}

			if (AlcatelCDR.MobileSubscriberIdentity.endsWith("f")) {
				AlcatelCDR.MobileSubscriberIdentity = AlcatelCDR.MobileSubscriberIdentity.substring(0,
						AlcatelCDR.MobileSubscriberIdentity.length() - 1);
			}
			if (AlcatelCDR.Called_isdn.length() > 20) {
				AlcatelCDR.Called_isdn = AlcatelCDR.Called_isdn.substring(0, 20);
			}
		}

		private void convertRecord() {
			// Record length most significant part
			// AlcatelCDR.RecordLengthMostSignificantPart =
			// HexToBCD(fixSignedByte(
			// mBuffer[mByteN]));
			mByteN++;
			// MSC type and Call type
			AlcatelCDR.MSCTypeAndCallType = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
			mByteN++;
			if ((AlcatelCDR.MSCTypeAndCallType.compareTo("00") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("01") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("02") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("16") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("14") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("15") != 0) && // OG,
																				// IC,
																				// DV,
																				// DV,
																				// Reroute,
																				// Reroute
			// forward
			(AlcatelCDR.MSCTypeAndCallType.compareTo("08") != 0)
					&& (AlcatelCDR.MSCTypeAndCallType.compareTo("18") != 0)) // Transit
			{ // Transit
				mByteN += mRecLength - 3;
				mRecOther++;
				mRecConvert++;
			} else {
				// Efficiency indicator and successful call termination type
				// AlcatelCDR.EfficiencyIndicator =
				// HexToBCD(fixSignedByte(mBuffer[mFileByte+mByteN]));
				mByteN++;
				// Intermediate ticket number
				// AlcatelCDR.IntermediateTicketNumber =
				// HexToBCD(fixSignedByte(mBuffer[
				// mFileByte+mByteN]));
				mByteN++;
				// Call origin and Charging indicator
				AlcatelCDR.CallOriginChargingIndicator = Global
						.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				// Required teleservice
				AlcatelCDR.RequiredTeleservice = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				// Required bearer service
				AlcatelCDR.RequiredBearerService = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				// Circuit allocation time stamp
				AlcatelCDR.CallStaTime = "20" + Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 2]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 3]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 4]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 5]));
				mByteN += 6;
				// Call duration
				AlcatelCDR.CallDuration = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 65536)
						+ (Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]) * 256)
						+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 2]);
				mByteN += 3;
				// Call time stamp
				AlcatelCDR.CallEndTime = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])) + "/"
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1])) + " "
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 2])) + ":"
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 3])) + ":"
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + 4]));
				mByteN += 5;
				// Mobile Station Identity (IMEI)
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				// mByteN += mLength + 1;
				mByteN++;
				for (int i = 1; i <= mLength; i++) {
					AlcatelCDR.IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
				}
				// List of invoked supplementary services
				// Length field
				mListOfInvokeLength = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 256)
						+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]);
				mByteN += 2;
				for (int i = 1; i <= mListOfInvokeLength; i++) {
					mValue = Global.HexToBCD(mBuffer[mFileByte + mByteN]);
					mByteN++;
					if ("1c".compareTo(mValue) == 0 || "02".compareTo(mValue) == 0) {
						AlcatelCDR.InvokedCamelService = mValue;
						mLength = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]);
						AlcatelCDR.LengthOfCamel = mLength;
						// System.out.println(" Camel phase 2 data Length:"+
						// mLength);
						mByteN += 2;

						int k = 0;
						while (k < mLength) {
							// Length of last number given by SCP
							int lengthLastNumberGivenBySCP = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							k++;
							if (k >= mLength) {
								break;
							}
							if (lengthLastNumberGivenBySCP > 0) {
								mByteN += lengthLastNumberGivenBySCP;
								k += lengthLastNumberGivenBySCP;
							}
							if (k >= mLength) {
								break;
							}
							// Invoked CAMEL serv. Number
							int camelServiceNum = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							// System.out.println(" Invoked CAMEL serv.
							// Number:"+ camelServiceNum);
							AlcatelCDR.InvokedCAMELServNumber = camelServiceNum;
							mByteN++;
							k++;
							if (k >= mLength) {
								break;
							}
							// 1 or 2 service Key
							for (int j = 0; j < camelServiceNum; j++) {
								int lengthSCPaddress = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								k++;

								if (k >= mLength) {
									break;
								}

								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								String address = "";
								for (int n = 0; n < lengthSCPaddress - 1; n++) {
									address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									k++;
								}
								AlcatelCDR.Address = address;
								if (k >= mLength) {
									break;
								}

								// String StorageofServiceKey = "";
								for (int n = 0; n < 4; n++) {
									AlcatelCDR.StorageOfServiceKey += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
								}
								k += 4;

								if (k >= mLength) {
									break;
								}
								int lengthOfNewNumber = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								k++;

								if (k >= mLength) {
									break;
								}
								if (lengthOfNewNumber > 0) {
									mByteN += lengthOfNewNumber;
									k += lengthOfNewNumber;
								}
								if (k >= mLength) {
									break;
								}
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}

								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								// Length of FCI data
								int lengthFCIdata = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);

								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								if (lengthFCIdata >= 3) {
									// mByteN += lengthFCIdata;

									mByteN++;
									k++;
									if (k >= mLength) {
										break;
									}
									mByteN++;
									k++;
									if (k >= mLength) {
										break;
									}
									for (int ii = 0; ii < lengthFCIdata - 2; ii++) {
										AlcatelCDR.FCIData += Global
												.HexToBCD(Global.fixSignedCharByte(mBuffer[mFileByte + mByteN + ii]));
									}
									k += lengthFCIdata - 2;
									if (k >= mLength) {
										break;
									}
								}

								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}

								int IPOnRelease = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								AlcatelCDR.IPOnRelease = IPOnRelease;
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								String CAMELinfo = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								AlcatelCDR.CAMELinfo = CAMELinfo;
								// System.out.println("General CAMEL info TAG:"+
								// CAMELinfo);
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								String NumOfDPencountered = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								AlcatelCDR.NumOfDPencountered = NumOfDPencountered;
								// System.out.println("Number of DP
								// encountered:"+ NumOfDPencountered);
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}

								String DefaultCallHandling = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								AlcatelCDR.DefaultCallHandling = DefaultCallHandling;
								// System.out.println("Default Call Handling:"+
								// DefaultCallHandling);
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								AlcatelCDR.levelOfCAMEL = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								// String levelOfCAMEL =
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN]));
								// AlcatelCDR.levelOfCAMEL = levelOfCAMEL;
								// System.out.println("Level of CAMEL service:"+
								// DefaultCallHandling);
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								String CAMELInitiatingCF = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								AlcatelCDR.CAMELInitiatingCF = CAMELInitiatingCF;
								// System.out.println("CAMEL initiating CF:"+
								// CAMELInitiatingCF);
								mByteN++;
								k++;
								if (k >= mLength) {
									break;
								}
								mByteN += (mLength - k);
								k = mLength;
								break;

							}
							i += mLength + 2;
						}
					}

					else if ("28".compareTo(mValue) == 0) {
						mLength = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]);
						mByteN += mLength;
						i += mLength;
						for (int k = 1; k <= mLength; k++) {

						}

					} else if ("01".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN += mLength;
						i += mLength;
						/*
						 * for (int j = 1; j <= mLength; j++) {
						 * AlcatelCDR.NumberofInvokedINservices =
						 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
						 * mFileByte+mByteN])) + "-"; mByteN++; i++;
						 * AlcatelCDR.NumberofInvokedINservices +=
						 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
						 * mFileByte+mByteN]) * 256) +
						 * Global.fixSignedByte(mBuffer[mFileByte+mByteN + 1]) +
						 * "-"; mByteN += 2; i += 2;
						 *
						 * mLength =
						 * Global.fixSignedByte(mBuffer[mFileByte+mByteN]);
						 * mByteN++; i++; for (int k = 1; k <= mLength; k++) {
						 * AlcatelCDR.NumberofInvokedINservices +=
						 * Global.HexToTBCD(Global.fixSignedByte(mBuffer[
						 * mFileByte+mByteN])); i++; mByteN++; } }
						 */
					} else if ("16".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						i++;
						mByteN++;
						if (mLength == 4) {
							AlcatelCDR.rec_seq_number = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 16777216)
									+ (Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]) * 65536)
									+ (Global.fixSignedByte(mBuffer[mFileByte + mByteN + 2]) * 256)
									+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 3]);
							i += 4;
							mByteN += 4;
						} else {
							for (int k = 1; k <= mLength; k++) {
								AlcatelCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
										* Math.pow(256, (mLength - k));
								i++;
								mByteN++;
							}
						}
					} else if ("20".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						i++;
						mByteN++;
						for (int k = 1; k <= mLength; k++) {
							AlcatelCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							i++;
							mByteN++;
						}
					} else if ("21".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						i++;
						mByteN++;
						for (int k = 1; k <= mLength; k++) {
							AlcatelCDR.ic_route += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							i++;
							mByteN++;
						}
					} else if ("22".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						i++;
						mByteN++;
						for (int k = 1; k <= mLength; k++) {
							AlcatelCDR.og_route += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							i++;
							mByteN++;
						}
					} else if ("26".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						i++;
						mByteN++;
						if (mLength > 0) {
							AlcatelCDR.TAGSMOCalledNumber = Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])) + "-";
							mByteN++;
							i++;
							for (int k = 2; k <= mLength; k++) {
								AlcatelCDR.TAGSMOCalledNumber += Global
										.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								i++;
								mByteN++;
							}
						}
					} else if (("0b".compareTo(mValue) == 0) || ("1d".compareTo(mValue) == 0)
							|| ("08".compareTo(mValue) == 0) || ("25".compareTo(mValue) == 0)
							|| ("27".compareTo(mValue) == 0) || ("28".compareTo(mValue) == 0)) {
						i++;
						// mByteN++;
					} else if ("1c".compareTo(mValue) == 0) {
						mLength = (Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + mByteN + 1]);
						mByteN += mLength + 2;
						i += mLength + 2;
						AlcatelCDR.in_mark = "1";
					} else {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN += mLength + 1;
						i += mLength + 1;
					}
				}
				// End List of Invoke
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 0) {
					AlcatelCDR.LinkInformation = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]))
							+ "-";
					mByteN++;
					for (int k = 2; k <= mLength; k++) {
						AlcatelCDR.LinkInformation += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}
				// Mobile Subscriber Identity
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				for (int k = 1; k <= mLength; k++) {
					AlcatelCDR.MobileSubscriberIdentity += Global
							.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
				}

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 0) {
					AlcatelCDR.MSCIdentity = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])) + "-";
					mByteN++;
					for (int k = 2; k <= mLength; k++) {
						AlcatelCDR.MSCIdentity += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 0) {
					AlcatelCDR.CallPartnerIdentity = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]))
							+ "-";
					mByteN++;
					for (int k = 2; k <= mLength; k++) {
						AlcatelCDR.CallPartnerIdentity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 0) {
					AlcatelCDR.MSLocationIdentity = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]))
							+ "-";
					mValue = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN])) + "-";
					mByteN++;
					for (int k = 1; k <= 2; k++) {
						AlcatelCDR.MSLocationIdentity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mValue += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (mLength == 7) {
						mRet = 0;
						for (int i = 4; i <= 5; i++) {
							AlcatelCDR.MSLocationIdentity += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (5 - i));
							mByteN++;
						}
						AlcatelCDR.Cell_id = mRet + "-";
						mRet = 0;
						for (int i = 6; i <= mLength; i++) {
							AlcatelCDR.MSLocationIdentity += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mLength - i));
							mByteN++;
						}
						AlcatelCDR.Cell_id += mRet;
					} else {
						for (int k = 1; k <= mLength - 3; k++) {
							AlcatelCDR.MSLocationIdentity += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							// mRet=Global.fixSignedByte(mBuffer[mFileByte+mByteN])*Math.pow(256,
							// (mLength-3-k));
							mValue += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
						AlcatelCDR.MSLocationIdentity = mValue;
					}
					/*
					 * for (int k = 1; k <= mLength - 3; k++) {
					 * AlcatelCDR.MSLocationIdentity +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte+
					 * mByteN])); //mRet
					 * +=(fixSignedByte(mBuffer[mFileByte+mByteN]))*Math.pow(
					 * 256, (mLength-3-k)); mValue +=
					 * Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte+
					 * mByteN])); mByteN++; } if
					 * (AlcatelCDR.MSLocationIdentity.substring(0, 4).
					 * compareTo("452f") != 0) { AlcatelCDR.MSLocationIdentity =
					 * mValue; } else { AlcatelCDR.Cell_id =
					 * AlcatelCDR.MSLocationIdentity; }
					 */
				}

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				for (int k = 1; k <= mLength; k++) {
					AlcatelCDR.MSLocationIdentityExtension += Global
							.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
				}

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength == 5) {
					for (int k = 1; k <= mLength; k++) {
						AlcatelCDR.RequiredBearerCapability += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
					AlcatelCDR.og_route = AlcatelCDR.RequiredBearerCapability;
				} else if (mLength == 6) {
					AlcatelCDR.RequiredBearerCapability += Global
							.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])) + "-";
					mByteN++;
					for (int k = 1; k <= mLength - 1; k++) {
						AlcatelCDR.RequiredBearerCapability += (char) (Global
								.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					AlcatelCDR.og_route = AlcatelCDR.RequiredBearerCapability.substring(3);
				} else if (mLength == 7) {
					for (int k = 1; k <= mLength; k++) {
						AlcatelCDR.RequiredBearerCapability += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
					AlcatelCDR.og_route = AlcatelCDR.RequiredBearerCapability;
				} else {
					for (int k = 1; k <= mLength; k++) {
						AlcatelCDR.RequiredBearerCapability += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				}

				// InformationReceivedFromtheFixednetwork
				mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				for (int i = 1; i <= mRet; i++) {
					mValue = Global.HexToBCD(mBuffer[mFileByte + mByteN]);
					mByteN++;
					if ("60".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						i++;
						for (int k = 1; k <= mLength; k++) {
							AlcatelCDR.InformationReceivedFromtheFixednetwork += (char) (mBuffer[mFileByte + mByteN]);
							mByteN++;
							i++;
						}
						AlcatelCDR.ic_route = AlcatelCDR.InformationReceivedFromtheFixednetwork;
					} else {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN += mLength + 1;
						i += mLength + 1;
					}
				}
			}
			mFileByte += mByteN;
		}
	} // End class Convert Alcatel

	class ConvertEricsson {

		protected StructEricssonCDR EricssonCDR = new StructEricssonCDR();
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;
		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;

		private int EricssonFile_R10(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			RandomAccessFile fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mRecN = 0;
			int mFileLength = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mMSCHeaderCharge);
				} else {
					fileConvert.addText(Global.mMSCHeaderNoCharge);
				}

				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecAnnoun = 0;
				mRecDivert = 0;
				mRecTransit = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mTagFieldCode = "";
				mTagFieldLength = 0;
				mTagModuleCode = "";
				mTagModuleLength = 0;
				//
				//mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					//Global.ExecuteSQL(mConnection, mSQL);
					//mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}

				// ----------- datnh, 2013.12.17: Luu lai gia tri date va time
				// -----------------
				String[] currDate = (new SimpleDateFormat("yyyyMMdd HHmmss")).format(new java.util.Date()).split(" ");
				String dateForStartOfCharge = currDate[0];
				String timeForStartOfCharge = currDate[1];

				mFileByte = 0;
				while (mFileByte < mFileLength) {

					mRecLength = 0;
					EricssonCDR.CallType = "";
					EricssonCDR.Calling_isdn = "";
					EricssonCDR.Calling_IMEI = "";
					EricssonCDR.Calling_IMSI = "";
					EricssonCDR.DateForStartOfCharge = "";
					EricssonCDR.TimeForStartOfCharge = "";
					EricssonCDR.TimeForStopOfCharge = "";
					EricssonCDR.Duration = 0;
					EricssonCDR.Called_isdn = "";
					EricssonCDR.Cell_id = "";
					EricssonCDR.ic_route = "";
					EricssonCDR.og_route = "";
					EricssonCDR.tariff_class = "";
					EricssonCDR.in_mark = "";
					EricssonCDR.charging_indicator = "";
					EricssonCDR.org_call_id = "";
					EricssonCDR.rec_seq_number = 0;
					EricssonCDR.Service_center = "";
					EricssonCDR.SwitchIdentity = "";
					EricssonCDR.TeleServiceCode = "";
					EricssonCDR.BearerServiceCode = "";
					EricssonCDR.TranslatedNumber = "";
					EricssonCDR.CallingOrg = "";
					EricssonCDR.CalledOrg = "";
					EricssonCDR.MsgTypeIndicator = "";
					EricssonCDR.SystemType = "2";
					EricssonCDR.emlppPriorityLevel = "";
					EricssonCDR.FCIData = "";
					EricssonCDR.networkCallReference = "";
					EricssonCDR.GSM_SCF_Address = "";
					EricssonCDR.calIdentifyNumber = 0;
					EricssonCDR.serviceKey = "";
					EricssonCDR.internalCauseAndLoc = "";
					EricssonCDR.seizureTime = "";
					EricssonCDR.supplementaryServiceCode = "";
					EricssonCDR.camelDestinationAddress = "";
					EricssonCDR.smsResult = "";
					EricssonCDR.callerIP = "";
					EricssonCDR.calledIP = "";
					EricssonCDR.CallTypeDetail = "";
					EricssonCDR.RMnumber = "";
					EricssonCDR.originalCalledNumber = "";

					EricssonCDR.RecordType = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte]));
					mFileByte++;

					if (EricssonCDR.RecordType.compareTo("a0") == 0) // Single
					// Record
					{
						mRecConvert++;
						mLength = Global.fixSignedByte(mBuffer[mFileByte]);
						mFileByte++;
						if (mLength > 128) {
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (mRet - i));
								mFileByte++;
							}
						} else {
							mRecLength = mLength;
						}

						mByteN = 0;
						while (mByteN < mRecLength) {
							mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mTagModuleLength = 0;

							if (mTagModuleCode.compareTo("a0") == 0) { // Transit
								Module00_Transit();
							} else if (mTagModuleCode.compareTo("a1") == 0) // MS
							// Originating
							{
								Module01_MsOriginating();
							} else if (mTagModuleCode.compareTo("a2") == 0) // Roaming
							// Call
							// Forwarding
							{
								Module02_RoamingCallForwarding();
							} else if (mTagModuleCode.compareTo("a3") == 0) // Call
							// Forwarding
							{
								Module03_CallForwarding();
							} else if (mTagModuleCode.compareTo("a4") == 0) // MS
							// Terminating
							{
								Module04_MSTerminating();
							} else if (mTagModuleCode.compareTo("a5") == 0) { // MSOriginatingSMSinMSC
								Module05_MSOriginatingSMSInMSC();
							} else if (mTagModuleCode.compareTo("a7") == 0) { // MSTerminatingSMSinMSC
								Module07_MSTerminatingSMSInMSC();
							} else if (mTagModuleCode.compareTo("ae") == 0) { // IN
																				// Incoming
																				// Call
								Module14_INIncomingCall();
							} else {
								mByteN = (mByteN - 1) + mRecLength;
								mFileByte += mByteN;
								mRecOther++;
							}
						}

						Analyse();
						if ((EricssonCDR.RecordType.compareTo("CALL") == 0)
								|| (EricssonCDR.RecordType.compareTo("SMS") == 0)) {
							if (cdrfileParam.ChargeCDRFile) {
								appendValue(EricssonCDR.RecordType);
								appendValue(EricssonCDR.CallType);
								appendValue(EricssonCDR.Calling_isdn);
								appendValue(EricssonCDR.Calling_IMSI); // Calling_imsi
								appendValue(EricssonCDR.DateForStartOfCharge + EricssonCDR.TimeForStartOfCharge);
								appendValue(String.valueOf(EricssonCDR.Duration));
								appendValue(EricssonCDR.TimeForStopOfCharge);
								appendValue(EricssonCDR.Called_isdn);
								appendValue(EricssonCDR.Cell_id); // CELL_ID
								appendValue(EricssonCDR.Service_center);
								appendValue(EricssonCDR.ic_route); // IC_ROUTE
								appendValue(EricssonCDR.og_route); // OG_ROUTE
								appendValue(EricssonCDR.tariff_class); // tariff
								// class
								appendValue(EricssonCDR.TeleServiceCode);
								appendValue(EricssonCDR.BearerServiceCode);
								appendValue(EricssonCDR.in_mark);
								appendValue(EricssonCDR.charging_indicator); // cha_indicator
								appendValue(EricssonCDR.org_call_id);
								appendValue(EricssonCDR.TranslatedNumber);
								appendValue(String.valueOf(EricssonCDR.rec_seq_number));
								appendValue(EricssonCDR.Calling_IMEI);
								appendValue(EricssonCDR.CallingOrg);
								appendValue(EricssonCDR.CalledOrg);
								appendValue(EricssonCDR.MsgTypeIndicator);
								appendValue(EricssonCDR.emlppPriorityLevel);

								fileConvert.addText(mStrValues);
								mStrValues = "";
								try {
									// Pha 7 - get last calling time
									String dateCharge = EricssonCDR.DateForStartOfCharge.substring(6, 8) + "/"
											+ EricssonCDR.DateForStartOfCharge.substring(4, 6) + "/"
											+ EricssonCDR.DateForStartOfCharge.substring(0, 4) + " "
											+ EricssonCDR.TimeForStartOfCharge.substring(0, 2) + ":"
											+ EricssonCDR.TimeForStartOfCharge.substring(2, 4) + ":"
											+ EricssonCDR.TimeForStartOfCharge.substring(4, 6);
									if (lastCallingTime.equals("")) {
										lastCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, lastCallingTime) == 1) {
										lastCallingTime = dateCharge;
									}
									// get first calling time.(18/2/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, firstCallingTime) == 2) {
										firstCallingTime = dateCharge;
									}

								} catch (Exception ex) {
								}
							} else {
								// START ----------- datnh, 2013.12.17: Luu lai
								// gia tri date va time -----------------
								if (EricssonCDR.DateForStartOfCharge.trim().equals("")
										|| EricssonCDR.TimeForStartOfCharge.trim().equals("")) {

									EricssonCDR.DateForStartOfCharge = dateForStartOfCharge;
									EricssonCDR.TimeForStartOfCharge = timeForStartOfCharge;
								} else {

									dateForStartOfCharge = EricssonCDR.DateForStartOfCharge;
									timeForStartOfCharge = EricssonCDR.TimeForStartOfCharge;
								}

								// commented by datnh
								/*
								 * if (EricssonCDR.DateForStartOfCharge.trim().
								 * equals("") ||
								 * EricssonCDR.TimeForStartOfCharge.trim().
								 * equals("")) {
								 * EricssonCDR.DateForStartOfCharge =
								 * "2343253263476357";
								 * EricssonCDR.TimeForStartOfCharge =
								 * "45646545454"; }
								 */
								// END ----------- datnh, 2013.12.17: Luu lai
								// gia tri date va time -----------------

								if (EricssonCDR.seizureTime == "") {
									EricssonCDR.seizureTime = "000000";
								}
								mRecN++;
								
								//Here R10
								mStrValues = mRecN + "|" + pCenterID + "|" + EricssonCDR.CallType + "|" + "|" + "|"
										+ "|" + "|" + EricssonCDR.Calling_isdn + "|" + EricssonCDR.Calling_IMSI + "|"
										+ EricssonCDR.DateForStartOfCharge.substring(6, 8) + "/"
										+ EricssonCDR.DateForStartOfCharge.substring(4, 6) + "/"
										+ EricssonCDR.DateForStartOfCharge.substring(0, 4) + " "
										+ EricssonCDR.TimeForStartOfCharge.substring(0, 2) + ":"
										+ EricssonCDR.TimeForStartOfCharge.substring(2, 4) + ":"
										+ EricssonCDR.TimeForStartOfCharge.substring(4, 6) + "|" + EricssonCDR.Duration
										+ "|" + EricssonCDR.TimeForStopOfCharge + "|" + EricssonCDR.Called_isdn + "|"
										+ EricssonCDR.Cell_id + "|" + EricssonCDR.Service_center + "|"
										+ EricssonCDR.ic_route.trim() + "|" + EricssonCDR.og_route.trim() + "|"
										+ EricssonCDR.tariff_class + "|" + EricssonCDR.TeleServiceCode + "|"
										+ EricssonCDR.BearerServiceCode + "|" + EricssonCDR.in_mark + "|"
										+ EricssonCDR.charging_indicator + "|" + EricssonCDR.org_call_id + "|"
										+ EricssonCDR.rec_seq_number + "|" + EricssonCDR.TranslatedNumber + "|"
										+ EricssonCDR.Calling_IMEI + "|" + EricssonCDR.CallingOrg + "|"
										+ EricssonCDR.CalledOrg + "|" + "|" + "|" + "|" + "|" + "|" + "|"
										+ EricssonCDR.MsgTypeIndicator + "|" + EricssonCDR.SystemType + "|" + "|"
										+ EricssonCDR.FCIData + "|" + EricssonCDR.networkCallReference + "|" + "|"
										+ EricssonCDR.serviceKey + "|" + EricssonCDR.GSM_SCF_Address + "|"
										+ EricssonCDR.calIdentifyNumber // TransISDN,
																		// chargeResult.intSubsType
										+ "|" + EricssonCDR.seizureTime.substring(0, 2) + ":"
										+ EricssonCDR.seizureTime.substring(2, 4) + ":"
										+ EricssonCDR.seizureTime.substring(4, 6) + "|" + EricssonCDR.emlppPriorityLevel
										+ "|" + EricssonCDR.internalCauseAndLoc + "|"
										+ EricssonCDR.supplementaryServiceCode + "|"
										+ EricssonCDR.camelDestinationAddress + "|" + EricssonCDR.smsResult + "|"
										+ EricssonCDR.callerIP + "|" + EricssonCDR.calledIP + "|"
										+ EricssonCDR.CallTypeDetail + "|" + EricssonCDR.RMnumber + "|" + EricssonCDR.originalCalledNumber
										+ convertHeadNumber(EricssonCDR.Calling_isdn) + "|" + convertHeadNumber(EricssonCDR.Called_isdn);

								// chargeResult.intCollectType;
								fileConvert.addText(mStrValues);
								mStrValues = "";
								try {
									// Pha 7 - get last calling time
									String dateCharge = EricssonCDR.DateForStartOfCharge.substring(6, 8) + "/"
											+ EricssonCDR.DateForStartOfCharge.substring(4, 6) + "/"
											+ EricssonCDR.DateForStartOfCharge.substring(0, 4) + " "
											+ EricssonCDR.TimeForStartOfCharge.substring(0, 2) + ":"
											+ EricssonCDR.TimeForStartOfCharge.substring(2, 4) + ":"
											+ EricssonCDR.TimeForStartOfCharge.substring(4, 6);
									if (lastCallingTime.equals("")) {
										lastCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, lastCallingTime) == 1) {
										lastCallingTime = dateCharge;
									}
									// get first calling time.(18/2/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, firstCallingTime) == 2) {
										firstCallingTime = dateCharge;
									}

								} catch (Exception ex) {
								}
							}
						}
					} else if (EricssonCDR.RecordType.compareTo("a1") == 0) // Composit
					// Record
					{
						mLength = Global.fixSignedByte(mBuffer[mFileByte]);
						mFileByte++;
						/*
						 * if (mLength > 128) { mRet = mLength - 128; for (int i
						 * = 1; i <= mRet; i++) { mRecLength +=
						 * Global.fixSignedByte(mBuffer[mFileByte]) *
						 * Math.pow(256, (mRet - i)); mFileByte++; } } else {
						 * mFileByte++; }
						 */
					} else if (EricssonCDR.RecordType.compareTo("00") == 0) // Zeros
					// value
					{
						// mRecConvert--;
					} else {
						//mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error structure cdr:" + pFileName + " at rec : " + mRecConvert + " - byte "
								+ mFileByte + "' WHERE file_id = " + pFileID;
						//Global.ExecuteSQL(mConnection, mSQL);
						//mConnection.commit();
						writeLogFile("      'Error structure cdr:" + pFileName);
						return (Global.ErrFileConverted);
					}
				}
				writeLogFile("         - Transit           : " + Global.rpad(Integer.toString(mRecTransit), 6, " "));
				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - Annoucement       : " + Global.rpad(Integer.toString(mRecAnnoun), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				}
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				 ex.printStackTrace();
				//mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert ERICSSON : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mBuffer = new byte[0];
					mSQL = null;
					mTagModuleCode = null;
					mValue = null;
					mSource = null;
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		private void Module14_INIncomingCall() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "INCOMING";
			EricssonCDR.CallTypeDetail = "INC";

			mRecOG++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				if (mTagFieldCode.compareTo("80") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Calling_isdn = "" + Global.Hex2Dec(EricssonCDR.Calling_isdn);
				} else if (mTagFieldCode.compareTo("81") == 0) { // Switch
																	// Identity
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.SwitchIdentity += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.networkCallReference += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("8d") == 0) { // Record
																// Sequence
																// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.toUpperCase().compareTo("A5") == 0) { // serviceKey
					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;

					if (mTagFieldCode.toUpperCase().compareTo("80") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mByteN += mTagFieldLength;
					}
					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;

					if (mTagFieldCode.toUpperCase().compareTo("81") == 0) {

						mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;

						String bCSMTDPData1 = "";
						for (int i = 1; i <= mTagFieldLength; i++) {
							bCSMTDPData1 += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
						// EricssonCDR.serviceKey =
						// Global.Hex2Dec(bCSMTDPData1);
					}
					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;
					EricssonCDR.sCPAddress = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.sCPAddress += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				} else {
					mByteN += mTagFieldLength;
				}
			}

			if (mByteN < mRecLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if (mTagFieldCode.compareTo("30") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;
					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					int k = 0;
					while (k < mTagFieldLength) {
						int dataModuleTagLength = 0;
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						k++;
						if (mTagFieldCode.compareTo("86") == 0) {
							dataModuleTagLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							k++;
							EricssonCDR.timeEvent = "";
							for (int ii = 0; ii < dataModuleTagLength; ii++) {
								EricssonCDR.timeEvent += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN])) + ":";
								mByteN++;
								k++;
							}
							EricssonCDR.timeEvent = (EricssonCDR.timeEvent.length() > 0
									? EricssonCDR.timeEvent.substring(0, EricssonCDR.timeEvent.length() - 1) : "");

						} else if (mTagFieldCode.compareTo("88") == 0) {
							dataModuleTagLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							k++;
							EricssonCDR.FCIData = "";
							for (int ii = 0; ii < dataModuleTagLength; ii++) {
								EricssonCDR.FCIData += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;

								k++;
							}

						} else if (mTagFieldCode.compareTo("89") == 0) {
							dataModuleTagLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							k++;
							EricssonCDR.legId = "";
							for (int ii = 0; ii < dataModuleTagLength; ii++) {
								EricssonCDR.legId += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;

								k++;
							}
						} else {
							mByteN++;
							k++;
						}

					}
					if (mByteN < mRecLength) {
						mByteN += mRecLength - mByteN;
					}
				}

			}
			mFileByte += mRecLength;
		}

		private void Module00_Transit() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "TS";
			EricssonCDR.CallTypeDetail = "TS";

			mRecTransit++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("84") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("86") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("88") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("89") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8a") == 0) // Time For Stop
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (EricssonCDR.TimeForStopOfCharge.compareTo("") == 0) {
							EricssonCDR.TimeForStopOfCharge += Global
									.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						} else {
							EricssonCDR.TimeForStopOfCharge += ":"
									+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						}
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8b") == 0) // Chargeable
				// Duration
				{
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Duration = Global.TimeToSeconds(mValue);
				} else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.seizureTime += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("8e") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("90") == 0) { // Tariff class
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.tariff_class += (Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("95") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("96") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("99") == 0) // IN Marking of
				// Mobile
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.in_mark += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9c") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.internalCauseAndLoc += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9d") == 0) // Originating
				// Location Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.org_call_id += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (EricssonCDR.org_call_id.length() > 2) {
						EricssonCDR.org_call_id = EricssonCDR.org_call_id.substring(2);
					}
					EricssonCDR.originalCalledNumber = EricssonCDR.org_call_id;

				} else if (mTagFieldCode.compareTo("9f32") == 0) // Translated
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TranslatedNumber += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (EricssonCDR.TranslatedNumber.length() > 2) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(2);
					}
					if (EricssonCDR.TranslatedNumber.length() > 20) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(0, 20);
					}
				}
				// 6/10
				else if (mTagFieldCode.compareTo("bf33") == 0) {
					mByteN++;
					int length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					for (int i = 1; i <= length; i++) {
						mByteN++;
					}
					mByteN++;
					length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength - 8; i++) {
						EricssonCDR.GSM_SCF_Address += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Module01_MsOriginating() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "OG";
			EricssonCDR.CallTypeDetail = "MOC";

			mRecOG++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("84") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("86") == 0) // Calling
				// Subscriber IMEI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("87") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("89") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8a") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8b") == 0) // Time For Stop
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (EricssonCDR.TimeForStopOfCharge.compareTo("") == 0) {
							EricssonCDR.TimeForStopOfCharge += Global
									.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						} else {
							EricssonCDR.TimeForStopOfCharge += ":"
									+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						}
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8c") == 0) // Chargeable
				// Duration
				{
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Duration = Global.TimeToSeconds(mValue);
				}
				// Time from Register Seizure to Start of Charging.
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.seizureTime += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("8f") == 0) { // Charging party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("92") == 0) { // Tariff class
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.tariff_class += (Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("96") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("97") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				}
				// else if (mTagFieldCode.compareTo("9b") == 0)
				// { // Incoming Route
				// int aa = 0;
				// for (int i = 1; i <= mTagFieldLength; i++)
				// {
				// aa += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				// mByteN++;
				// }
				// //System.out.println(aa);
				// }

				else if (mTagFieldCode.compareTo("9b") == 0) { // Cell ID
					String strCountry = "";
					String strNetwork = "";
					String strLocationAndCell = "";
					for (int i = 0; i < 2; i++) {
						strCountry += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (strCountry.endsWith("f")) {
						strCountry = strCountry.substring(0, strCountry.length() - 1);
					}
					for (int i = 1; i < 2; i++) {
						strNetwork += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					mRet = 0;
					for (int i = 4; i <= 5; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (5 - i));
						mByteN++;
					}
					strLocationAndCell = mRet + "-";
					mRet = 0;
					for (int i = 6; i <= mTagFieldLength; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					strLocationAndCell += mRet;
					EricssonCDR.Cell_id += strCountry + "-" + strNetwork + "-" + strLocationAndCell;
				} else if (mTagFieldCode.compareTo("9d") == 0) { // Tele Service
																	// Code
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TeleServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9e") == 0) // Bearer Service
				// Code
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.BearerServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f23") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.internalCauseAndLoc += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9f2f") == 0) // IN Marking of
				// Mobile
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.in_mark += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.toUpperCase().compareTo("9F44") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.networkCallReference += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}
				// Supplementary Service Code
				else if (mTagFieldCode.toUpperCase().compareTo("9F38") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.supplementaryServiceCode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f4a") == 0) // Translated
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TranslatedNumber += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (EricssonCDR.TranslatedNumber.length() > 2) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(2);
					}
					if (EricssonCDR.TranslatedNumber.length() > 20) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(0, 20);
					}
				}
				// 6/10
				else if (mTagFieldCode.compareTo("bf4b") == 0) {
					mByteN++;
					int length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;
					String strServiceKey = "";
					for (int i = 1; i <= length; i++) {
						strServiceKey = Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.serviceKey = Integer.parseInt(strServiceKey) + "";

					mByteN++;
					length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength - 8; i++) {
						EricssonCDR.GSM_SCF_Address += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f57") == 0 || mTagFieldCode.equalsIgnoreCase("9f57")) { // emlpp
																												// priority
																												// level.
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.emlppPriorityLevel += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				}
				// --Modified Date:30-Aug-2012 recognize to 3G, 2G record --
				else if (mTagFieldCode.compareTo("9f64") == 0 || mTagFieldCode.equalsIgnoreCase("9f64")) { // Guaranteed
																											// Bit
																											// Rate.
					for (int i = 1; i <= mTagFieldLength; i++) {
						mByteN++;
					}
					EricssonCDR.SystemType = "1";
				} else {
					mByteN += mTagFieldLength;
				}
				// System.out.println(mTagFieldCode);
			}
			mFileByte += mByteN;
		}

		private void Module02_RoamingCallForwarding() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "RM";
			EricssonCDR.CallTypeDetail = "TSC";

			mRecIC++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("84") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("86") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("87") == 0) // Calling
				// Subscriber IMEI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("89") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8a") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8b") == 0) // Time For Stop
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (EricssonCDR.TimeForStopOfCharge.compareTo("") == 0) {
							EricssonCDR.TimeForStopOfCharge += Global
									.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						} else {
							EricssonCDR.TimeForStopOfCharge += ":"
									+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						}
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8c") == 0) // Chargeable
				// Duration
				{
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Duration = Global.TimeToSeconds(mValue);
				} else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.seizureTime += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("8f") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("91") == 0) { // Tariff class
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.tariff_class += (Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("95") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("96") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.internalCauseAndLoc += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9c") == 0) // Original Called
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TranslatedNumber += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (EricssonCDR.TranslatedNumber.length() > 2) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(2);
					}
					if (EricssonCDR.TranslatedNumber.length() > 20) {
						EricssonCDR.TranslatedNumber = EricssonCDR.TranslatedNumber.substring(0, 20);
					}
					EricssonCDR.originalCalledNumber = EricssonCDR.TranslatedNumber;
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Module03_CallForwarding() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "DV";
			EricssonCDR.CallTypeDetail = "MFWD";

			mRecDivert++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("84") == 0) // Original
																// Called
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.org_call_id += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("85") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Called_isdn;
				} 
				else if (mTagFieldCode.compareTo("86") == 0) // Original Called
					// Number
					{
						for (int i = 1; i <= mTagFieldLength; i++) {
							EricssonCDR.originalCalledNumber += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
						if (EricssonCDR.originalCalledNumber.length() > 2) {
							EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(2);
						}
						if (EricssonCDR.originalCalledNumber.length() > 20) {
							EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(0, 20);
						}
					}
				else if (mTagFieldCode.compareTo("87") == 0) { // Calling
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Calling_isdn;
				}

				else if (mTagFieldCode.compareTo("8a") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8d") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}

					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8e") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8f") == 0) // Time For Stop
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (EricssonCDR.TimeForStopOfCharge.compareTo("") == 0) {
							EricssonCDR.TimeForStopOfCharge += Global
									.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						} else {
							EricssonCDR.TimeForStopOfCharge += ":"
									+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						}
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("90") == 0) // Chargeable
				// Duration
				{
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Duration = Global.TimeToSeconds(mValue);
				} else if (mTagFieldCode.compareTo("92") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.seizureTime += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("93") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (EricssonCDR.charging_indicator.compareTo("02") == 0) {
						mRecDivert--;
						mRecAnnoun++;
					}
				} else if (mTagFieldCode.compareTo("95") == 0) { // Tariff class
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.tariff_class += (Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("99") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9a") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9c") == 0) // Originating
				// Location Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Cell_id += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9d") == 0) { // Tele Service
																	// Code
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TeleServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9e") == 0) // Bearer Service
				// Code
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.BearerServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f28") == 0) // IN Marking
																	// of
				// Mobile
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.in_mark += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f1f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.internalCauseAndLoc += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("bf3f") == 0) // IN Marking of
				{
					mByteN++;
					int length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					for (int i = 1; i <= length; i++) {
						mByteN++;
					}
					mByteN++;
					length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength - 8; i++) {
						EricssonCDR.GSM_SCF_Address += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Module04_MSTerminating() {
			EricssonCDR.RecordType = "CALL";
			EricssonCDR.CallType = "IC";
			EricssonCDR.CallTypeDetail = "MTC";

			mRecIC++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("84") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("86") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("87") == 0) // Calling
				// Subscriber IMEI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8a") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8b") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8c") == 0) // Time For Stop
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (EricssonCDR.TimeForStopOfCharge.compareTo("") == 0) {
							EricssonCDR.TimeForStopOfCharge += Global
									.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						} else {
							EricssonCDR.TimeForStopOfCharge += ":"
									+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						}
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8d") == 0) // Chargeable
				// Duration
				{
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.Duration = Global.TimeToSeconds(mValue);
				} else if (mTagFieldCode.compareTo("8f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.seizureTime += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("90") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("92") == 0) { // Tariff class
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.tariff_class += (Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("96") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("97") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9c") == 0) { // Cell ID
					String strCountry = "";
					String strNetwork = "";
					String strLocationAndCell = "";
					for (int i = 0; i < 2; i++) {
						strCountry += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (strCountry.endsWith("f")) {
						strCountry = strCountry.substring(0, strCountry.length() - 1);
					}
					for (int i = 1; i < 2; i++) {
						strNetwork += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					mRet = 0;
					for (int i = 4; i <= 5; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (5 - i));
						mByteN++;
					}
					strLocationAndCell = mRet + "-";
					mRet = 0;
					for (int i = 6; i <= mTagFieldLength; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					strLocationAndCell += mRet;
					EricssonCDR.Cell_id += strCountry + "-" + strNetwork + "-" + strLocationAndCell;
				}

				else if (mTagFieldCode.compareTo("9d") == 0) { // Tele Service
																// Code
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TeleServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9e") == 0) // Bearer Service
				// Code
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.BearerServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f23") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.internalCauseAndLoc += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}
				else if (mTagFieldCode.compareTo("9f24") == 0) // Original Called
					// Number
					{
						for (int i = 1; i <= mTagFieldLength; i++) {
							EricssonCDR.originalCalledNumber += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
						if (EricssonCDR.originalCalledNumber.length() > 2) {
							EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(2);
						}
						if (EricssonCDR.originalCalledNumber.length() > 20) {
							EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(0, 20);
						}
					}
				else if (mTagFieldCode.toUpperCase().compareTo("9F38") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.supplementaryServiceCode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f4a") == 0) { // emlpp
																	// priority
																	// level.
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.emlppPriorityLevel += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				}
				// --Modified Date:30-Aug-2012 recognize to 3G, 2G record --
				else if (mTagFieldCode.compareTo("9f56") == 0 || mTagFieldCode.equalsIgnoreCase("9f56")) { // Guaranteed
																											// Bit
																											// Rate.
					for (int i = 1; i <= mTagFieldLength; i++) {
						mByteN++;
					}
					EricssonCDR.SystemType = "1";
				}

				else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Module05_MSOriginatingSMSInMSC() {
			EricssonCDR.RecordType = "SMS";
			EricssonCDR.CallType = "SMO";
			EricssonCDR.CallTypeDetail = "SMO";

			mRecSMO++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("84") == 0) { // Calling number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) // Calling
				// Subscriber IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("86") == 0) // Calling
				// Subscriber IMEI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("87") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}

					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("88") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("89") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8d") == 0) { // Incoming
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.ic_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8e") == 0) { // Cell ID
					String strCountry = "";
					String strNetwork = "";
					String strLocationAndCell = "";
					for (int i = 0; i < 2; i++) {
						strCountry += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (strCountry.endsWith("f")) {
						strCountry = strCountry.substring(0, strCountry.length() - 1);
					}
					for (int i = 1; i < 2; i++) {
						strNetwork += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					mRet = 0;
					for (int i = 4; i <= 5; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (5 - i));
						mByteN++;
					}
					strLocationAndCell = mRet + "-";
					mRet = 0;
					for (int i = 6; i <= mTagFieldLength; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					strLocationAndCell += mRet;
					EricssonCDR.Cell_id += strCountry + "-" + strNetwork + "-" + strLocationAndCell;

				} else if (mTagFieldCode.compareTo("8f") == 0) { // Tele Service
																	// Code
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TeleServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("90") == 0) // Service Centre
				// Address
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Service_center += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f20") == 0) // Destination
				// Address
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("9f22") == 0) // Message Type
																	// Indicator
																	// Address.
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.MsgTypeIndicator += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f26") == 0) // Camel
																	// Destination
																	// Address.
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.camelDestinationAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				}
				// datnh 2014.04.03
				else if (mTagFieldCode.compareTo("9f2a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.smsResult += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Module07_MSTerminatingSMSInMSC() {
			EricssonCDR.RecordType = "SMS";
			EricssonCDR.CallType = "SMT";
			EricssonCDR.CallTypeDetail = "SMT";

			mRecSMT++;
			mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
			mByteN++;
			if (mLength > 128) {
				mRet = mLength - 128;
				for (int i = 1; i <= mRet; i++) {
					mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
					mByteN++;
				}
			} else {
				mTagModuleLength = mLength;
			}
			mTagModuleLength += mByteN;
			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				if ((mTagFieldCode.compareTo("9f") == 0) || (mTagFieldCode.compareTo("bf") == 0)) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

				}
				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mTagFieldCode.compareTo("82") == 0) { // Record Sequence
															// Number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("81") == 0) { // Call
																	// identification
																	// number
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.calIdentifyNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("83") == 0) // Called Party
				// Number
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CalledOrg = EricssonCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("84") == 0) // Called
																// Subscriber
				// IMSI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("85") == 0) // Called
																// Subscriber
				// IMEI
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("86") == 0) // Date for Start
																// of
				// Charge
				{
					if (mTagFieldLength == 3) {
						EricssonCDR.DateForStartOfCharge = "20";
					}

					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.DateForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("87") == 0) // Time For Start
																// of
				// Charge
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TimeForStartOfCharge += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("89") == 0) { // Charge party
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.charging_indicator += Global
								.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8c") == 0) { // Outgoing
																	// Route
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.og_route += (char) (mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8d") == 0) { // Cell ID
					String strCountry = "";
					String strNetwork = "";
					String strLocationAndCell = "";
					for (int i = 0; i < 2; i++) {
						strCountry += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					if (strCountry.endsWith("f")) {
						strCountry = strCountry.substring(0, strCountry.length() - 1);
					}
					for (int i = 1; i < 2; i++) {
						strNetwork += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					mRet = 0;
					for (int i = 4; i <= 5; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (5 - i));
						mByteN++;
					}
					strLocationAndCell = mRet + "-";
					mRet = 0;
					for (int i = 6; i <= mTagFieldLength; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					strLocationAndCell += mRet;
					EricssonCDR.Cell_id += strCountry + "-" + strNetwork + "-" + strLocationAndCell;
				}

				else if (mTagFieldCode.compareTo("8e") == 0) { // Tele Service
																// Code
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.TeleServiceCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8f") == 0) // Service Centre
				// Address
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Service_center += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9f21") == 0) // Originating
				// Address
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						EricssonCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					EricssonCDR.CallingOrg = EricssonCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("9f22") == 0) // Message Type
																	// Indicator
				// Address
				{
					for (int i = 1; i <= mTagFieldLength; i++) {
						// EricssonCDR.MsgTypeIndicator +=
						// Global.HexToTBCD(Global
						// .fixSignedByte(mBuffer[mFileByte + mByteN]));
						EricssonCDR.MsgTypeIndicator += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void Analyse() {
			// xu ly ton 11 va 19 cua GSM_SCF_Address
			if (EricssonCDR.GSM_SCF_Address.endsWith("f")) {
				EricssonCDR.GSM_SCF_Address = EricssonCDR.GSM_SCF_Address.substring(0,
						EricssonCDR.GSM_SCF_Address.length() - 1);
			}
			if (EricssonCDR.GSM_SCF_Address.length() > 0) {
				if (EricssonCDR.GSM_SCF_Address.substring(0, 2).compareTo("19") == 0
						|| EricssonCDR.GSM_SCF_Address.substring(0, 2).compareTo("11") == 0) {
					EricssonCDR.GSM_SCF_Address = EricssonCDR.GSM_SCF_Address.substring(2);
				}
			}

			if (EricssonCDR.Calling_isdn.length() > 0) {
				// EricssonCDR.Calling_isdn =
				// EricssonCDR.Calling_isdn.substring(2);
				if (EricssonCDR.Calling_isdn.substring(0, 2).compareTo("11") == 0) {
					EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(2);
					if (EricssonCDR.Calling_isdn.substring(0, 2).compareTo("84") == 0) {
						EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(2);
					}
					// New 16-8
					else {
						if (EricssonCDR.CallType.compareTo("TS") == 0) {
							EricssonCDR.Calling_isdn = "00" + EricssonCDR.Calling_isdn;
						}
					}
				} else if (EricssonCDR.Calling_isdn.substring(0, 2).compareTo("12") == 0
						|| (EricssonCDR.Calling_isdn.substring(0, 2).compareTo("13") == 0)) {
					EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(2);
				}

				else if (EricssonCDR.Calling_isdn.substring(0, 2).compareTo("14") == 0) {
					EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(2);
				}
				if (EricssonCDR.Calling_isdn.endsWith("f")) {
					EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(0,
							EricssonCDR.Calling_isdn.length() - 1);
				}
			}

			if (EricssonCDR.Called_isdn.length() > 4) {
				if (EricssonCDR.RecordType.compareTo("SMS") == 0) {
					EricssonCDR.Duration = 0;
					if ((EricssonCDR.Service_center.length() > 0)
							&& (EricssonCDR.Service_center.substring(0, 4).compareTo("1184") != 0)) {
						EricssonCDR.Called_isdn = EricssonCDR.Service_center.substring(0, 2)
								+ EricssonCDR.Called_isdn.substring(2);
					}
					if (EricssonCDR.Called_isdn.endsWith("f")) {
						EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(0,
								EricssonCDR.Called_isdn.length() - 1);
					}
					if ((!Global.isNumeric(EricssonCDR.Called_isdn)) || (EricssonCDR.Called_isdn.length() < 4)) {
						EricssonCDR.Called_isdn = EricssonCDR.Service_center;
					}
				}
				if (EricssonCDR.tariff_class.compareTo("02") == 0) {
					if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("01") == 0) {
						EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
						if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(2);
						}
					} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("02") == 0) {
						EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
					} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("12") == 0) {
						EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
					} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("13") == 0) {
						EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
					} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("14") == 0) {
						EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
						if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0) {
							EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(4);
						} else if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0000") == 0) {
							EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(4);
						} else if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
							EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(3);
						}
					} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("11") == 0) {
						if (EricssonCDR.Called_isdn.substring(2, 4).compareTo("84") == 0) {
							EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(4);
						} else if (EricssonCDR.Called_isdn.substring(2, 4).compareTo("00") != 0) {
							EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
							if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0000") == 0) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(4);
							} else if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(3);
							}
						} else if (EricssonCDR.CallType.compareTo("IC") == 0) {
							EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
							if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0000") == 0) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(4);
							} else if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(3);
							}
						} else {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
						}
					}
				} else {
					if (EricssonCDR.Called_isdn.length() > 2) {
						if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("01") == 0) {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
							if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
								EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(2);
							}
						} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("02") == 0) {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
						} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("12") == 0) {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
							if ((EricssonCDR.Called_isdn.length() > 4)
									&& (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0)) {
								EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(4);
							} else {
								if (EricssonCDR.Called_isdn.endsWith("f")) {
									EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(0,
											EricssonCDR.Called_isdn.length() - 1);
								}
								/*
								 * if (EricssonCDR.Called_isdn.length() != 7) {
								 * // Xu ly cac dau so 84xx if
								 * (EricssonCDR.Called_isdn.length()==4){ }else
								 * { if (EricssonCDR.Called_isdn.substring(0, 2)
								 * .compareTo("84") == 0) {
								 * EricssonCDR.Called_isdn = "0" +
								 * EricssonCDR.Called_isdn .substring(2); } } }
								 */
							}
						} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("13") == 0) {
							// if(EricssonCDR.CallType.compareTo("TS") == 0)
							// {
							// //System.out.println("Called: " +
							// EricssonCDR.Called_isdn);
							// }

							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);

							/*
							 * if ((EricssonCDR.Called_isdn.length() > 4) &&
							 * (EricssonCDR.Called_isdn.substring(0, 4).
							 * compareTo("0084") == 0)) {
							 * EricssonCDR.Called_isdn = "0" +
							 * EricssonCDR.Called_isdn.substring(4); }
							 */
						} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("14") == 0) {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
							if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(3);
							} else if ((EricssonCDR.Called_isdn.length() > 3)
									&& (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0084") != 0)
									&& (EricssonCDR.Called_isdn.substring(0, 1).compareTo("0") != 0)) {
								EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn;
							}
						} else if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("11") == 0) {
							if (EricssonCDR.Called_isdn.length() > 9) {
								EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
								if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0) {
									EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(4);
								} else if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
									if (EricssonCDR.CallType.compareTo("IC") == 0
											|| EricssonCDR.CallType.compareTo("RM") == 0) {
										EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
									} else {
										EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(3);
									}
								}
							} else {
								EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
							}
						} else {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
						}
					}
				}
			} else {
				if ((EricssonCDR.Called_isdn.length() > 0) && (EricssonCDR.RecordType.compareTo("SMS") == 0)) {
					EricssonCDR.Called_isdn = EricssonCDR.Service_center;
					if (EricssonCDR.Called_isdn.substring(0, 2).compareTo("11") == 0) {
						if (EricssonCDR.Called_isdn.length() > 9) {
							EricssonCDR.Called_isdn = "00" + EricssonCDR.Called_isdn.substring(2);
							if (EricssonCDR.Called_isdn.substring(0, 4).compareTo("0084") == 0) {
								EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(4);
							} else if (EricssonCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								EricssonCDR.Called_isdn = "0" + EricssonCDR.Called_isdn.substring(3);
							}
						} else {
							EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(2);
						}
					}
				}
			}
			if (EricssonCDR.Calling_isdn.length() > 20) {
				EricssonCDR.Calling_isdn = EricssonCDR.Calling_isdn.substring(0, 20);
			}

			if (EricssonCDR.Called_isdn.endsWith("f")) {
				EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(0, EricssonCDR.Called_isdn.length() - 1);
			}
			if (EricssonCDR.Called_isdn.length() > 20) {
				EricssonCDR.Called_isdn = EricssonCDR.Called_isdn.substring(0, 20);
			}
			if (EricssonCDR.Service_center.length() > 0) {
				if (EricssonCDR.Service_center.substring(0, 2).compareTo("11") == 0) {
					EricssonCDR.Service_center = EricssonCDR.Service_center.substring(2);
					if (EricssonCDR.Service_center.substring(0, 2).compareTo("84") == 0) {
						EricssonCDR.Service_center = EricssonCDR.Service_center.substring(2);
					}
				}
				if (EricssonCDR.Service_center.endsWith("f")) {
					EricssonCDR.Service_center = EricssonCDR.Service_center.substring(0,
							EricssonCDR.Service_center.length() - 1);
				}
			}
			if (EricssonCDR.Calling_IMSI.endsWith("f")) {
				EricssonCDR.Calling_IMSI = EricssonCDR.Calling_IMSI.substring(0, EricssonCDR.Calling_IMSI.length() - 1);
			}
			if (EricssonCDR.Calling_IMEI.endsWith("f")) {
				EricssonCDR.Calling_IMEI = EricssonCDR.Calling_IMEI.substring(0, EricssonCDR.Calling_IMEI.length() - 1);
			}
			if (EricssonCDR.org_call_id.length() > 2) {
				if (EricssonCDR.org_call_id.endsWith("f")) {
					EricssonCDR.org_call_id = EricssonCDR.org_call_id.substring(0,
							EricssonCDR.org_call_id.length() - 1);
				}
				if (EricssonCDR.org_call_id.length() > 20) {
					EricssonCDR.org_call_id = EricssonCDR.org_call_id.substring(0, 20);
				}

				if (EricssonCDR.org_call_id.substring(0, 2).compareTo("14") == 0) {
					EricssonCDR.org_call_id = EricssonCDR.org_call_id.substring(2);
				}
			}
			
			if (EricssonCDR.originalCalledNumber.length() > 2) {
				if (EricssonCDR.originalCalledNumber.endsWith("f")) {
					EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(0,
							EricssonCDR.originalCalledNumber.length() - 1);
				}
				if (EricssonCDR.originalCalledNumber.length() > 20) {
					EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(0, 20);
				}

				if (EricssonCDR.originalCalledNumber.substring(0, 2).compareTo("14") == 0) {
					EricssonCDR.originalCalledNumber = EricssonCDR.originalCalledNumber.substring(2);
				}
			}
			if (EricssonCDR.CallingOrg.endsWith("f")) {
				EricssonCDR.CallingOrg = EricssonCDR.CallingOrg.substring(0, EricssonCDR.CallingOrg.length() - 1);
			}
			if (EricssonCDR.CalledOrg.endsWith("f")) {
				EricssonCDR.CalledOrg = EricssonCDR.CalledOrg.substring(0, EricssonCDR.CalledOrg.length() - 1);
			} 
		}

	} // End class Convert Ericsson

	class ConvertHuawei {

		protected StructHuaweiCDR HuaweiCDR = new StructHuaweiCDR();
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;
		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;
		protected int mRecordEvent = 0;
		protected int mTagSequenceLength = 0;

		public int Huawei_V212(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {

			RandomAccessFile fileCDR = null;
			TextFile fileConvert = new TextFile();
			String mSource = null;
			int mRecN = 0;
			int mFileLength = 0;
			String strTagRecord;
			IOUtils IOUtil = new IOUtils();
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mMSCHeaderCharge);
				} else {
					fileConvert.addText(Global.mMSCHeaderNoCharge);
				}

				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecAnnoun = 0;
				mRecDivert = 0;
				mRecTransit = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mTagFieldCode = "";
				mTagFieldLength = 0;
				mTagModuleCode = "";
				mTagModuleLength = 0;

				//mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					//mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "' WHERE file_id = " + pFileID;
					//Global.ExecuteSQL(mConnection, mSQL);
					//mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}

				mByteN = 0;
				while (mByteN < mFileLength) {
					mRecLength = 0;
					// Tag = Charging Data Record File
					strTagRecord = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;

					// neu khong phai =30 thong bao sai header
					if (!strTagRecord.equalsIgnoreCase("30")) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error structure cdr:" + pFileName + "' WHERE file_id = " + pFileID;
						//Global.ExecuteSQL(mConnection, mSQL);
						//mConnection.commit();
						writeLogFile("      'Error structure cdr:" + pFileName);
						return (Global.ErrFileConverted);
					}

					// length of compressRecord
					mLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mRecLength = 2;
					if (mLength > 128) {
						mRet = mLength - 128;
						mRecLength += mRet;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mLength + 2;
					}
					if (mRecLength != mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error structure cdr:" + pFileName + "' WHERE file_id = " + pFileID;
						//Global.ExecuteSQL(mConnection, mSQL);
						//mConnection.commit();
						writeLogFile("      'Error structure cdr:" + pFileName);
						return (Global.ErrFileConverted);
					}
					/**
					 * Cau truc file CDR Charging Data Record File- 1 byte
					 * TagLength- 1byte TagHeader 1- byte TagLength- 1byte Tag
					 * data -TagLength byte TagSequence 1- byte
					 * TagSequenceLength -1 byte Tag Event Record.....
					 * TagTrailer +length+data TagExtensions+length+data
					 */

					// tag header
					mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));

					mByteN++;
					mTagModuleLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// bo qua cac byte header
					mByteN += mTagModuleLength;

					// tag sequence
					mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					mLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					mRecLength = 0;
					// mByteN++;
					if (mLength > 128) {
						mRet = mLength - 128;
						// mTagModuleLength=0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mLength;
					}
					mTagSequenceLength = mByteN + mRecLength;
					while (mByteN < mTagSequenceLength) {
						HuaweiCDR.RecordType = "";
						HuaweiCDR.CallType = "";
						HuaweiCDR.Calling_isdn = "";
						HuaweiCDR.Calling_IMEI = "";
						HuaweiCDR.Calling_IMSI = "";
						HuaweiCDR.DateForStartOfCharge = "";
						HuaweiCDR.TimeForStartOfCharge = "";
						HuaweiCDR.TimeForStopOfCharge = "";
						HuaweiCDR.Duration = 0;
						HuaweiCDR.Called_isdn = "";
						HuaweiCDR.Cell_id = "";
						HuaweiCDR.ic_route = "";
						HuaweiCDR.og_route = "";
						HuaweiCDR.tariff_class = "";
						HuaweiCDR.in_mark = "";
						HuaweiCDR.charging_indicator = "";
						HuaweiCDR.org_call_id = "";
						HuaweiCDR.rec_seq_number = 0;
						HuaweiCDR.Service_center = "";
						HuaweiCDR.SwitchIdentity = "";
						HuaweiCDR.TeleServiceCode = "";
						HuaweiCDR.BearerServiceCode = "";
						HuaweiCDR.TranslatedNumber = "";
						HuaweiCDR.CallingOrg = "";
						HuaweiCDR.CalledOrg = "";
						HuaweiCDR.MsgTypeIndicator = "";
						HuaweiCDR.SystemType = "";
						HuaweiCDR.rateIndication = "";
						HuaweiCDR.FCIData = "";
						HuaweiCDR.levelOfCamel = "";
						HuaweiCDR.serviceKey = "";
						HuaweiCDR.EmlppPriorityLevel = "";
						HuaweiCDR.seizureTime = "";
						HuaweiCDR.causeForTerm = "";
						HuaweiCDR.supplServicesUsed = "";
						HuaweiCDR.camelDestinationNumber = "";
						HuaweiCDR.countryCode = "";
						HuaweiCDR.networkCode = "";
						HuaweiCDR.GSM_SCF_Address = "";
						HuaweiCDR.smsResult = "";
						HuaweiCDR.callerIP = "";
						HuaweiCDR.calledIP = "";
						HuaweiCDR.CallTypeDetail = "";
						HuaweiCDR.RMnumber = "";
						HuaweiCDR.originalCalledNumber = "";

						mRecConvert++;

						mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						// neu tag BF doc them 1 byte nua sau do den length
						if (mTagModuleCode.compareTo("bf") == 0) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}

						// length
						mLength = Global.fixSignedByte(mBuffer[mByteN]);

						mByteN++;
						mTagModuleLength = 0;
						if (mLength > 128) {
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mTagModuleLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mTagModuleLength = mLength;
						}

						mTagModuleLength = mByteN + mTagModuleLength;
						// doc den tag RecordType de xac dinh loai ban ghi

						// bo qua recordtype header
						mByteN++;
						// bo qua length
						mByteN++;

						// den Data dung de xac dinh loai ban ghi

						mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						// xu ly cac module 

						if (mTagModuleCode.compareTo("00") == 0) {
							MobileOriginatedCallAttempt();
						} else if (mTagModuleCode.compareTo("01") == 0) {
							MobileTerminatedCallAttempt();
						} else if (mTagModuleCode.compareTo("02") == 0) {
							RoamingCallAttempt();
						} else if (mTagModuleCode.compareTo("03") == 0) {
							IncomingGatewayCallAtemp();
						} else if (mTagModuleCode.compareTo("04") == 0) {
							OutgoingGatewayCallAtemp();
						} else if (mTagModuleCode.compareTo("05") == 0) {
							TransitCallAttempt();
						} else if (mTagModuleCode.compareTo("06") == 0) {
							ShortMessageServiceOriginated();
						} else if (mTagModuleCode.compareTo("07") == 0) {
							ShortMessageServiceTerminated();
						} else if (mTagModuleCode.compareTo("11") == 0) {
							TerminatingCAMELCallAttempt();
						} else if (mTagModuleCode.compareTo("64") == 0) {
							MobileOriginatedcallForwardingAttempt();
						} else {
							mByteN = mTagModuleLength;
							mRecOther++;
						}

						Analyse();
						if ((HuaweiCDR.RecordType.compareTo("CALL") == 0)
								|| (HuaweiCDR.RecordType.compareTo("SMS") == 0)) {
							if (cdrfileParam.ChargeCDRFile) {
								appendValue(HuaweiCDR.RecordType);
								appendValue(HuaweiCDR.CallType);
								appendValue(HuaweiCDR.Calling_isdn);
								appendValue(HuaweiCDR.Calling_IMSI); // Calling_imsi
								appendValue(HuaweiCDR.DateForStartOfCharge + HuaweiCDR.TimeForStartOfCharge);
								appendValue(String.valueOf(HuaweiCDR.Duration));
								appendValue(HuaweiCDR.TimeForStopOfCharge);
								appendValue(HuaweiCDR.Called_isdn);
								appendValue(HuaweiCDR.Cell_id); // CELL_ID
								appendValue(HuaweiCDR.Service_center);
								appendValue(HuaweiCDR.ic_route); // IC_ROUTE
								appendValue(HuaweiCDR.og_route); // OG_ROUTE
								appendValue(HuaweiCDR.tariff_class); // tariff
																		// class
								appendValue(HuaweiCDR.TeleServiceCode);
								appendValue(HuaweiCDR.BearerServiceCode);
								appendValue(HuaweiCDR.in_mark);
								appendValue(HuaweiCDR.charging_indicator); // cha_indicator
								appendValue(HuaweiCDR.org_call_id);
								appendValue(HuaweiCDR.TranslatedNumber);
								appendValue(String.valueOf(HuaweiCDR.rec_seq_number));
								appendValue(HuaweiCDR.Calling_IMEI);
								appendValue(HuaweiCDR.CallingOrg);
								appendValue(HuaweiCDR.CalledOrg);
								appendValue(HuaweiCDR.MsgTypeIndicator);
								// appendValue(HuaweiCDR.EmlppPriorityLevel);

								fileConvert.addText(mStrValues);
								mStrValues = "";
								try {
									// Pha 7 - get last calling time
									String dateCharge = HuaweiCDR.TimeForStartOfCharge.substring(6, 8) + "/"
											+ HuaweiCDR.TimeForStartOfCharge.substring(4, 6) + "/"
											+ HuaweiCDR.TimeForStartOfCharge.substring(0, 4) + " "
											+ HuaweiCDR.TimeForStartOfCharge.substring(8, 10) + ":"
											+ HuaweiCDR.TimeForStartOfCharge.substring(10, 12) + ":"
											+ HuaweiCDR.TimeForStartOfCharge.substring(12);
									if (lastCallingTime.equals("")) {
										lastCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, lastCallingTime) == 1) {
										lastCallingTime = dateCharge;
									}
									// get first calling time.(18/02/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, firstCallingTime) == 2) {
										firstCallingTime = dateCharge;
									}

								} catch (Exception ex) {
								}
							} else {
								// fixed bug date time.
								if (HuaweiCDR.TimeForStartOfCharge == "") {
									HuaweiCDR.TimeForStartOfCharge = "00000000000000";
								}
								if (HuaweiCDR.seizureTime == "") {
									HuaweiCDR.seizureTime = "00000000000000";
								}
								//
								mRecN++;
								mStrValues = mRecN + "|" + pCenterID + "|" + HuaweiCDR.CallType + "|" + "|" + "|" + "|"
										+ "|" + HuaweiCDR.Calling_isdn + "|" + HuaweiCDR.Calling_IMSI + "|"
										+ HuaweiCDR.TimeForStartOfCharge.substring(6, 8) + "/"
										+ HuaweiCDR.TimeForStartOfCharge.substring(4, 6) + "/"
										+ HuaweiCDR.TimeForStartOfCharge.substring(0, 4) + " "
										+ HuaweiCDR.TimeForStartOfCharge.substring(8, 10) + ":"
										+ HuaweiCDR.TimeForStartOfCharge.substring(10, 12) + ":" // chargeResult.strPO_CODE
																									// +,
																									// chargeResult.dblTaxAir
																									// +,
																									// chargeResult.dblTaxIdd
																									// +,
																									// chargeResult.dblTaxSer
																									// +
										+ HuaweiCDR.TimeForStartOfCharge.substring(12) + "|" + HuaweiCDR.Duration + "|"
										+ HuaweiCDR.TimeForStopOfCharge + "|" + HuaweiCDR.Called_isdn + "|"
										+ HuaweiCDR.countryCode + HuaweiCDR.networkCode + HuaweiCDR.Cell_id + "|"
										+ HuaweiCDR.Service_center + "|" + HuaweiCDR.ic_route.trim() + "|"
										+ HuaweiCDR.og_route.trim() + "|" + HuaweiCDR.tariff_class + "|"
										+ HuaweiCDR.TeleServiceCode + "|" + HuaweiCDR.BearerServiceCode + "|"
										+ HuaweiCDR.in_mark + "|" + HuaweiCDR.charging_indicator + "|"
										+ HuaweiCDR.org_call_id + "|" + HuaweiCDR.rec_seq_number + "|"
										+ HuaweiCDR.TranslatedNumber + "|" + HuaweiCDR.Calling_IMEI + "|"
										+ HuaweiCDR.CallingOrg + "|" + HuaweiCDR.CalledOrg + "|" + "|" + "|" + "|" + "|"
										+ "|" + "|" + HuaweiCDR.MsgTypeIndicator + "|" + HuaweiCDR.SystemType + "|"
										+ HuaweiCDR.rateIndication + "|" + HuaweiCDR.FCIData + "|" + "|"
										+ HuaweiCDR.levelOfCamel + "|" + HuaweiCDR.serviceKey + "|"
										+ HuaweiCDR.GSM_SCF_Address + "|" + "|" + HuaweiCDR.seizureTime.substring(6, 8)
										+ "/" + HuaweiCDR.seizureTime.substring(4, 6) + "/"
										+ HuaweiCDR.seizureTime.substring(0, 4) + " "
										+ HuaweiCDR.seizureTime.substring(8, 10) + ":"
										+ HuaweiCDR.seizureTime.substring(10, 12) + ":"
										+ HuaweiCDR.seizureTime.substring(12) + "|" + HuaweiCDR.EmlppPriorityLevel + "|"
										+ HuaweiCDR.causeForTerm + "|" + HuaweiCDR.supplServicesUsed + "|"
										+ HuaweiCDR.camelDestinationNumber + "|" + HuaweiCDR.smsResult + "|"
										+ HuaweiCDR.callerIP + "|" + HuaweiCDR.calledIP + "|" + HuaweiCDR.CallTypeDetail
										+ "|" + HuaweiCDR.RMnumber
										+ "|" + HuaweiCDR.originalCalledNumber
										+ "|" + convertHeadNumber(HuaweiCDR.Calling_isdn) 
										+ "|" + convertHeadNumber(HuaweiCDR.Called_isdn);
									

								fileConvert.addText(mStrValues);
								mStrValues = "";
								try {
									// Pha 7 - get last calling time
									String dateCharge = HuaweiCDR.TimeForStartOfCharge.substring(6, 8) + "/"
											+ HuaweiCDR.TimeForStartOfCharge.substring(4, 6) + "/"
											+ HuaweiCDR.TimeForStartOfCharge.substring(0, 4) + " "
											+ HuaweiCDR.TimeForStartOfCharge.substring(8, 10) + ":"
											+ HuaweiCDR.TimeForStartOfCharge.substring(10, 12) + ":"
											+ HuaweiCDR.TimeForStartOfCharge.substring(12);
									if (lastCallingTime.equals("")) {
										lastCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, lastCallingTime) == 1) {
										lastCallingTime = dateCharge;
									}
									// get first calling time.(18/02/2011)
									if (firstCallingTime.equals("")) {
										firstCallingTime = dateCharge;
									} else if (Global.compareTo(dateCharge, firstCallingTime) == 2) {
										firstCallingTime = dateCharge;
									}

								} catch (Exception ex) {
								}
							}
						}
					}

					// Tag = Trailer
					mTagModuleCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					// //System.out.println("Module Code Trailer=" +
					// mTagModuleCode);
					mByteN++;
					mTagModuleLength = Global.fixSignedByte(mBuffer[mByteN]);
					// //System.out.println("Module Length Trailer=" +
					// mTagModuleLength);
					mByteN++;
					mByteN += mTagModuleLength;

					// Tag extensions
					mByteN++;
					mByteN++;

					// }

				} // end of while

				writeLogFile("         - Transit           : " + Global.rpad(Integer.toString(mRecTransit), 6, " "));
				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - Annoucement       : " + Global.rpad(Integer.toString(mRecAnnoun), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime
							+ "' WHERE file_id = " + pFileID;
				}
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();
			} catch (FileNotFoundException e) {
				// e.printStackTrace();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				 ex.printStackTrace();
				//mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert Huawei : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mBuffer = new byte[0];
					mSQL = null;
					mTagModuleCode = null;
					mValue = null;
					mSource = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		/**
		 * OutgoingGatewayCallAtemp
		 */
		private void OutgoingGatewayCallAtemp() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "TS";
			HuaweiCDR.CallTypeDetail = "TSO";

			mRecTransit++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if (mTagFieldCode.compareTo("81") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("82") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("A4") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A5") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				}
				// seizureTime
				else if (mTagFieldCode.compareTo("86") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("87") == 0) { // answerTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("88") == 0) { // releaseTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("89") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}

				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("8B") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8E") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8179") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ----------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i < mTagFieldLength; i++) {
								mByteN++;
							}
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;

						} else if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		/**
		 * IncomingGatewayCallAtemp
		 */
		private void IncomingGatewayCallAtemp() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "TS";
			HuaweiCDR.CallTypeDetail = "TSI";

			mRecTransit++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if (mTagFieldCode.compareTo("81") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("82") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("A4") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A5") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				}
				// seizureTime
				else if (mTagFieldCode.compareTo("86") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("87") == 0) { // answerTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("88") == 0) { // releaseTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("89") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}

				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("8B") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8E") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8179") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ----------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i < mTagFieldLength; i++) {
								mByteN++;
							}
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;

						} else if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		private void MobileOriginatedCallAttempt() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "OG";
			HuaweiCDR.CallTypeDetail = "MOC";

			mRecOG++;

			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) { // Calling_IMEI
																	// Number
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("84") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("86") == 0) { // translatedNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AA") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AB") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AC") == 0) { // Location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				} else if (mTagFieldCode.compareTo("AE") == 0) { // basicService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mByteN += mTagFieldLength - 1;
					HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
				} else if (mTagFieldCode.compareTo("B1") == 0) { // supplServicesCode.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (i == 5) {
							HuaweiCDR.supplServicesUsed = Global.Dec2Hex(Global.fixSignedByte(mBuffer[mByteN]));
						}
						mByteN++;
					}
				}

				// seizureTime
				else if (mTagFieldCode.compareTo("96") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.seizureTime = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("97") == 0) { // answerTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("98") == 0) { // releaseTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("99") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("9E") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F21") == 0) { // sequenceNumber
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F24") == 0) { // levelOfCamelService
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.GSM_SCF_Address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					// 4-10
					else if (mTagFieldCode.compareTo("9F25") == 0) { // service
																		// Key.
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						String strVal = "";
						for (int i = 1; i <= mTagFieldLength; i++) {
							// HuaweiCDR.serviceKey +=
							// Integer.parseInt(Global.Dec2Hex(mBuffer[mByteN]),16);
							strVal += Global.Dec2Hex(mBuffer[mByteN]);
							mByteN++;
						}
						HuaweiCDR.serviceKey = Integer.parseInt(strVal, 16) + "";
					}
					// 4-10
					else if (mTagFieldCode.compareTo("9F34") == 0) { // levelOfCamelService
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.levelOfCamel += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					else if (mTagFieldCode.compareTo("9F35") == 0) { // FCIData
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.FCIData += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					else if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F8159") == 0) { // Tariff
																		// class
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.tariff_class += "" + (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F814f") == 0) { // camelDestinationNumber.
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.camelDestinationNumber += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;

							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}
						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} 
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}
						
						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ---------------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0 || mTagFieldCode.compareTo("9F3E") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) { //
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if ((mTagFieldCode.compareTo("BF813D") == 0)) {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					} else if (mTagFieldCode.compareTo("BF22") == 0) { // chargeIndicator
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.charging_indicator += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("BF36") == 0) { // cAMELCallLegInformation
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;

						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
					else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if ((mTagFieldCode.compareTo("AD") == 0) || (mTagFieldCode.compareTo("B0") == 0)
						|| (mTagFieldCode.compareTo("B1") == 0) || (mTagFieldCode.compareTo("B3") == 0)) // AD-changeOfLocation,B0-changeOfService,B1-supplServicesUsed,B3-changeOfAOCParms
				{
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}
		}

		private void MobileOriginatedcallForwardingAttempt() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "DV";
			HuaweiCDR.CallTypeDetail = "MFWD";

			mRecOG++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) { // Calling_IMEI
																	// Number
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("83") == 0) { // servedISDN
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg += HuaweiCDR.Calling_isdn;
				}
				// Modified by Nguyen Tien Khai - 25-12-2012
				/*
				 * else if (mTagFieldCode.compareTo("83") == 0) { //servedISDN
				 * mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
				 * mByteN++; for (int i = 1; i <= mTagFieldLength; i++) {
				 * HuaweiCDR.org_call_id +=
				 * Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
				 * mByteN++; } }
				 */
				// --Added by Nguyen Tien Khai, 25-12-2012
				else if (mTagFieldCode.compareTo("84") == 0) { // org_call_id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.org_call_id += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}
				// -- End added--

				else if (mTagFieldCode.compareTo("85") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;

				} else if (mTagFieldCode.compareTo("86") == 0) { // translatedNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AA") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AB") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AC") == 0) { // location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				} else if (mTagFieldCode.compareTo("AE") == 0) { // basicService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					mByteN += mTagFieldLength - 1;
					HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
				} else if (mTagFieldCode.compareTo("B1") == 0) { // supplServicesCode.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (i == 5) {
							HuaweiCDR.supplServicesUsed = Global.Dec2Hex(Global.fixSignedByte(mBuffer[mByteN]));
						}
						mByteN++;
					}
				}

				// seizureTime
				else if (mTagFieldCode.compareTo("96") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("97") == 0) { // answerTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("98") == 0) { // releaseTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("99") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("9E") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F21") == 0) { // sequenceNumber
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F24") == 0) { // levelOfCamelService
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.GSM_SCF_Address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					// 4-10
					else if (mTagFieldCode.compareTo("9F25") == 0) { // service
																		// Key.
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						String strVal = "";
						for (int i = 1; i <= mTagFieldLength; i++) {
							// HuaweiCDR.serviceKey +=
							// Integer.parseInt(Global.Dec2Hex(mBuffer[mByteN]),16);
							strVal += Global.Dec2Hex(mBuffer[mByteN]);
							mByteN++;
						}
						HuaweiCDR.serviceKey = Integer.parseInt(strVal, 16) + "";

					}
					// 4-10
					else if (mTagFieldCode.compareTo("9F34") == 0) { // levelOfCamelService
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.levelOfCamel += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					else if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F8159") == 0) { // Tariff
																		// class
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.tariff_class += "" + (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F814f") == 0) { // camelDestinationNumber.
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.camelDestinationNumber += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}
						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}
						// else if (mTagFieldCode.compareTo("9F812b") == 0)
						// { //call emlpp priority level
						// mTagFieldLength =
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// for (int i = 1; i <= mTagFieldLength; i++)
						// {
						// HuaweiCDR.EmlppPriorityLevel +=
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// }
						// }
						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ----------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;

						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) { //
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if ((mTagFieldCode.compareTo("BF813D") == 0)) {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					} else if (mTagFieldCode.compareTo("BF22") == 0) { // chargeIndicator
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.charging_indicator += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("BF36") == 0) { // cAMELCallLegInformation
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;

						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						}
					}
					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
					else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}

				}
				// AD-changeOfLocation,B0-changeOfService,B1-supplServicesUsed,B3-changeOfAOCParms
				else if ((mTagFieldCode.compareTo("AD") == 0) || (mTagFieldCode.compareTo("B0") == 0)
						|| (mTagFieldCode.compareTo("B1") == 0) || (mTagFieldCode.compareTo("B3") == 0)) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}
		}

		private void MobileTerminatedCallAttempt() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "IC";
			HuaweiCDR.CallTypeDetail = "MTC";

			mRecIC++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) { // Calling_IMEI
																	// Number
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("83") == 0) { // servedISDN
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg += HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("84") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("A7") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A8") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A9") == 0) { // location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				} else if (mTagFieldCode.compareTo("AB") == 0) { // basicService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i < mTagFieldLength; i++) {
						mByteN++;
					}
					HuaweiCDR.BearerServiceCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;

				} else if (mTagFieldCode.compareTo("AE") == 0) { // supplServicesCode.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (i == 5) {
							HuaweiCDR.supplServicesUsed = Global.Dec2Hex(Global.fixSignedByte(mBuffer[mByteN]));
						}
						mByteN++;
					}
				}

				// seizureTime
				else if (mTagFieldCode.compareTo("93") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("94") == 0) { // answerTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("95") == 0) { // releaseTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("96") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("9B") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9E") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F2C") == 0) { // levelOfCamelService
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.GSM_SCF_Address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}

					else if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.org_call_id += "" + (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8117") == 0) { // FCIData
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.FCIData = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						// 4-10
						else if (mTagFieldCode.compareTo("9F811A") == 0) { // levelOfCamelService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.levelOfCamel += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						else if (mTagFieldCode.compareTo("9F8159") == 0) { // Tariff
																			// class
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.tariff_class += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						}
						// else if (mTagFieldCode.compareTo("9F812b") == 0)
						// { //call emlpp priority level
						// mTagFieldLength =
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// for (int i = 1; i <= mTagFieldLength; i++)
						// {
						// HuaweiCDR.EmlppPriorityLevel +=
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// }
						// }
						else if (mTagFieldCode.compareTo("9F814D") == 0) { // calledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;

							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
						} else if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ---------------------------------

					// 4-10
					else if (mTagFieldCode.compareTo("9F2d") == 0) { // service
																		// Key.
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						String strVal = "";
						for (int i = 1; i <= mTagFieldLength; i++) {
							// HuaweiCDR.serviceKey +=
							// Integer.parseInt(Global.Dec2Hex(mBuffer[mByteN]),16);
							strVal += Global.Dec2Hex(mBuffer[mByteN]);
							mByteN++;
						}
						HuaweiCDR.serviceKey = Integer.parseInt(strVal, 16) + "";

					}

					else if (mTagFieldCode.compareTo("9F2e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F2f") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}

					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) { //
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if ((mTagFieldCode.compareTo("BF813D") == 0)) {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					} else if (mTagFieldCode.compareTo("BF1F") == 0) { // chargeIndicator
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {
							HuaweiCDR.charging_indicator += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
					}
					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
					else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				}
				// AA-changeOfLocation,AD-changeOfLocation,AE-supplServicesUsed,B0-changeOfService
				else if ((mTagFieldCode.compareTo("AD") == 0) || (mTagFieldCode.compareTo("B0") == 0)
						|| (mTagFieldCode.compareTo("AA") == 0) || (mTagFieldCode.compareTo("AE") == 0)) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}
		}

		private void RoamingCallAttempt() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "RM";
			HuaweiCDR.CallTypeDetail = "RCA";

			mRecIC++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) { // servedISDN
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg += HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("83") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				}

				else if (mTagFieldCode.compareTo("A6") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A7") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A8") == 0) { // basicService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i < mTagFieldLength; i++) {
						mByteN++;
					}
					HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
				} else if (mTagFieldCode.compareTo("AB") == 0) { // supplServicesCode.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						if (i == 5) {
							HuaweiCDR.supplServicesUsed = Global.Dec2Hex(Global.fixSignedByte(mBuffer[mByteN]));
						}
						mByteN++;
					}
				}

				// seizureTime
				else if (mTagFieldCode.compareTo("8C") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("8D") == 0) { // answerTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("8E") == 0) { // releaseTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("8F") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("91") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("94") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number += Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8158") == 0) { // levelOfCamelService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.GSM_SCF_Address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						// 4-10
						else if (mTagFieldCode.compareTo("9F8159") == 0) { // service
																			// Key.
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							String strVal = "";
							for (int i = 1; i <= mTagFieldLength; i++) {
								// HuaweiCDR.serviceKey +=
								// Integer.parseInt(Global.Dec2Hex(mBuffer[mByteN]),16);
								strVal += Global.Dec2Hex(mBuffer[mByteN]);
								mByteN++;
							}
							HuaweiCDR.serviceKey = Integer.parseInt(strVal, 16) + "";

						}
						// 4-10
						else if (mTagFieldCode.compareTo("9F815A") == 0) { // levelOfCamelService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.levelOfCamel += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						else if (mTagFieldCode.toUpperCase().compareTo("9F812C") == 0) { // FCI
																							// data
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.FCIData += "" + (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																			// emlpp
																			// priority
																			// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						}
						// else if (mTagFieldCode.compareTo("9F812b") == 0)
						// { //call emlpp priority level
						// mTagFieldLength =
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// for (int i = 1; i <= mTagFieldLength; i++)
						// {
						// HuaweiCDR.EmlppPriorityLevel +=
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// }
						// }
						else if (mTagFieldCode.compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.org_call_id += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}

					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}

					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) { //
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
					else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				}
				// AA-changeOfService ,AB-supplServicesUsed
				else if ((mTagFieldCode.compareTo("AA") == 0) || (mTagFieldCode.compareTo("AB") == 0)) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		private void TransitCallAttempt() { 
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "TS";
			HuaweiCDR.CallTypeDetail = "TSC";

			mRecTransit++; 

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				 
				mByteN++;
				if (mTagFieldCode.compareTo("84") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;

					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("A2") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("A3") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				}
				// seizureTime
				else if (mTagFieldCode.compareTo("87") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("88") == 0) { // answerTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("89") == 0) { // releaseTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("8A") == 0) { // Chargeable
																	// Duration
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}

				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("8C") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8F") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F812a") == 0) { // call
																				// emlpp
																				// priority
																				// level
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.EmlppPriorityLevel += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						// else if (mTagFieldCode.compareTo("9F812b") == 0)
						// { //call emlpp priority level
						// mTagFieldLength =
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// for (int i = 1; i <= mTagFieldLength; i++)
						// {
						// HuaweiCDR.EmlppPriorityLevel +=
						// Global.fixSignedByte(mBuffer[mByteN]);
						// mByteN++;
						// }
						// }
						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ----------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i < mTagFieldLength; i++) {
								mByteN++;
							}
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;

						} else if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}
					// 1
					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		private void ShortMessageServiceOriginated() {
			HuaweiCDR.RecordType = "SMS";
			HuaweiCDR.CallType = "SMO";
			HuaweiCDR.CallTypeDetail = "SMO";

			mRecSMO++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("82") == 0) { // Calling_IMEI
																	// Number
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("83") == 0) { // servedISDN
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg += HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("85") == 0) { // serviceCentre
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Service_center += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("8C") == 0) { // calledNumber//destinationNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
				} else if (mTagFieldCode.compareTo("89") == 0) { // answerTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;
				} else if (mTagFieldCode.compareTo("A7") == 0) { // Location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) { // sequenceNumber
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F8147") == 0) { // sequenceNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F814A") == 0) { // Tariff
																				// class
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.tariff_class += "" + (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					} else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;

						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i < mTagFieldLength; i++) {
								mByteN++;
							}
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						} else if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
				}
				// datnh 2014.04.03
				// datnh 2016.01.11 update
				else if (mTagFieldCode.compareTo("AA") == 0) { // smsResult.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						// HuaweiCDR.smsResult +=
						// Global.fixSignedByte(mBuffer[mByteN]);

						HuaweiCDR.smsResult += Global.HexToBCD(mBuffer[mByteN]);
						mByteN++;
					}
				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		private void ShortMessageServiceTerminated() {
			HuaweiCDR.RecordType = "SMS";
			HuaweiCDR.CallType = "SMT";
			HuaweiCDR.CallTypeDetail = "SMT";

			mRecSMT++;

			while (mByteN < mTagModuleLength) {
				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));

				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;

				if (mTagFieldCode.compareTo("81") == 0) { // serviceCentre
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Service_center += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if ((mTagFieldCode.compareTo("82") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("83") == 0) { // Calling_IMEI
																	// Number
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("84") == 0) { // servedISDN
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg += HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("88") == 0) { // answerTime

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("A7") == 0) { // Location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F8147") == 0) { // sequenceNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8149") == 0) { // Called
																				// ISDN
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;
						} else if (mTagFieldCode.compareTo("9F814B") == 0) { // Tariff
																				// class
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.tariff_class += (Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					} else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;

						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}

					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							mByteN += mTagFieldLength - 1;
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						} else if (mTagFieldCode.compareTo("BF8105") == 0) { // ChargeIndicator
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.charging_indicator += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08
				}
				// datnh 2016.01.11 update
				else if (mTagFieldCode.compareTo("A9") == 0) { // smsResult.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.smsResult += Global.HexToBCD(mBuffer[mByteN]);
						mByteN++;
					}
				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}

		}

		private void TerminatingCAMELCallAttempt() {
			HuaweiCDR.RecordType = "CALL";
			HuaweiCDR.CallType = "CMI";
			HuaweiCDR.CallTypeDetail = "TCA";

			mRecIC++;

			while (mByteN < mTagModuleLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
				mTagFieldCode = mTagFieldCode.toUpperCase();
				mByteN++;
				if ((mTagFieldCode.compareTo("81") == 0)) { // Calling_IMSI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_IMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("86") == 0) { // levelOfCamelService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.GSM_SCF_Address += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				// 4-10
				else if (mTagFieldCode.compareTo("87") == 0) { // service Key.
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					String strVal = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						// HuaweiCDR.serviceKey +=
						// Integer.parseInt(Global.Dec2Hex(mBuffer[mByteN]),16);
						strVal += Global.Dec2Hex(mBuffer[mByteN]);
						mByteN++;
					}
					HuaweiCDR.serviceKey = Integer.parseInt(strVal, 16) + "";

				}

				else if (mTagFieldCode.compareTo("8D") == 0) { // callingNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Calling_isdn += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CallingOrg = HuaweiCDR.Calling_isdn;
				} else if (mTagFieldCode.compareTo("8C") == 0) { // calledNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Called_isdn += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					HuaweiCDR.CalledOrg = HuaweiCDR.Called_isdn;

				} else if (mTagFieldCode.compareTo("AE") == 0) { // ic_route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.ic_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AF") == 0) { // Outgoing
																	// Route
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.og_route += (char) (mBuffer[mByteN]);
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("AC") == 0) { // location
																	// /cell-id
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mTagFieldCode = mTagFieldCode.toUpperCase();
						mByteN++;
						i++;
						if ((mTagFieldCode.compareTo("80") == 0)) { // LAC
							mRet = 0;
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet + "-";
						} else if ((mTagFieldCode.compareTo("81") == 0)) { // CELL
																			// ID
							mLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							i++;
							mRet = 0;
							for (int j = 1; j <= mLength; j++) {
								mRet += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mLength - j));
								mByteN++;
								i++;
							}
							HuaweiCDR.Cell_id += mRet;
						}
					}
				}
				// seizureTime
				else if (mTagFieldCode.compareTo("90") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.seizureTime += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.compareTo("91") == 0) { // answerTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					// nam-thangngaygiophutgiay
					HuaweiCDR.TimeForStartOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStartOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("92") == 0) { // releaseTime
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					HuaweiCDR.TimeForStopOfCharge = "20";
					for (int i = 1; i <= 6; i++) {
						HuaweiCDR.TimeForStopOfCharge += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
					// bo qua 3 byte cuoi
					mByteN++;
					mByteN++;
					mByteN++;

				} else if (mTagFieldCode.compareTo("93") == 0) { // Chargeable
																	// Duration

					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					mValue = "";
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.Duration += Global.fixSignedByte(mBuffer[mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}

				}
				// causeForTerm
				else if (mTagFieldCode.compareTo("95") == 0) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.causeForTerm = Global.fixSignedByte(mBuffer[mByteN]) + "";
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("98") == 0) { // sequenceNumber
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.rec_seq_number = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
					}
				}
				// 4-10
				else if (mTagFieldCode.compareTo("9A") == 0) { // levelOfCamelService
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.levelOfCamel += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				}

				else if (mTagFieldCode.toUpperCase().compareTo("9B") == 0) { // FCI
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					for (int i = 1; i <= mTagFieldLength; i++) {
						HuaweiCDR.FCIData += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if (mTagFieldCode.compareTo("9F") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("9F81") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;

						if (mTagFieldCode.compareTo("9F8175") == 0) { // translatedNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.TranslatedNumber += Global
										.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F814f") == 0) { // camelDestinationNumber.
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.camelDestinationNumber += Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
							}
						} else if (mTagFieldCode.compareTo("9F8140") == 0) { // firstmccmnc
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								if (i >= 1 && i <= 2) {
									HuaweiCDR.countryCode += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								} else {
									HuaweiCDR.networkCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]))
											.toString();
								}
								if (HuaweiCDR.countryCode.endsWith("f")) {
									HuaweiCDR.countryCode = HuaweiCDR.countryCode.substring(0,
											HuaweiCDR.countryCode.length() - 1);
								}
								mByteN++;
							}
						}

						// datnh, 20150729
						else if (mTagFieldCode.compareTo("9F8120") == 0) { // RMnumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.RMnumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
						}
						
						// anhnt, 20170318
						else if (mTagFieldCode.toUpperCase().compareTo("9F810E") == 0) { // originalCalledNumber
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								HuaweiCDR.originalCalledNumber += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}
							
							if (HuaweiCDR.originalCalledNumber.endsWith("f")) {
								HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(0,
										HuaweiCDR.originalCalledNumber.length() - 1);
							}
						}

						else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}

					}
					// -----Added 23-Oct-2012 - Nguyen Tien Khai---------
					else if (mTagFieldCode.compareTo("9F82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}
					// ----------------------------
					else if (mTagFieldCode.compareTo("9F3d") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.SystemType += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}

					} else if (mTagFieldCode.compareTo("9F3e") == 0) {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						for (int i = 1; i <= mTagFieldLength; i++) {

							HuaweiCDR.rateIndication += Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
						}
					} else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}

				} else if (mTagFieldCode.compareTo("BF") == 0) {
					mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
					mByteN++;
					if (mTagFieldCode.compareTo("BF81") == 0) { //
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if ((mTagFieldCode.compareTo("BF8105") == 0)) {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							for (int i = 1; i <= mTagFieldLength; i++) {
								// HuaweiCDR.charging_indicator +=
								// Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
							}

						} else if (mTagFieldCode.compareTo("BF8102") == 0) { // basicService
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							mByteN += mTagFieldLength - 1;
							HuaweiCDR.TeleServiceCode = Global.HexToTBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;

						} else {
							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}
							mByteN += mRecLength;

						}
					}

					// datnh 2014.10.08
					else if (mTagFieldCode.compareTo("BF82") == 0) {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
						if (mTagFieldCode.compareTo("BF8223") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;

								switch (miTagID) {
								case 0:// originatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.callerIP.length() > 0)
											HuaweiCDR.callerIP += ".";

										HuaweiCDR.callerIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}

						else if (mTagFieldCode.compareTo("BF8224") == 0) { // callerIPInformation

							mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
							mByteN++;
							if (mTagFieldLength > 128) {
								mRet = mTagFieldLength - 128;
								mRecLength = 0;
								for (int i = 1; i <= mRet; i++) {
									mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
									mByteN++;
								}
							} else {
								mRecLength = mTagFieldLength;
							}

							// tag block
							int byteN = 0;
							int bt;
							// int tagClass;
							// byte constructed;
							int miTagID;

							while (byteN < mRecLength) {

								bt = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								// tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								// constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								byteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}

								// length
								int lngth = Global.fixSignedByte(mBuffer[mByteN + byteN]);
								byteN++;
								switch (miTagID) {
								case 1: // terminatingIPAddress
									for (int i = 1; i <= lngth; i++) {
										if (HuaweiCDR.calledIP.length() > 0)
											HuaweiCDR.calledIP += ".";

										HuaweiCDR.calledIP += Global.fixSignedByte(mBuffer[mByteN + byteN]);
										byteN++;
									}
									break;
								default:
									byteN += lngth;
									break;
								}
							}

							mByteN += byteN;
						}
					}
					// datnh 2014.10.08

					else {
						mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						if (mTagFieldLength > 128) {
							mRet = mTagFieldLength - 128;
							mRecLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
								mByteN++;
							}
						} else {
							mRecLength = mTagFieldLength;
						}
						mByteN += mRecLength;

					}

				}
				// BC-cAMELCallLegInformation
				else if ((mTagFieldCode.compareTo("BC") == 0)) {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				} else {
					mTagFieldLength = Global.fixSignedByte(mBuffer[mByteN]);
					mByteN++;
					if (mTagFieldLength > 128) {
						mRet = mTagFieldLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
					} else {
						mRecLength = mTagFieldLength;
					}
					mByteN += mRecLength;

				}
			}
		}

		private void Analyse() {
			// xu ly ton 11 va 19 GSM_SCF_Address
			if (HuaweiCDR.GSM_SCF_Address.endsWith("f")) {
				HuaweiCDR.GSM_SCF_Address = HuaweiCDR.GSM_SCF_Address.substring(0,
						HuaweiCDR.GSM_SCF_Address.length() - 1);
			}
			if (HuaweiCDR.GSM_SCF_Address.length() > 0) {
				if (HuaweiCDR.GSM_SCF_Address.substring(0, 2).compareTo("19") == 0
						|| HuaweiCDR.GSM_SCF_Address.substring(0, 2).compareTo("11") == 0) {
					HuaweiCDR.GSM_SCF_Address = HuaweiCDR.GSM_SCF_Address.substring(2);
				}
			}

			if (HuaweiCDR.countryCode != "") {
				HuaweiCDR.countryCode = HuaweiCDR.countryCode + "-";
			}
			if (HuaweiCDR.networkCode != "") {
				HuaweiCDR.networkCode = HuaweiCDR.networkCode + "-";
			}
			if (HuaweiCDR.Calling_isdn.length() > 0) {
				if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("19") == 0) {
					HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
					if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("84") == 0) {
						HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
					} else {
						if (HuaweiCDR.CallType.compareTo("TS") == 0) {
							HuaweiCDR.Calling_isdn = "00" + HuaweiCDR.Calling_isdn;
						}
					}
				}
				// Modify 24/8
				else if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("18") == 0) {
					if (HuaweiCDR.CallType.compareTo("TS") == 0) {
						HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
					}
				} else if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("1a") == 0) {
					HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
				} else if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("1b") == 0) {
					HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
				} else if (HuaweiCDR.Calling_isdn.substring(0, 2).compareTo("1c") == 0) {
					HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(2);
				}

				if (HuaweiCDR.Calling_isdn.endsWith("f")) {
					HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(0, HuaweiCDR.Calling_isdn.length() - 1);
				}
			}
			// Added by Nguyen Tien Khai - handle tone - org_call_id --Date:
			// 21-11-2012
			if (HuaweiCDR.org_call_id.length() > 4 && HuaweiCDR.CallType.compareTo("DV") == 0) {
				/*
				 * if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("19") ==
				 * 0) { HuaweiCDR.org_call_id =
				 * HuaweiCDR.org_call_id.substring(2); if
				 * (HuaweiCDR.org_call_id.substring(0, 2).compareTo("84") == 0)
				 * { HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				 * }
				 * 
				 * } else if (HuaweiCDR.org_call_id.substring(0,
				 * 2).compareTo("1a") == 0) { HuaweiCDR.org_call_id =
				 * HuaweiCDR.org_call_id.substring(2); } else if
				 * (HuaweiCDR.org_call_id.substring(0, 2).compareTo("1b") == 0)
				 * { HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				 * } else if (HuaweiCDR.org_call_id.substring(0,
				 * 2).compareTo("1c") == 0) { HuaweiCDR.org_call_id =
				 * HuaweiCDR.org_call_id.substring(2); }
				 * 
				 * if (HuaweiCDR.org_call_id.endsWith("f")) {
				 * HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(0,
				 * HuaweiCDR.org_call_id.length() - 1); }
				 */
				if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("19") == 0) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
					if (HuaweiCDR.org_call_id.length() > 8) {
						if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("84") == 0) {
							HuaweiCDR.org_call_id = "0" + HuaweiCDR.org_call_id.substring(2);
						} else {
							HuaweiCDR.org_call_id = "00" + HuaweiCDR.org_call_id;
							if (HuaweiCDR.org_call_id.substring(0, 4).compareTo("0000") == 0) {
								HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
							} else if (HuaweiCDR.org_call_id.substring(0, 3).compareTo("000") == 0) {
								HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
							}
						}
					} else if (HuaweiCDR.org_call_id.length() > 4) {
						// Xu ly ban ghi 190080xx
						if (HuaweiCDR.RecordType.compareTo("SMS") == 0) {
							if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("00") != 0) {
								HuaweiCDR.org_call_id = "0" + HuaweiCDR.org_call_id;
							}
						} else {
							HuaweiCDR.org_call_id = "00" + HuaweiCDR.org_call_id;
						}
					} else {
						HuaweiCDR.org_call_id = HuaweiCDR.org_call_id;
					}
				} else if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("18") == 0) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				} else if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("14") == 0) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				} else if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("1a") == 0) {
					HuaweiCDR.org_call_id = "0" + HuaweiCDR.org_call_id.substring(2);
					if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("00") == 0) {
						HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(1);
					}
				} else if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("1b") == 0) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				} else if (HuaweiCDR.org_call_id.substring(0, 2).compareTo("1c") == 0) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(2);
				}
				if (HuaweiCDR.org_call_id.endsWith("f")) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(0, HuaweiCDR.org_call_id.length() - 1);
				}
				if (HuaweiCDR.org_call_id.length() > 20) {
					HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(0, 20);
				}
			}
			if (HuaweiCDR.Called_isdn.length() > 4) {
				if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("19") == 0) {
					HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
					if (HuaweiCDR.Called_isdn.length() > 8) {
						if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("84") == 0) {
							HuaweiCDR.Called_isdn = "0" + HuaweiCDR.Called_isdn.substring(2);
						} else {
							HuaweiCDR.Called_isdn = "00" + HuaweiCDR.Called_isdn;
							if (HuaweiCDR.Called_isdn.substring(0, 4).compareTo("0000") == 0) {
								HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
							} else if (HuaweiCDR.Called_isdn.substring(0, 3).compareTo("000") == 0) {
								HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
							}
						}
					} else if (HuaweiCDR.Called_isdn.length() > 4) {
						// Xu ly ban ghi 190080xx
						if (HuaweiCDR.RecordType.compareTo("SMS") == 0) {
							if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("00") != 0) {
								HuaweiCDR.Called_isdn = "0" + HuaweiCDR.Called_isdn;
							}
						} else {
							HuaweiCDR.Called_isdn = "00" + HuaweiCDR.Called_isdn;
						}
					} else {
						HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn;
					}
				} else if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("18") == 0) {
					HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
				} else if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("1a") == 0) {
					HuaweiCDR.Called_isdn = "0" + HuaweiCDR.Called_isdn.substring(2);
					if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("00") == 0) {
						HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(1);
					}
				} else if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("1b") == 0) {
					HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
				} else if (HuaweiCDR.Called_isdn.substring(0, 2).compareTo("1c") == 0) {
					HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
				}

				if (HuaweiCDR.RecordType.compareTo("SMS") == 0 && HuaweiCDR.Service_center.length() >= 2) {
					HuaweiCDR.Service_center = HuaweiCDR.Service_center.substring(2);
				}
			} else {
				if (HuaweiCDR.RecordType.compareTo("SMS") == 0) {
					if (HuaweiCDR.Called_isdn.length() > 0) {
						HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(2);
					} else {
						HuaweiCDR.Called_isdn = HuaweiCDR.Service_center;
					}
				}
			}
			if (HuaweiCDR.Calling_isdn.length() > 20) {
				HuaweiCDR.Calling_isdn = HuaweiCDR.Calling_isdn.substring(0, 20);
			}

			if (HuaweiCDR.Called_isdn.endsWith("f")) {
				HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(0, HuaweiCDR.Called_isdn.length() - 1);
			}
			if (HuaweiCDR.Called_isdn.length() > 20) {
				HuaweiCDR.Called_isdn = HuaweiCDR.Called_isdn.substring(0, 20);
			}
			if (HuaweiCDR.Service_center.length() > 0) {
				if (HuaweiCDR.Service_center.substring(0, 2).compareTo("11") == 0) {
					HuaweiCDR.Service_center = HuaweiCDR.Service_center.substring(2);

					// 2014.11.24, datnh, xu ly truong hop service_center.length
					// = 0
					if (HuaweiCDR.Service_center.length() >= 2
							&& HuaweiCDR.Service_center.substring(0, 2).compareTo("84") == 0) {
						HuaweiCDR.Service_center = HuaweiCDR.Service_center.substring(2);
					}

				}
				// xu ly ton =19 ngay 3/4/2012
				// 2014.11.24, datnh, xu ly truong hop service_center.length = 0
				if (HuaweiCDR.Service_center.length() >= 2
						&& HuaweiCDR.Service_center.substring(0, 2).compareTo("19") == 0) {
					HuaweiCDR.Service_center = HuaweiCDR.Service_center.substring(2);

				}

				if (HuaweiCDR.Service_center.endsWith("f")) {
					HuaweiCDR.Service_center = HuaweiCDR.Service_center.substring(0,
							HuaweiCDR.Service_center.length() - 1);
				}
			}
			if (HuaweiCDR.Calling_IMSI.endsWith("f")) {
				HuaweiCDR.Calling_IMSI = HuaweiCDR.Calling_IMSI.substring(0, HuaweiCDR.Calling_IMSI.length() - 1);
			}
			if (HuaweiCDR.Calling_IMEI.endsWith("f")) {
				HuaweiCDR.Calling_IMEI = HuaweiCDR.Calling_IMEI.substring(0, HuaweiCDR.Calling_IMEI.length() - 1);
			}
			if (HuaweiCDR.org_call_id.endsWith("f")) {
				HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(0, HuaweiCDR.org_call_id.length() - 1);
			}
			if (HuaweiCDR.org_call_id.length() > 20) {
				HuaweiCDR.org_call_id = HuaweiCDR.org_call_id.substring(0, 20);
			}
			if (HuaweiCDR.CallingOrg.endsWith("f")) {
				HuaweiCDR.CallingOrg = HuaweiCDR.CallingOrg.substring(0, HuaweiCDR.CallingOrg.length() - 1);
			}
			if (HuaweiCDR.CalledOrg.endsWith("f")) {
				HuaweiCDR.CalledOrg = HuaweiCDR.CalledOrg.substring(0, HuaweiCDR.CalledOrg.length() - 1);
			}

			if (HuaweiCDR.ic_route.length() > 3) {
				HuaweiCDR.ic_route = HuaweiCDR.ic_route.substring(2);
			}
			if (HuaweiCDR.og_route.length() > 3) {
				HuaweiCDR.og_route = HuaweiCDR.og_route.substring(2);
			}

			// datnh, 20150729
			try {
				if (HuaweiCDR.RMnumber.length() > 4) {
					if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("19") == 0) {
						HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
						if (HuaweiCDR.RMnumber.length() > 8) {
							if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("84") == 0) {
								HuaweiCDR.RMnumber = "0" + HuaweiCDR.RMnumber.substring(2);
							} else {
								HuaweiCDR.RMnumber = "00" + HuaweiCDR.RMnumber;
								if (HuaweiCDR.RMnumber.substring(0, 4).compareTo("0000") == 0) {
									HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
								} else if (HuaweiCDR.RMnumber.substring(0, 3).compareTo("000") == 0) {
									HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
								}
							}
						} else if (HuaweiCDR.RMnumber.length() > 4) {
							// Xu ly ban ghi 190080xx
							if (HuaweiCDR.RecordType.compareTo("SMS") == 0) {
								if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("00") != 0) {
									HuaweiCDR.RMnumber = "0" + HuaweiCDR.RMnumber;
								}
							} else {
								HuaweiCDR.RMnumber = "00" + HuaweiCDR.RMnumber;
							}
						} else {
							HuaweiCDR.RMnumber = HuaweiCDR.RMnumber;
						}
					} else if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("18") == 0) {
						HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
					} else if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("1a") == 0) {
						HuaweiCDR.RMnumber = "0" + HuaweiCDR.RMnumber.substring(2);
						if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("00") == 0) {
							HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(1);
						}
					} else if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("1b") == 0) {
						HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
					} else if (HuaweiCDR.RMnumber.substring(0, 2).compareTo("1c") == 0) {
						HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
					}
				} else {
					if (HuaweiCDR.RecordType.compareTo("SMS") == 0) {
						if (HuaweiCDR.RMnumber.length() > 0) {
							HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(2);
						} else {
							// HuaweiCDR.RMnumber = HuaweiCDR.Service_center;
						}
					}
				}

				if (HuaweiCDR.RMnumber.endsWith("f")) {
					HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(0, HuaweiCDR.RMnumber.length() - 1);
				}
				if (HuaweiCDR.RMnumber.length() > 20) {
					HuaweiCDR.RMnumber = HuaweiCDR.RMnumber.substring(0, 20);
				}
			} catch (Exception e) {

			}
			
			try {
				if (!HuaweiCDR.originalCalledNumber.equals("")) {
					HuaweiCDR.originalCalledNumber = HuaweiCDR.originalCalledNumber.substring(2);
				}
			} catch (Exception e) {
				
			}

			if (HuaweiCDR.smsResult.length() >= 2) {
				HuaweiCDR.smsResult = HuaweiCDR.smsResult.substring(HuaweiCDR.smsResult.length() - 2);
			}
		}
	}

	class ConvertIN {

		protected StructIN INCDR = new StructIN();
		protected int mEncapsulationLength = 0;
		protected int mFeature = 0;
		protected int mSubFeature = 0;
		protected int mType = 0;
		protected int mSubType = 0;
		protected int mStktVarParLength = 0;
		protected int mEleLength = 0;
		protected String mEleValue = "";
		protected int mRet = 0;
		protected int mEventLength = 0;
		protected String mClass = "";
		protected String mObject = "";
		protected String mStartDateTime = "";
		protected int mValueLength = 0;

		private void convertPPS331() {
			int mByteN = 0;

			while (mByteN < mRecLength) {
				mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]))
						+ Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN + 1]));
				mByteN += 2;
				if ("61ea".compareTo(mValue) == 0) { // TAG BEP-ID
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += mLength + 2;
					/*
					 * INCDR.TagBepID = ""; if (mLength > 0) { for (int k = 1; k
					 * <= mLength; k++) { INCDR.TagBepID +=
					 * Global.HexToDecimal(Global.fixSignedByte(mBuffer[
					 * mByteN])); mByteN++; } }
					 */
				} else if ("63ea".compareTo(mValue) == 0) { // Tag Calling
															// Number
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mLength > 0) {
						mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						INCDR.TagCallingNumber = "";
						mValue = "";
						for (int k = 2; k <= mLength; k++) {
							mValue += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
						INCDR.TagCallingNumber = mValue.substring(0, mValueLength);
					}
				} else if ("64ea".compareTo(mValue) == 0) { // Tag Called Number
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mLength > 0) {
						mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						INCDR.TagCalledNumber = "";
						mValue = "";
						for (int k = 2; k <= mLength; k++) {
							mValue += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
						INCDR.TagCalledNumber = mValue.substring(0, mValueLength);
					}
				} else if ("65ea".compareTo(mValue) == 0) { // Translated Number
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mLength > 0) {
						mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
						mByteN++;
						INCDR.TagTranslateNumber = "";
						mValue = "";
						for (int k = 2; k <= mLength; k++) {
							mValue += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
						}
						INCDR.TagTranslateNumber = mValue.substring(0, mValueLength);
					}
				} else if ("66ea".compareTo(mValue) == 0) { // Call Cost
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mLength > 0) {
						// INCDR.TagCallCost =
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]))
						// +
						// "-";
						mByteN++;
						// Reserved
						mByteN += 3;
						INCDR.TagCallCost = Global.fixSignedByte(mBuffer[mByteN])
								+ (Global.fixSignedByte(mBuffer[mByteN + 1]) * 256)
								+ (Global.fixSignedByte(mBuffer[mByteN + 2]) * 65536)
								+ (Global.fixSignedByte(mBuffer[mByteN + 3]) * 16777216) + "";
						mByteN += 4;
						// INCDR.TagCallCost +=
						// Global.fixSignedByte(mBuffer[mByteN]) +
						// (Global.fixSignedByte(mBuffer[mByteN + 1]) * 256) +
						// (Global.fixSignedByte(mBuffer[mByteN + 2]) * 65536) +
						// (Global.fixSignedByte(mBuffer[mByteN + 3]) *
						// 16777216) +
						// "-";
						mByteN += 4;
						// INCDR.TagCallCost +=
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]))
						// +
						// "-";
						mByteN++;
						// Reserved
						mByteN++;
						// INCDR.TagCallCost +=
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
						mByteN++;
					}
				} else if ("67ea".compareTo(mValue) == 0) { // Call Duration
					mLength = (Global.fixSignedByte(mBuffer[mByteN]) + Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mLength == 9) {
						INCDR.CallEndDateTime1 = (Global.fixSignedByte(mBuffer[mByteN]) + 1900
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 1]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 2]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 3]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 4]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 5])));
						mByteN += 6;
						mValue = Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 1]))
								+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 2]));
						mByteN += 3;
						INCDR.TagCallDuration1 = Global.TimeToSeconds(mValue);
					} else {
						mByteN += mLength;
					}
				} else if ("92ea".compareTo(mValue) == 0) { // Encapsulation
					mEncapsulationLength = (Global.fixSignedByte(mBuffer[mByteN])
							+ Global.fixSignedByte(mBuffer[mByteN + 1]) * 256);
					mByteN += 2;
					if (mEncapsulationLength > 0) {
						for (int mEn = 1; mEn <= mEncapsulationLength; mEn++) {
							mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
							mByteN++;
							if ("14".compareTo(mValue) == 0) { // Tag Party to
																// Charge
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagPartyToCharge = ""; if (mLength ==
								 * 1) { INCDR.TagPartyToCharge =
								 * Global.HexToBCD(
								 * Global.fixSignedByte(mBuffer[mByteN]));
								 * mByteN++; mEn++; } else { mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; for (int k = 1; k <=
								 * mLength; k++) { INCDR.TagPartyToCharge +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } }
								 */
							} else if ("16".compareTo(mValue) == 0) { // Tag
																		// CallType
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								INCDR.TagCallType = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
								mEn++;
								INCDR.TeleserviceIndicator = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
								mEn++;
								INCDR.NetworkCauseResultIndicator = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
								mEn++;
								INCDR.INServiceResultIndicator = Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
								mByteN++;
								mEn++;
								if (INCDR.TagCallType.compareTo("01") == 0) {
									INCDR.RecordType = "CALL";
									INCDR.CallType = "OG";
									mRecOG++;
								} else if (INCDR.TagCallType.compareTo("05") == 0) {
									INCDR.RecordType = "CALL";
									INCDR.CallType = "OG";
									mRecOG++;
								} else if (INCDR.TagCallType.compareTo("10") == 0) {
									INCDR.RecordType = "CALL";
									INCDR.CallType = "IC";
									mRecIC++;
								} else if (INCDR.TagCallType.compareTo("11") == 0) {
									INCDR.RecordType = "CALL";
									INCDR.CallType = "IC";
									mRecIC++;
								} else if (INCDR.TagCallType.compareTo("14") == 0) {
									INCDR.RecordType = "CALL";
									INCDR.CallType = "DV";
									mRecDivert++;
								} else if (INCDR.TagCallType.compareTo("15") == 0) {
									INCDR.RecordType = "SMS";
									INCDR.CallType = "SMO";
									mRecSMO++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("20") == 0) {
									INCDR.RecordType = "SMS";
									INCDR.CallType = "SMO";
									mRecSMO++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("21") == 0) {
									INCDR.RecordType = "SMS";
									INCDR.CallType = "SMT";
									mRecSMT++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("c1") == 0) {
									INCDR.RecordType = "REFIL";
									INCDR.CallType = INCDR.TagCallType;
									mRecOther++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("d1") == 0) {
									INCDR.RecordType = "USSD";
									INCDR.CallType = INCDR.TagCallType;
									mRecOther++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("d2") == 0) {
									INCDR.RecordType = "USSD";
									INCDR.CallType = INCDR.TagCallType;
									mRecOther++;
									INCDR.TagCallDuration1 = 0;
								} else if (INCDR.TagCallType.compareTo("e0") == 0) {
									INCDR.RecordType = "DAILY";
									INCDR.CallType = INCDR.TagCallType;
									mRecOther++;
									INCDR.TagCallDuration1 = 0;
									INCDR.TagCallCost = INCDR.TagDiscardedCredit;
								} else {
									mRecOther++;
									INCDR.RecordType = "OTHER";
									mEn = mRecLength;
									mByteN = mRecLength;
								}
							} else if ("17".compareTo(mValue) == 0) { // Tag
																		// IMSI
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								INCDR.TagIMSI = "";
								for (int k = 1; k <= mLength; k++) {
									INCDR.TagIMSI += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
								}
								INCDR.TagIMSI = INCDR.TagIMSI.substring(0, 15);
							} else if ("18".compareTo(mValue) == 0) { // TagRemainningCredit
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								INCDR.TagRemainningCredit = "";
								if (mLength == 4) {
									INCDR.TagRemainningCredit += Global.fixSignedByte(mBuffer[mByteN])
											+ (Global.fixSignedByte(mBuffer[mByteN + 1]) * 256)
											+ (Global.fixSignedByte(mBuffer[mByteN + 2]) * 65536)
											+ (Global.fixSignedByte(mBuffer[mByteN + 3]) * 16777216);
									mByteN += 4;
									mEn += 4;
								}
							} else if ("1a".compareTo(mValue) == 0) { // Tag
																		// Refill
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								mValue = "";
								if (mLength > 0) {
									INCDR.TagReFill_ScratchType = Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
									mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
									mByteN++;
									mEn++;
									for (int k = 3; k <= mLength - 5; k++) {
										mValue += Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]));
										mByteN++;
										mEn++;
									}
									INCDR.TagReFill_ScratchNumber = mValue.substring(0, mValueLength);

									INCDR.TagReFill_ScratchValue += Global.fixSignedByte(mBuffer[mByteN])
											+ (Global.fixSignedByte(mBuffer[mByteN + 1]) * 256)
											+ (Global.fixSignedByte(mBuffer[mByteN + 2]) * 65536)
											+ (Global.fixSignedByte(mBuffer[mByteN + 3]) * 16777216);
									mByteN += 4;
									mEn += 4;
									INCDR.TagReFill_NumberOfRefill = Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
								}
							} else if ("1b".compareTo(mValue) == 0) { // TagDiscardedCredit
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								/*
								 * mByteN += mLength; mEn += mLength;
								 */
								mByteN++;
								mEn++;
								INCDR.TagDiscardedCredit = "";
								if (mLength == 4) {
									INCDR.TagDiscardedCredit += Global.fixSignedByte(mBuffer[mByteN])
											+ (Global.fixSignedByte(mBuffer[mByteN + 1]) * 256)
											+ (Global.fixSignedByte(mBuffer[mByteN + 2]) * 65536)
											+ (Global.fixSignedByte(mBuffer[mByteN + 3]) * 16777216);
									mByteN += 4;
									mEn += 4;
								} else {
									mByteN += mLength;
									mEn += mLength;
								}
							} else if ("1c".compareTo(mValue) == 0) { // TagAccountStatus
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagAccountStatus = ""; for (int k = 1;
								 * k <= mLength; k++) { INCDR.TagAccountStatus
								 * +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])) + "-"; mByteN++; mEn++; }
								 */
							} else if ("21".compareTo(mValue) == 0) { // TagLocationNumber
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								// mByteN += mLength;
								// mEn += mLength;
								mByteN++;
								mEn++;
								if (mLength > 0) {
									mValue = "";
									INCDR.TagLocationNumber = "";
									mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
									mByteN++;
									mEn++;
									for (int k = 2; k <= mLength; k++) {
										mValue += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
										mByteN++;
										mEn++;
									}
									INCDR.TagLocationNumber += mValue.substring(0, mValueLength);
								}
							} else if ("22".compareTo(mValue) == 0) { // TagCallDuration2
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								if (mLength > 0) {
									INCDR.CallEndDateTime2 = (Global.fixSignedByte(mBuffer[mByteN]) + 1900
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 1]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 2]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 3]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 4]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 5])));
									mByteN += 6;
									mEn += 6;
									mValue = Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 1]))
											+ Global.HexToDecimal(Global.fixSignedByte(mBuffer[mByteN + 2]));
									mByteN += 3;
									mEn += 3;
									INCDR.TagCallDuration2 = Global.TimeToSeconds(mValue);
								}
							} else if ("23".compareTo(mValue) == 0) { // OperatorDeposit
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagOperatorDeposit = ""; if (mLength >
								 * 0) { INCDR.TagOperatorDeposit +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagOperatorDeposit +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } if (mLength ==
								 * 9) { INCDR.TagOperatorDeposit +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; }
								 */
							} else if ("24".compareTo(mValue) == 0) { // TagChargingClassNumber
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								INCDR.TagChargingClassNumber = "";
								for (int k = 1; k <= mLength; k++) {
									INCDR.TagChargingClassNumber += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
								}
							} else if ("25".compareTo(mValue) == 0) { // TagSpecificChargingIndicator
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								INCDR.TagSpecificChargingIndicator = "";
								for (int k = 1; k <= mLength; k++) {
									INCDR.TagSpecificChargingIndicator += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
								}
							} else if ("26".compareTo(mValue) == 0) { // TagBonus
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * if (mLength == 20) { INCDR.TagBonus =
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagBonus +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagBonus +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagBonus +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagBonus +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; } else {
								 * mByteN += mLength; mEn += mLength; }
								 */
							} else if ("27".compareTo(mValue) == 0) { // TagPeriodicAutomaticRefill
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]); mByteN
								 * ++; mEn ++; INCDR.TagPeriodicAutomaticRefill
								 * = ""; if (mLength == 5) {
								 * INCDR.TagPeriodicAutomaticRefill +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagPeriodicAutomaticRefill +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } else { mByteN
								 * += mLength; mEn += mLength; }
								 */
							} else if ("28".compareTo(mValue) == 0) { // TagLocationIndicator
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * mByteN++; mEn++; if (mLength > 0) {
								 * INCDR.TagLocationIndicator =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; }
								 */
							} else if ("2c".compareTo(mValue) == 0) { // TagAccountProfileModification
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								// mByteN += mLength;
								// mEn += mLength;
								mByteN++;
								mEn++;
								INCDR.TagAccountProfileModification = "";
								if (mLength == 2) {
									INCDR.TagAccountProfileModification += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
									INCDR.TagAccountProfileModification += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
									mByteN++;
									mEn++;
								} else {
									mByteN += mLength;
									mEn += mLength;
								}
							} else if ("2d".compareTo(mValue) == 0) { // TagChargingSplitting
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagChargingSplitting = ""; if (mLength
								 * == 8) { INCDR.TagChargingSplitting +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagChargingSplitting +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; } else {
								 * mByteN += mLength; mEn += mLength; }
								 */
							} else if ("2e".compareTo(mValue) == 0) { // TagOriginalCalledNumber
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN++;
								mEn++;
								if (mLength > 0) {
									mValueLength = Global.fixSignedByte(mBuffer[mByteN]);
									mByteN++;
									mEn++;
									INCDR.TagOriginalCalledNumber = "";
									mValue = "";
									for (int k = 2; k <= mLength; k++) {
										mValue += Global.HexToBCD(Global.fixSignedByte(mBuffer[mByteN]));
										mByteN++;
										mEn++;
									}
									INCDR.TagOriginalCalledNumber = mValue.substring(0, mValueLength);
								}
							} else if ("31".compareTo(mValue) == 0) { // TagAccountProfileModicationCost
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagChargingSplitting = ""; if (mLength
								 * == 8) { INCDR.TagChargingSplitting +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagChargingSplitting +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; } else {
								 * mByteN += mLength; mEn += mLength; }
								 */
							} else if ("36".compareTo(mValue) == 0) { // TagRatePlan
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagRatePlan = ""; if (mLength == 2) {
								 * INCDR.TagRatePlan +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; INCDR.TagRatePlan
								 * +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } else { mByteN
								 * += mLength; mEn += mLength; }
								 */
							} else if ("3a".compareTo(mValue) == 0) { // TagRemainningDebit
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagRemainningDebit = ""; if (mLength ==
								 * 4) { INCDR.TagRemainningDebit +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; }
								 */
							} else if ("3d".compareTo(mValue) == 0) { // TagBlockUnblockService
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagBlockUnblockService = ""; if
								 * (mLength == 2) { INCDR.TagBlockUnblockService
								 * +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++;
								 * INCDR.TagBlockUnblockService +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } else { mByteN
								 * += mLength; mEn += mLength; }
								 */
							} else if ("3e".compareTo(mValue) == 0) { // TagAPNNumber
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagAPNNumber = ""; for (int k = 1; k <=
								 * mLength; k++) { INCDR.TagAPNNumber +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; }
								 */
							} else if ("3f".compareTo(mValue) == 0) { // TagQOS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagQOS = ""; if (mLength > 0) {
								 * INCDR.TagQOS +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; }
								 */
							} else if ("40".compareTo(mValue) == 0) { // HotBilling
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagHotBilling = ""; if (mLength == 4) {
								 * INCDR.TagHotBilling +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; }
								 */
							} else if ("42".compareTo(mValue) == 0) { // TagGPRSPDPContext
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagGPRSPDPContext = ""; if (mLength >
								 * 0) { INCDR.TagGPRSPDPContext +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4;
								 * INCDR.TagGPRSPDPContext +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216) + "-"; mByteN += 4; mEn += 4; for
								 * (int k = 9; k <= mLength; k++) {
								 * INCDR.TagGPRSPDPContext +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; } } else { mByteN
								 * += mLength; mEn += mLength; }
								 */
							} else if ("43".compareTo(mValue) == 0) { // TagGPRSDataVolumne
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagGPRSDataVolumne = ""; if (mLength ==
								 * 4) { INCDR.TagGPRSDataVolumne +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256) + (Global.fixSignedByte(mBuffer[mByteN +
								 * 2]) * 65536) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 3]) *
								 * 16777216); mByteN += 4; mEn += 4; }
								 */
							} else if ("47".compareTo(mValue) == 0) { // TagRemainningPeriodicSMS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagRemainningPeriodicSMS = ""; if
								 * (mLength == 2) {
								 * INCDR.TagRemainningPeriodicSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("48".compareTo(mValue) == 0) { // TagRemainningRefillBonusSMS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagRemainningRefillBonusSMS = ""; if
								 * (mLength == 2) {
								 * INCDR.TagRemainningRefillBonusSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("49".compareTo(mValue) == 0) { // TagRemainningSubscribedSMS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagRemainningSubscribedSMS = ""; if
								 * (mLength == 2) {
								 * INCDR.TagRemainningSubscribedSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4a".compareTo(mValue) == 0) { // TagDiscardedBonusSMSCredit
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagDiscardedBonusSMSCredit = ""; if
								 * (mLength == 2) {
								 * INCDR.TagRemainningSubscribedSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4b".compareTo(mValue) == 0) { // TagDiscardedRefillBonusSMS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagDiscardedRefillBonusSMS = ""; if
								 * (mLength == 2) {
								 * INCDR.TagDiscardedRefillBonusSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4c".compareTo(mValue) == 0) { // TagDiscardedSubcribedSMS
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagDiscardedSubcribedSMS = ""; if
								 * (mLength == 2) {
								 * INCDR.TagDiscardedSubcribedSMS +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4d".compareTo(mValue) == 0) { // TagSMSPeriodicAllocation
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagSMSPeriodicAllocation = ""; if
								 * (mLength == 2) {
								 * INCDR.TagSMSPeriodicAllocation +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4e".compareTo(mValue) == 0) { // TagSMSBonusForRefill
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagSMSBonusForRefill = ""; if (mLength
								 * == 2) { INCDR.TagSMSBonusForRefill +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							} else if ("4f".compareTo(mValue) == 0) { // TagSMSSubscription
								mLength = Global.fixSignedByte(mBuffer[mByteN]);
								mByteN += mLength;
								mEn += mLength;
								/*
								 * INCDR.TagSMSSubscription = ""; if (mLength ==
								 * 2) { INCDR.TagSMSSubscription +=
								 * Global.fixSignedByte(mBuffer[mByteN]) +
								 * (Global.fixSignedByte(mBuffer[mByteN + 1]) *
								 * 256); mByteN += 2; mEn += 2; }
								 */
							}
						} // end for mEn
					} // //Encapsulation-Length>0
				} // Encapsulation
			}
		}

		private void AnalysePPS331() {
			if (INCDR.RecordType.compareTo("OTHER") != 0) {
				if (INCDR.TagCallingNumber.length() > 0) {
					INCDR.CallingOrg = INCDR.TagCallingNumber;
					if ((INCDR.TagCallingNumber.substring(0, 2).compareTo("03") == 0)
							|| ((INCDR.TagCallingNumber.substring(0, 2).compareTo("84") == 0))) {
						INCDR.TagCallingNumber = INCDR.TagCallingNumber.substring(2);
					}
				}

				if ((INCDR.TagCalledNumber.compareTo("") != 0) && (INCDR.TagCalledNumber.compareTo("ff0") != 0)) {
					INCDR.CalledOrg = INCDR.TagCalledNumber;
					if (INCDR.TagCalledNumber.length() > 2) {
						INCDR.TagChargingClassNumber = INCDR.TagCalledNumber.substring(0, 2);
						if (INCDR.TagCalledNumber.substring(0, 2).compareTo("04") == 0) {
							if (INCDR.TagCalledNumber.length() > 4) {
								if (INCDR.TagCalledNumber.substring(2, 4).compareTo("84") == 0) {
									INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(4);
								} else {
									INCDR.TagCalledNumber = "00" + INCDR.TagCalledNumber.substring(2);
									if (INCDR.TagCalledNumber.substring(0, 3).compareTo("000") == 0) {
										INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(3);
									}
								}
							} else {
								INCDR.TagCalledNumber = INCDR.TagCalledNumber.substring(2);
							}
						} else if (INCDR.TagCalledNumber.substring(0, 2).compareTo("03") == 0) {
							INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(2);
						} else if (INCDR.TagCalledNumber.substring(0, 2).compareTo("ff") == 0) {
							if (INCDR.TagCalledNumber.substring(0, 4).compareTo("ff84") == 0) {
								INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(4);
							} else {
								INCDR.TagCalledNumber = INCDR.TagCalledNumber.substring(2);
							}
						} else {
							INCDR.TagCalledNumber = INCDR.TagCalledNumber.substring(2);
						}
						if (INCDR.TagCalledNumber.length() > 21) {
							INCDR.TagCalledNumber = INCDR.TagCalledNumber.substring(0, 21);
						}
					}
				}
			}
		}

		private void convertPPS421() {
			int mByteN = 0;

			mRecConvert++;
			while (mByteN < mRecLength) {
				// header
				INCDR.Header = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				mStktVarParLength = 0;
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 128) {
					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mStktVarParLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {
					mStktVarParLength = mLength;
				}
				for (int mEn = 1; mEn <= mStktVarParLength; mEn++) {
					mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					if ("a0".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}

					} else if ("a1".compareTo(mValue) == 0) {

						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}
					}

					else { // Stkt-element data
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						if (mLength > 128) {
							mRet = mLength - 128;
							mEleLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mEleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
										* Math.pow(256, (mRet - i));
								mByteN++;
								mEn++;
							}
						} else {
							mEleLength = mLength;
						}
						// Content Stkt-Ele
						for (int mEle = 1; mEle <= mEleLength; mEle++) {
							mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mEn++;

							mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							mEn++;
							mEle++;
							if ("a0".compareTo(mValue) == 0) { // Call data
								mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
								mEn++;
								mEle++;
								if (mValue.substring(1).compareTo("0") == 0) { // Stkt-tag
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;

									// content Feature
									// Type
									mFeature = 0;
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 1; i <= mLength; i++) {
										mFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
												* Math.pow(256, (mLength - i));
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubFeature
									// Type
									mSubFeature = 0;
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content Type
									// Type
									mType = 0;
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubType
									// Type
									mSubType = 0;
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}

									// octet string DUMP
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									mValue = "";
									for (int i = 0; i < mLength; i++) {
										mValue += (char) (mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									mEleValue = mFeature + "." + mSubFeature + "." + mType + "." + mSubType;

									if (mEleValue.compareTo("1.2.1.5") == 0) { // StartDateTime
																				// Process
										mStartDateTime = mValue;
									} else if (mEleValue.compareTo("3100.2.14.1") == 0) { // StartDateTime
										INCDR.CallStartDateTime = mValue;
									} else if (mEleValue.compareTo("3100.2.10.1") == 0) { // Format
																							// of
																							// Calling
																							// Number
										INCDR.FmtOfCalling = mValue;
									} else if (mEleValue.compareTo("3100.2.10.2") == 0) { // Calling
																							// Number
										INCDR.TagCallingNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.11.1") == 0) { // Format
																							// of
																							// Called
																							// Number
										INCDR.FmtOfCalled = mValue;
									} else if (mEleValue.compareTo("3100.2.11.2") == 0) // Called
									// Number
									{
										INCDR.TagCalledNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.12.1") == 0) { // Format
																							// of
																							// Translated
																							// Number
										INCDR.FmtOfTranslatedNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.12.2") == 0) { // Translated
																							// Number
										INCDR.TagTranslateNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.13.1") == 0) { // Call
																							// cost
										INCDR.TagCallCost = mValue;
									} else if (mEleValue.compareTo("3100.2.40.1") == 0) { // Location
																							// Indicator.
										INCDR.locationIndicator = mValue;
									}

									else if (mEleValue.compareTo("3100.2.34.1") == 0) { // End
																						// DateTime
										INCDR.CallEndDateTime1 = mValue;
									} else if (mEleValue.compareTo("3100.2.14.2") == 0) { // Duration
										// if (!mValue.equals("0"))
										// {
										// INCDR.TagCallDuration1 =
										// Global.TimeToSeconds(mValue);
										// }
										try {
											INCDR.TagCallDuration1 = Global.TimeToSeconds(mValue);
										} catch (Exception ex) {
											INCDR.TagCallDuration1 = 0;
										}

									}
									// else if (mEleValue.compareTo(
									// "3100.2.35.1") == 0)
									// { //m4u service
									//// INCDR.Operatordeposit1Amount = mValue;
									// //System.out.println(mValue);
									// }
									// Rtect Calling Number.
									else if (mEleValue.compareTo("3100.2.19.2") == 0) {
										INCDR.map = mValue;
									}
									// RTec Call Cost
									else if (mEleValue.compareTo("3100.2.70.3") == 0) {
										INCDR.TagRTecCallCost = mValue;
									} else if (mEleValue.compareTo("3100.2.22.1") == 0) { // Call
																							// Type
										INCDR.TagCallType = mValue;

										if (INCDR.TagCallType.compareTo("1") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("5") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;

										}
										// m4u service.
										// else if
										// ((INCDR.TagCallType.compareTo("32")
										// == 0) ||
										// (INCDR.TagCallType.compareTo("31") ==
										// 0))
										// {
										// INCDR.RecordType = "CALL";
										// INCDR.CallType = "OG";
										// INCDR.TagCallCost =
										// INCDR.Operatordeposit1Amount;
										// mRecOG++;
										// }
										else if (INCDR.TagCallType.compareTo("128") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("129") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("130") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("131") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("132") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("133") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("134") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("10") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "IC";
											mRecIC++;
										} else if (INCDR.TagCallType.compareTo("11") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "IC";
											mRecIC++;
										} else if (INCDR.TagCallType.compareTo("20") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "DV";
											mRecDivert++;
										} else if (INCDR.TagCallType.compareTo("21") == 0) {
											INCDR.RecordType = "SMS";
											INCDR.CallType = "SMO";
											mRecSMO++;
											INCDR.TagCallDuration1 = 0;
										} else if (INCDR.TagCallType.compareTo("192") == 0) {
											INCDR.RecordType = "CALL";
											INCDR.CallType = "OG";
											mRecOG++;
										} else if (INCDR.TagCallType.compareTo("193") == 0) {
											INCDR.RecordType = "REFIL";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											;
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
											INCDR.CallEndDateTime1 = "";
										} else if (INCDR.TagCallType.compareTo("208") == 0) {
											INCDR.RecordType = "USSD";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											;
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
										} else if (INCDR.TagCallType.compareTo("209") == 0) {
											INCDR.RecordType = "USSD";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											;
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
										} else if (INCDR.TagCallType.compareTo("210") == 0) {
											INCDR.RecordType = "USSD";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											;
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
										} else if (INCDR.TagCallType.compareTo("224") == 0) {
											INCDR.RecordType = "DAILY";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
										} else if (INCDR.TagCallType.compareTo("240") == 0) {
											INCDR.RecordType = "DAILY";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											mRecOther++;
											INCDR.TagCallDuration1 = 0;
										} else {
											mRecOther++;
											INCDR.RecordType = "OTHER";
											INCDR.CallType = Global.DecToHexa(INCDR.TagCallType);
											// mByteN = mRecLength;
											// mEle = mRecLength;
											// mEn = mRecLength;
										}
									} else if (mEleValue.compareTo("3100.2.22.2") == 0) // Teleservice
									// Indicator
									{
										INCDR.TeleserviceIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.22.3") == 0) // Network
									// Indicator
									{
										INCDR.NetworkCauseResultIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.22.4") == 0) // IN
									// Service
									// Indicator
									{
										INCDR.INServiceResultIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.23.1") == 0) { // IMSI
										INCDR.TagIMSI = mValue;
									} else if (mEleValue.compareTo("3100.2.24.1") == 0) { // Remain
																							// credit
										INCDR.TagRemainningCredit = mValue;
										// //System.out.println(mValue);
									} else if (mEleValue.compareTo("3100.2.24.7") == 0) { // Bonus
																							// credit
										INCDR.TagBonnusCredit = mValue;
									} else if (mEleValue.compareTo("3100.2.27.1") == 0) { // Bonus
																							// credit
																							// System.out.println(mValue);
									}

									else if (mEleValue.compareTo("3100.2.26.1") == 0) { // refill
																						// mean
										INCDR.TagReFill_ScratchType = mValue;
									} else if (mEleValue.compareTo("3100.2.26.2") == 0) // number
									// used
									// for
									// refill
									{
										INCDR.TagReFill_ScratchNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.26.3") == 0) { // refill
																							// among
										INCDR.TagReFill_ScratchValue = Integer.parseInt(mValue);
									} else if (mEleValue.compareTo("3100.2.27.1") == 0) // discarded
									// credit
									{
										INCDR.TagDiscardedCredit = mValue;
									} else if (mEleValue.compareTo("3100.2.36.1") == 0) // charging
									// class
									// number
									{
										INCDR.TagChargingClassNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.37.1") == 0) // Specific
									// charging
									// indicator
									{
										INCDR.TagSpecificChargingIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.39.1") == 0) // Specific
									// charging
									// indicator
									{
										INCDR.TagPeriodicAutomaticRefill = mValue;
									} else if (mEleValue.compareTo("3100.2.33.2") == 0) // location
									// number
									{
										INCDR.TagLocationNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.44.1") == 0) // previous
									// account
									// profile
									{
										INCDR.TagAccountProfileModification = mValue;
									} else if (mEleValue.compareTo("3100.2.46.1") == 0) // format
									// of
									// original
									// called
									// number
									{
										INCDR.FmtOfOriginalCalled = mValue;
									} else if (mEleValue.compareTo("3100.2.46.2") == 0) // original
									// called
									// number
									{
										INCDR.TagOriginalCalledNumber = mValue;
									}
									// New Add.
									else if (mEleValue.compareTo("3100.2.63.1") == 0) { // Traffic
																						// class
										INCDR.TrafficClass = mValue;
									} else if (mEleValue.compareTo("3100.2.65.1") == 0) // APN
																						// Chargin
																						// area.
									{
										INCDR.APNChargingArea = mValue;
									} else if (mEleValue.compareTo("3100.2.66.2") == 0) // ChargingID
									{
										INCDR.ChargingId = mValue;
									} else if (mEleValue.compareTo("3100.2.66.3") == 0) // GGSN
																						// Address.
									{
										INCDR.GGSNAddress = mValue;
									} else if (mEleValue.compareTo("3100.2.67.1") == 0) // GPRS
																						// data
																						// volume.
									{
										INCDR.GPRSDataVolume = mValue;
									} else if (mEleValue.compareTo("3100.2.67.2") == 0) // Transferred
																						// Volume
																						// Roll
																						// Over
									{
										INCDR.TransVolRollOver = mValue;
									} else if (mEleValue.compareTo("3100.2.70.1") == 0) // Content
																						// Provider
																						// ID.
									{
										INCDR.ContentProviderId = mValue;
									} else if (mEleValue.compareTo("3100.2.70.2") == 0) // Content
																						// Provider
																						// Transaction
																						// ID
									{
										INCDR.ContentProviderTransactionId = mValue;
									} else if (mEleValue.compareTo("3100.2.70.3") == 0) // Price
									{
										INCDR.Price = mValue;
									} else if (mEleValue.compareTo("3100.2.70.4") == 0) // Currency
									{
										INCDR.Currency = mValue;
									} else if (mEleValue.compareTo("3100.2.70.5") == 0) // Bonus
									{
										INCDR.Bonus = mValue;
									}
									// new 29-10_bucket
									else if (mEleValue.compareTo("3100.2.200.1") == 0) // BucketName
									{
										INCDR.bucketName = mValue;
									} else if (mEleValue.compareTo("3100.2.200.2") == 0) // RUM
																							// Kind
									{
										INCDR.RUMKind = mValue;
									} else if (mEleValue.compareTo("3100.2.200.3") == 0) // Consumed
																							// Unit
									{
										INCDR.consumedUnit = mValue;
									} else if (mEleValue.compareTo("3100.2.200.4") == 0) // Remaining
																							// Unit
									{
										INCDR.remainingUnit = mValue;
									} else if (mEleValue.compareTo("3100.2.200.5") == 0) // End
																							// Validity
																							// Date
									{
										INCDR.endValidityDate = mValue;
									} else if (mEleValue.compareTo("3100.2.200.6") == 0) // Bucket
																							// Start
									{
										INCDR.bucketStart = mValue;
									} else if (mEleValue.compareTo("3100.2.200.7") == 0) // Bucket
																							// End
									{
										INCDR.bucketEnd = mValue;
									}
								}
							} else if ("a1".compareTo(mValue) == 0) { // Call
																		// event
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;

							} else if ("a2".compareTo(mValue) == 0) { // Stkt-obj
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;

							}
						} // end for element
					} // end if Stkt-element data
				} // End for mStktVarParLength
			} // End while record length
			mFileByte += mByteN;
		}

		private void AnalysePPS421() {
			if ((INCDR.map != null && INCDR.CallType.equals("b8"))
					|| (INCDR.map != null && INCDR.CallType.equals("b0"))) {
				INCDR.TagCallingNumber = INCDR.map;
				INCDR.TagCallCost = INCDR.TagRTecCallCost;
			}
			if (INCDR.CallType.compareTo("OG") == 0 && !INCDR.ChargingId.toString().trim().equals("")) {
				INCDR.CallType = "GPRS";
			}
			if (INCDR.CallStartDateTime.compareTo("") != 0) {
				mValue = Global.Format(new java.util.Date(Global.convertDateTimeToLong(INCDR.CallStartDateTime)
						- Global.convertTomiliseconds(INCDR.TagCallDuration1)), "yyyyMMddHHmmss");
				INCDR.CallStartDateTime = mValue;
			}
			if (INCDR.TagCallType.compareTo("193") == 0) {
				INCDR.TagCallDuration1 = 0;
				INCDR.CallEndDateTime1 = "";
				INCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			} else if (INCDR.TagCallType.compareTo("224") == 0) {
				INCDR.TagCallDuration1 = 0;
				INCDR.TagCallCost = INCDR.TagPeriodicAutomaticRefill;
				INCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			}

			else if (INCDR.TagCallType.compareTo("240") == 0) {
				INCDR.TagCallDuration1 = 0;
				INCDR.TagCallCost = INCDR.TagPeriodicAutomaticRefill;
				INCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			} else {
				INCDR.CallingOrg = INCDR.FmtOfCalling + INCDR.TagCallingNumber;
			}
			// if (INCDR.RecordType.compareTo("OTHER") != 0) {
			if (INCDR.TagCallingNumber.length() > 0) {
				/*
				 * if (((INCDR.FmtOfCalling.compareTo("3") == 0) ||
				 * (INCDR.FmtOfCalling.compareTo("4") == 0)) &&
				 * ((INCDR.TagCallingNumber.substring(0, 2).compareTo("84") ==
				 * 0)))
				 */
				if (INCDR.TagCallingNumber.length() >= 2) {
					if (INCDR.TagCallingNumber.substring(0, 2).compareTo("84") == 0) {
						INCDR.TagCallingNumber = INCDR.TagCallingNumber.substring(2);
					}
				}
			}

			if (INCDR.TagCalledNumber.compareTo("") != 0) {
				INCDR.CalledOrg = INCDR.FmtOfCalled + INCDR.TagCalledNumber;
				// && (isNumeric(INCDR.TagCalledNumber)))
				if (INCDR.TagCalledNumber.length() > 0) {
					INCDR.TagChargingClassNumber = INCDR.FmtOfCalled;
					if (INCDR.FmtOfCalled.compareTo("4") == 0) {
						if (INCDR.TagCalledNumber.length() > 2) {
							if (INCDR.TagCalledNumber.substring(0, 2).compareTo("84") == 0) {
								INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(2);
							} else if (INCDR.TagCalledNumber.length() > 7) {
								INCDR.TagCalledNumber = "00" + INCDR.TagCalledNumber;
								if (INCDR.TagCalledNumber.substring(0, 3).compareTo("000") == 0) {
									INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber.substring(3);
								}
							}
						} else {
							INCDR.TagCalledNumber = INCDR.TagCalledNumber;
						}
					} else if (INCDR.FmtOfCalled.compareTo("3") == 0) {
						if (INCDR.TagCalledNumber.length() >= 9) {
							INCDR.TagCalledNumber = "0" + INCDR.TagCalledNumber;
						}
					}
					if (INCDR.TagCalledNumber.length() > 21) {
						INCDR.TagCalledNumber = INCDR.TagCalledNumber.substring(0, 21);
					}
				}
			}
			if (INCDR.CallStartDateTime.compareTo("") == 0) {
				if (mStartDateTime.equals("")) {
					INCDR.CallStartDateTime = "                   ";
				} else {
					INCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
				}
			}
			// }
		}

		protected int INFile_PPS331(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			// boolean Found = false;
			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='yyyyMMddhh24miss'");

				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				fileConvert.addText(Global.mPPSHeaderCharge);

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecDivert = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				String lastCallingTime = "";
				String firstCallingTime = "";
				while (fileCDR.getFilePointer() < fileCDR.length()) {
					INCDR.RecordType = "";
					INCDR.CallType = "";
					INCDR.Header = "";
					INCDR.GlobalServiceIdentifier = "";
					INCDR.CallStartDateTime = "";
					// INCDR.TagBepID = "";
					INCDR.TagCallingNumber = ""; // 63EA
					INCDR.TagCalledNumber = ""; // 64EA
					INCDR.TagTranslateNumber = "";
					INCDR.TagCallCost = "";
					INCDR.CallEndDateTime1 = "";
					INCDR.TagCallDuration1 = 0;
					// INCDR.TagEncapsulation = "";
					// INCDR.TagPartyToCharge = "";
					INCDR.TagCallType = "";
					INCDR.INServiceResultIndicator = "";
					INCDR.NetworkCauseResultIndicator = "";
					INCDR.TeleserviceIndicator = "";
					INCDR.TagIMSI = "";
					INCDR.TagRemainningCredit = "";
					INCDR.TagReFill_ScratchType = "";
					INCDR.TagReFill_ScratchNumber = "";
					INCDR.TagReFill_ScratchValue = 0;
					INCDR.TagReFill_NumberOfRefill = "";
					INCDR.TagDiscardedCredit = "";
					INCDR.TagLocationNumber = "";
					INCDR.TagCallDuration2 = 0;
					INCDR.CallEndDateTime2 = "";
					// INCDR.TagOperatorDeposit = "";
					INCDR.TagChargingClassNumber = "";
					INCDR.TagSpecificChargingIndicator = "";
					// INCDR.TagBonus = "";
					INCDR.TagPeriodicAutomaticRefill = "";
					// INCDR.TagLocationIndicator = "";
					INCDR.TagAccountProfileModification = "";
					// INCDR.TagChargingSplitting = "";
					INCDR.TagOriginalCalledNumber = "";
					// INCDR.TagRatePlan = "";
					// INCDR.TagAccountStatus = "";
					// INCDR.TagRemainningDebit = "";
					// INCDR.TagBlockUnblockService = "";
					// INCDR.TagAPNNumber = "";
					// INCDR.TagQOS = "";
					// INCDR.TagHotBilling = "";
					// INCDR.TagGPRSPDPContext = "";
					// INCDR.TagGPRSDataVolumne = "";
					// INCDR.TagRemainningPeriodicSMS = "";
					// INCDR.TagRemainningRefillBonusSMS = "";
					// INCDR.TagRemainningSubscribedSMS = "";
					// INCDR.TagDiscardedBonusSMSCredit = "";
					// INCDR.TagDiscardedRefillBonusSMS = "";
					// INCDR.TagDiscardedSubcribedSMS = "";
					// INCDR.TagSMSPeriodicAllocation = "";
					// INCDR.TagSMSBonusForRefill = "";
					// INCDR.TagSMSSubscription = "";
					INCDR.CallingOrg = "";
					INCDR.CalledOrg = "";
					INCDR.map = "";

					mRecConvert++;

					// version
					INCDR.Header = Global.HexToBCD(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToBCD(Global.fixSignedByte(fileCDR.readByte()));
					if (INCDR.Header.compareTo("0200") != 0) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Mising header cdr at position: " + fileCDR.getFilePointer() + "' - rec:"
								+ mRecConvert + "  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Mising header cdr at position: " + fileCDR.getFilePointer() + " - rec:"
								+ mRecConvert);
						return (Global.ErrFileConverted);
					}
					INCDR.GlobalServiceIdentifier = Global.HexToBCD(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToBCD(Global.fixSignedByte(fileCDR.readByte()));

					INCDR.CallStartDateTime = (Global.fixSignedByte(fileCDR.readByte()) + 1900
							+ Global.HexToDecimal(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToDecimal(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToDecimal(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToDecimal(Global.fixSignedByte(fileCDR.readByte()))
							+ Global.HexToDecimal(Global.fixSignedByte(fileCDR.readByte())));

					mRecLength = (Global.fixSignedByte(fileCDR.readByte())
							+ Global.fixSignedByte(fileCDR.readByte()) * 256);
					mBuffer = new byte[mRecLength];
					mLength = fileCDR.read(mBuffer);
					if (mLength != mRecLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + fileCDR.getFilePointer() + " - rec:"
								+ mRecConvert + "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + fileCDR.getFilePointer() + " - rec:"
								+ mRecConvert);
						return (Global.ErrFileConverted);
					}
					convertPPS331();
					// Analyzation
					if (INCDR.TagCallType.compareTo("") != 0) {
						AnalysePPS331();

						if (INCDR.RecordType.compareTo("OTHER") != 0) {
							appendValue(INCDR.RecordType);
							appendValue(INCDR.CallType);
							appendValue(INCDR.TagCallingNumber);
							appendValue(INCDR.TagIMSI);
							appendValue(INCDR.CallStartDateTime);
							appendValue(String.valueOf(INCDR.TagCallDuration1));
							appendValue(INCDR.CallEndDateTime1);
							appendValue(INCDR.TagCalledNumber);
							appendValue(INCDR.TagLocationNumber);
							appendValue(INCDR.TagAccountProfileModification);
							appendValue(INCDR.TagRemainningCredit);
							appendValue(INCDR.TagCallCost);
							appendValue(INCDR.TagDiscardedCredit);
							appendValue(INCDR.TagChargingClassNumber);
							appendValue(INCDR.TeleserviceIndicator);
							appendValue(INCDR.NetworkCauseResultIndicator);
							appendValue(INCDR.INServiceResultIndicator);
							appendValue(INCDR.TagSpecificChargingIndicator);
							appendValue(INCDR.TagOriginalCalledNumber);
							appendValue(INCDR.TagTranslateNumber);
							appendValue(INCDR.TagReFill_ScratchType);
							appendValue(INCDR.TagReFill_ScratchNumber);
							appendValue(String.valueOf(INCDR.TagReFill_ScratchValue));
							appendValue(INCDR.CallingOrg);
							appendValue(INCDR.CalledOrg);
							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = INCDR.CallStartDateTime.substring(6, 8) + "/"
										+ INCDR.CallStartDateTime.substring(4, 6) + "/"
										+ INCDR.CallStartDateTime.substring(0, 4) + " "
										+ INCDR.CallStartDateTime.substring(8, 10) + ":"
										+ INCDR.CallStartDateTime.substring(10, 12) + ":"
										+ INCDR.CallStartDateTime.substring(12, 14);
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}
								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						}
					} else {
						mRecOther++;
					}
				} // end of while

				writeLogFile("      .Other record          : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      .Total record effected : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				writeLogFile("           - OG     : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("           - IC     : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("           - Divert : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("           - SMO    : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("           - SMT    : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));

				mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
						+ ",rec_total=" + mRecConvert + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo="
						+ mRecSMO + ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
						+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='"
						+ firstCallingTime + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				// ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert IN : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		protected int INFile_PPS421(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {

				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");

				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mPPSHeaderCharge);
				} else {
					fileConvert.addText(Global.mPPSHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecDivert = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				mEventLength = 0;
				mClass = "";
				mObject = "";
				mStartDateTime = "";
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;
				while (mFileByte < mFileLength) {
					INCDR.RecordType = "";
					INCDR.CallType = "";
					INCDR.Header = "";
					INCDR.GlobalServiceIdentifier = "";
					INCDR.CallStartDateTime = "";
					INCDR.TagCallingNumber = ""; // 63EA
					INCDR.TagCalledNumber = ""; // 64EA
					INCDR.TagTranslateNumber = "";
					INCDR.TagCallCost = "";
					INCDR.CallEndDateTime1 = "";
					INCDR.TagCallDuration1 = 0;
					INCDR.TagCallType = "";
					INCDR.TagAccountProfileModification = "";
					INCDR.INServiceResultIndicator = "";
					INCDR.NetworkCauseResultIndicator = "";
					INCDR.TeleserviceIndicator = "";
					INCDR.TagLocationNumber = "";
					INCDR.TagIMSI = "";
					INCDR.TagRemainningCredit = "";
					INCDR.TagReFill_ScratchType = "";
					INCDR.TagReFill_ScratchNumber = "";
					INCDR.TagReFill_ScratchValue = 0;
					INCDR.TagReFill_NumberOfRefill = "";
					INCDR.TagDiscardedCredit = "";
					INCDR.TagCallDuration2 = 0;
					INCDR.CallEndDateTime2 = "";
					INCDR.TagChargingClassNumber = "";
					INCDR.TagSpecificChargingIndicator = "";
					// INCDR.TagLocationIndicator = "";
					INCDR.TagOriginalCalledNumber = "";
					INCDR.TagBonnusCredit = "";
					INCDR.FmtOfCalling = "";
					INCDR.FmtOfCalled = "";
					INCDR.FmtOfTranslatedNumber = "";
					INCDR.FmtOfOriginalCalled = "";
					INCDR.TagPeriodicAutomaticRefill = "";
					INCDR.CallingOrg = "";
					INCDR.CalledOrg = "";
					// GPRS
					INCDR.TrafficClass = "";
					INCDR.APNChargingArea = "";
					INCDR.ChargingId = "";
					INCDR.GGSNAddress = "";
					INCDR.GPRSDataVolume = "";
					INCDR.TransVolRollOver = "";
					INCDR.ContentProviderId = "";
					INCDR.ContentProviderTransactionId = "";
					INCDR.Price = "";
					INCDR.Currency = "";
					INCDR.Bonus = "";
					INCDR.map = "";
					INCDR.TagRTecCallCost = "";
					// Bucket.29-10
					INCDR.bucketName = "";
					INCDR.RUMKind = "";
					INCDR.consumedUnit = "";
					INCDR.remainingUnit = "";
					INCDR.endValidityDate = "";
					INCDR.bucketStart = "";
					INCDR.bucketEnd = "";
					INCDR.locationIndicator = "";

					mRecLength = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]));
					mFileByte += 4;
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}

					convertPPS421();
					// Analyzation
					AnalysePPS421();
					if ((INCDR.RecordType.length() > 0)) {
						// && (INCDR.RecordType.compareTo("OTHER") != 0)) {
						if (cdrfileParam.ChargeCDRFile) {
							appendValue(INCDR.RecordType);
							appendValue(INCDR.CallType);
							appendValue(INCDR.TagCallingNumber);
							appendValue(INCDR.TagIMSI); // Calling_imsi
							appendValue(INCDR.CallStartDateTime);
							appendValue(String.valueOf(INCDR.TagCallDuration1));
							appendValue(INCDR.CallEndDateTime1);
							appendValue(INCDR.TagCalledNumber);
							appendValue(INCDR.TagLocationNumber); // CELL_ID
							appendValue(INCDR.TagAccountProfileModification); // Acc
							// profile
							appendValue(INCDR.TagRemainningCredit); // service
							// center
							appendValue(INCDR.TagCallCost); // IC_ROUTE
							appendValue(INCDR.TagDiscardedCredit); // OG_ROUTE
							appendValue(INCDR.TagChargingClassNumber); // tariff
							// class
							appendValue(INCDR.TeleserviceIndicator);
							appendValue(INCDR.NetworkCauseResultIndicator);
							appendValue(INCDR.INServiceResultIndicator);
							appendValue(INCDR.TagSpecificChargingIndicator); // cha_indicator
							appendValue(INCDR.TagOriginalCalledNumber);
							appendValue(INCDR.TagTranslateNumber);
							appendValue(INCDR.TagReFill_ScratchType);
							appendValue(INCDR.TagReFill_ScratchNumber);
							appendValue(String.valueOf(INCDR.TagReFill_ScratchValue));
							appendValue(INCDR.CallingOrg);
							appendValue(INCDR.CalledOrg);
							appendValue(INCDR.TagBonnusCredit);
							// GPRS
							appendValue(INCDR.TrafficClass);
							appendValue(INCDR.APNChargingArea);
							appendValue(INCDR.ChargingId);
							appendValue(INCDR.GGSNAddress);
							appendValue(INCDR.GPRSDataVolume);
							appendValue(INCDR.TransVolRollOver);
							appendValue(INCDR.ContentProviderId);
							appendValue(INCDR.ContentProviderTransactionId);
							appendValue(INCDR.Price);
							appendValue(INCDR.Currency);
							appendValue(INCDR.Bonus);

							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = INCDR.CallStartDateTime.substring(6, 8) + "/"
										+ INCDR.CallStartDateTime.substring(4, 6) + "/"
										+ INCDR.CallStartDateTime.substring(0, 4) + " "
										+ INCDR.CallStartDateTime.substring(8, 10) + ":"
										+ INCDR.CallStartDateTime.substring(10, 12) + ":"
										+ INCDR.CallStartDateTime.substring(12, 14);
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}

								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						} else {

							mRecN++;
							mStrValues = mRecN + "|" + pCenterID + "|" + INCDR.CallType + "|" + "|" + "|" + "|" + "|"
									+ INCDR.TagCallingNumber + "|" + INCDR.TagIMSI + "|"
									+ INCDR.CallStartDateTime.substring(6, 8) + "/"
									+ INCDR.CallStartDateTime.substring(4, 6) + "/"
									+ INCDR.CallStartDateTime.substring(0, 4) + " "
									+ INCDR.CallStartDateTime.substring(8, 10) + ":"
									+ INCDR.CallStartDateTime.substring(10, 12) + ":"
									+ INCDR.CallStartDateTime.substring(12, 14) + "|" + INCDR.TagCallDuration1 + "|" // chargeResult.strPO_CODE,
																														// chargeResult.dblTaxAir,
																														// chargeResult.dblTaxIdd,
																														// chargeResult.dblTaxSer
									+ INCDR.CallEndDateTime1 + "|" + INCDR.TagCalledNumber + "|"
									+ INCDR.TagLocationNumber + "|" + INCDR.TagRemainningCredit + "|"
									+ INCDR.TagCallCost + "|" + INCDR.TagDiscardedCredit + "|"
									+ INCDR.TagChargingClassNumber + "|" + INCDR.TeleserviceIndicator + "|"
									+ INCDR.NetworkCauseResultIndicator + "|" + INCDR.INServiceResultIndicator + "|"
									+ INCDR.TagSpecificChargingIndicator + "|" + INCDR.TagOriginalCalledNumber + "|"
									+ INCDR.TagTranslateNumber + "|" + INCDR.TagReFill_ScratchType + "|"
									+ INCDR.TagReFill_ScratchNumber + "|" + INCDR.TagReFill_ScratchValue + "|"
									+ INCDR.TagAccountProfileModification + "|" + INCDR.CallingOrg + "|"
									+ INCDR.CalledOrg + "|" + "|" + "|" + "|" + "|" + "|" + "|" + INCDR.TagBonnusCredit
									+ "|" + INCDR.TrafficClass + "|" + INCDR.APNChargingArea + "|" + INCDR.ChargingId
									+ "|" + INCDR.GGSNAddress + "|" + INCDR.GPRSDataVolume + "|"
									+ INCDR.TransVolRollOver + "|" + INCDR.ContentProviderId // chargeResult.intSubsType,
																								// chargeResult.numOfBlockAir,
																								// chargeResult.numOfBlockIddSer,
																								// chargeResult.intCenOfCalling
																								// +,
																								// chargeResult.intCenOfCalled
																								// +,
																								// chargeResult.intCollectType,
																								// GPRS
									+ "|" + INCDR.ContentProviderTransactionId + "|" + INCDR.Price + "|"
									+ INCDR.Currency + "|" + INCDR.Bonus + "|" + INCDR.bucketName + "|" + INCDR.RUMKind
									+ "|" + INCDR.consumedUnit + "|" + INCDR.remainingUnit + "|" + INCDR.endValidityDate
									+ "|" + INCDR.bucketStart + "|" + INCDR.bucketEnd + "|" + INCDR.locationIndicator;

							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = INCDR.CallStartDateTime.substring(6, 8) + "/"
										+ INCDR.CallStartDateTime.substring(4, 6) + "/"
										+ INCDR.CallStartDateTime.substring(0, 4) + " "
										+ INCDR.CallStartDateTime.substring(8, 10) + ":"
										+ INCDR.CallStartDateTime.substring(10, 12) + ":"
										+ INCDR.CallStartDateTime.substring(12, 14);
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}

								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						}
					}
				}

				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				// e.printStackTrace();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}

			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	} // End class Convert IN

	class ConvertSMSC {

		protected StructBRFCDR BRFCDR = new StructBRFCDR();
		protected int mRecLength = 452;
		protected java.text.SimpleDateFormat dtfm = new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

		private int BRF_V452(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			RandomAccessFile fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			String mSQL = null;
			int mFileLength = 0;
			int mRecN = 0;
			int mTimeZone = 0; // if GMT+7-> set 25200
			int mRecGSM = 0;
			int mRecSMPP = 0;
			int mRecOther = 0;
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mSMSCHeaderCharge);
				} else {
					fileConvert.addText(Global.mSMSCHeaderNoCharge);
				}

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mRecN = 0;
				mRecConvert = 0;
				mValue = "";
				mRet = 0;
				mFileByte = 0;
				mLength = 0;
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mFileLength % mRecLength != 0) { // Missing BRF Structure
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error BRF Structure' " + " WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error BRF Structure");
					return (Global.ErrFileConverted);
				}

				while (mFileByte < mFileLength) {
					BRFCDR.DestinationAddress = ""; // = new String[21];
					BRFCDR.OriginatorAddress = ""; // = new String[21];
					BRFCDR.MessageClass = 0;
					BRFCDR.ProtocolID = 0;
					BRFCDR.MessageReceiveTimeByte = 0;
					BRFCDR.Status = 0;
					BRFCDR.HandsetNotificationIndicator = 0;
					BRFCDR.LastFailureReason = 0;
					BRFCDR.RPPriorityRequest = 0;
					BRFCDR.TextSize = 0;
					BRFCDR.NumberOfDeliveryAttemps = 0;
					BRFCDR.StatusReportsGenerated = 0;
					BRFCDR.AcknowledgmentIndicator = 0;
					BRFCDR.ClientName = ""; // = new String[16];
					BRFCDR.ServiceType = 0;
					BRFCDR.ChargeIndicator = 0;
					BRFCDR.PrivacyIndicator = 0;
					BRFCDR.ValidityIndicator = 0;
					BRFCDR.NumberOfMessagesInSMClient = 0;
					BRFCDR.MessageType = 0;
					BRFCDR.SubparameterLength = 0;
					BRFCDR.SubcriberMarketIdentifier = 0;
					BRFCDR.ServingMSCMarketIdentifier = 0;
					BRFCDR.MessageID = 0;
					BRFCDR.GroupID = 0;
					BRFCDR.ReservedForFutureUse = 0;
					BRFCDR.TeleserviceId = 0;
					BRFCDR.CallbackAddress = ""; // = new String[21];
					BRFCDR.Subparameter = ""; // = new String[24];
					BRFCDR.AlphabetIndicator = 0;
					BRFCDR.LanguageIndicator = 0;
					BRFCDR.SSN = 0;
					BRFCDR.DPC = 0;
					BRFCDR.IMSI = ""; // = new String[21];
					BRFCDR.OriginatingMSC = 0;
					BRFCDR.ReservedForEndhancement1 = 0;
					BRFCDR.OriginatingMSCPointCode = 0;
					BRFCDR.OriginatingGroup = 0;
					BRFCDR.ValidationType = 0;
					BRFCDR.ReservedForEndhancement2 = 0;
					BRFCDR.BillingSequenceNumber = 0;

					// BillingTimeByte - 4 byte
					BRFCDR.BillingTimeByte = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]) + mTimeZone);
					mFileByte = mFileByte + 4;

					// DesctinationAddress - 21 byte
					for (int i = mFileByte; i <= mFileByte + 21; i++) {
						BRFCDR.DestinationAddress = BRFCDR.DestinationAddress + (char) mBuffer[i];
					}
					mLength = 0;
					mLength = BRFCDR.DestinationAddress.indexOf('\0');
					if (mLength > 0) {
						BRFCDR.DestinationAddress = BRFCDR.DestinationAddress.substring(0, mLength);
					}
					mFileByte = mFileByte + 21;

					// OriginatorAddress - 21 byte
					BRFCDR.OriginatorAddress = "";
					for (int i = mFileByte; i <= mFileByte + 21; i++) {
						BRFCDR.OriginatorAddress = BRFCDR.OriginatorAddress + (char) mBuffer[i];
					}
					mLength = 0;
					mLength = BRFCDR.OriginatorAddress.indexOf('\0');
					if (mLength > 0) {
						BRFCDR.OriginatorAddress = BRFCDR.OriginatorAddress.substring(0, mLength);
					}
					mFileByte = mFileByte + 21;

					// MessageClass - 1 byte
					// BRFCDR.MessageClass = fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ProtocolID - 1 byte
					// BRFCDR.ProtocolID = fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// MessageReceiveTimeByte - 4 byte
					BRFCDR.MessageReceiveTimeByte = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]) + mTimeZone);
					mFileByte = mFileByte + 4;

					// Status - 1 byte
					BRFCDR.Status = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// HandsetNotificationIndicator - 1 byte
					// BRFCDR.HandsetNotificationIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// LastFailureReason - 2 byte
					// BRFCDR.LastFailureReason =
					// fixSignedByte(mBuffer[mFileByte])
					// +
					// fixSignedByte(mBuffer[mFileByte + 1]);
					mFileByte = mFileByte + 2;

					// RPPriorityRequest - 1 byte
					// BRFCDR.RPPriorityRequest=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// TextSize - 1 byte
					BRFCDR.TextSize = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// NumberOfDeliveryAttemps - 1 byte
					BRFCDR.NumberOfDeliveryAttemps = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// StatusReportsGenerated - 1 byte
					BRFCDR.StatusReportsGenerated = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// AcknowledgmentIndicator - 1 byte
					// BRFCDR.AcknowledgmentIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ClientName - 16 byte
					BRFCDR.ClientName = "";
					for (int i = mFileByte; i <= mFileByte + 16; i++) {
						BRFCDR.ClientName = BRFCDR.ClientName + (char) mBuffer[i];
					}
					mLength = 0;
					mLength = BRFCDR.ClientName.indexOf('\0');
					if (mLength > 0) {
						BRFCDR.ClientName = BRFCDR.ClientName.substring(0, mLength);
					}
					mFileByte = mFileByte + 16;

					// ServiceType - 1 byte
					// BRFCDR.ServiceType=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ChargeIndicator - 1 byte
					// BRFCDR.ChargeIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// PrivacyIndicator - 1 byte
					// BRFCDR.PrivacyIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ValidityIndicator - 1 byte
					// BRFCDR.ValidityIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// NumberOfMessagesInSMClient - 1 byte
					// BRFCDR.NumberOfMessagesInSMClient=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// MessageType - 1 byte
					// BRFCDR.MessageType=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// SubparameterLength - 1 byte
					// BRFCDR.SubparameterLength=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// SubcriberMarketIdentifier - 4 byte
					// BRFCDR.SubcriberMarketIdentifier =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// ServingMSCMarketIdentifier - 4 byte
					// BRFCDR.ServingMSCMarketIdentifier =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// MessageID - 4 byte
					// BRFCDR.MessageID = fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// GroupID - 4 byte
					// BRFCDR.GroupID = fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// ReservedForFutureUse - 2 byte
					// BRFCDR.ReservedForFutureUse =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]);
					mFileByte = mFileByte + 2;

					// TeleserviceId - 2 byte
					// BRFCDR.TeleserviceId = fixSignedByte(mBuffer[mFileByte])
					// +
					// fixSignedByte(mBuffer[mFileByte + 1]);
					mFileByte = mFileByte + 2;

					// CallbackAddress - 21 byte
					// BRFCDR.CallbackAddress = "";
					// for(int i=mFileByte;i<=mFileByte+21;i++)
					// BRFCDR.CallbackAddress = BRFCDR.CallbackAddress +
					// (char)mBuffer[i];
					// mLength=0;
					// mLength=BRFCDR.CallbackAddress.indexOf('\0');
					// if (mLength> 0)
					// BRFCDR.CallbackAddress =
					// BRFCDR.CallbackAddress.substring(0,mLength);
					mFileByte = mFileByte + 21;

					// Subparameter - 24 byte
					// BRFCDR.Subparameter = "";
					// for(int i=mFileByte;i<=mFileByte+24;i++)
					// BRFCDR.Subparameter = BRFCDR.Subparameter +
					// (char)mBuffer[i];
					// mLength=0;
					// mLength=BRFCDR.Subparameter.indexOf('\0');
					// if (mLength> 0)
					// BRFCDR.Subparameter =
					// BRFCDR.Subparameter.substring(0,mLength);
					mFileByte = mFileByte + 24;

					// AlphabetIndicator - 1 byte
					// BRFCDR.AlphabetIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// LanguageIndicator - 1 byte
					// BRFCDR.LanguageIndicator=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// SSN - 1 byte
					BRFCDR.SSN = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// DPC - 4 byte
					// BRFCDR.DPC = fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// IMSI - 21 byte
					// BRFCDR.IMSI = "";
					// for (int i = mFileByte; i <= mFileByte + 21; i++)
					// BRFCDR.IMSI = BRFCDR.IMSI + (char) mBuffer[i];
					// mLength = 0;
					// mLength = BRFCDR.IMSI.indexOf('\0');
					// if (mLength > 0)
					// BRFCDR.IMSI = BRFCDR.IMSI.substring(0, mLength);
					mFileByte = mFileByte + 21;

					// OriginatingMSC - 1 byte
					// BRFCDR.OriginatingMSC=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ReservedForEndhancement1 - 2 byte
					// BRFCDR.ReservedForEndhancement1 =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]);
					mFileByte = mFileByte + 2;

					// OriginatingMSCPointCode - 4 byte
					// BRFCDR.OriginatingMSCPointCode =
					// Global.fixSignedByte(mBuffer[mFileByte]) +
					// Global.fixSignedByte(mBuffer[mFileByte + 1]) +
					// Global.fixSignedByte(mBuffer[mFileByte + 2]) +
					// Global.fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// OriginatingGroup - 1 byte
					BRFCDR.OriginatingGroup = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;
					if (BRFCDR.OriginatingGroup == 3) {
						mRecGSM++;
					} else if (BRFCDR.OriginatingGroup == 1) {
						mRecSMPP++;
					} else {
						mRecOther++;
					}
					// ValidationType - 1 byte
					// BRFCDR.ValidationType=fixSignedByte(mBuffer[mFileByte]);
					mFileByte = mFileByte + 1;

					// ReservedForEndhancement2 - 2 byte
					// BRFCDR.ReservedForEndhancement2 =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]);
					mFileByte = mFileByte + 2;

					// BillingSequenceNumber - 4 byte
					// BRFCDR.BillingSequenceNumber =
					// fixSignedByte(mBuffer[mFileByte]) +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) +
					// fixSignedByte(mBuffer[mFileByte + 3]);
					mFileByte = mFileByte + 4;

					// SM - 257 byte
					// BRFCDR.SM = "";
					// for (int i = mFileByte; i <= mFileByte + BRFCDR.TextSize
					// - 1;
					// i++)
					// BRFCDR.SM = BRFCDR.SM + (char) mBuffer[i];
					mFileByte = mFileByte + 257;

					// ReservedForUse - 3 byte
					// BRFCDR.ReservedForUse = fixSignedByte(mBuffer[mFileByte])
					// +
					// fixSignedByte(mBuffer[mFileByte + 1]) +
					// fixSignedByte(mBuffer[mFileByte + 2]) ;
					mFileByte = mFileByte + 3;

					// End of record

					mRecConvert++;
					if (cdrfileParam.ChargeCDRFile) {
						appendValue("SMSC");
						appendValue(
								dtfm.format(new java.util.Date(Global.convertTomiliseconds(BRFCDR.BillingTimeByte))));
						appendValue(BRFCDR.OriginatorAddress);
						appendValue(BRFCDR.DestinationAddress);
						appendValue(dtfm.format(
								new java.util.Date(Global.convertTomiliseconds(BRFCDR.MessageReceiveTimeByte))));
						appendValue(String.valueOf(BRFCDR.Status));
						appendValue(String.valueOf(BRFCDR.TextSize));
						appendValue(String.valueOf(BRFCDR.NumberOfDeliveryAttemps));
						appendValue(String.valueOf(BRFCDR.StatusReportsGenerated));
						appendValue(BRFCDR.ClientName);
						appendValue(String.valueOf(BRFCDR.MessageType));
						appendValue(String.valueOf(BRFCDR.OriginatingMSC));
						appendValue(String.valueOf(BRFCDR.OriginatingGroup));
						fileConvert.addText(mStrValues);
						mStrValues = "";
					} else {
						mRecN++;

						mStrValues = mRecN + "|" + pCenterID + "|" + "SMS" + "|" + "|" + "|" + "|" + "|"
								+ dtfm.format(new java.util.Date(Global.convertTomiliseconds(BRFCDR.BillingTimeByte)))
								+ "|" + BRFCDR.OriginatorAddress + "|" + BRFCDR.DestinationAddress + "|"
								+ dtfm.format(
										new java.util.Date(Global.convertTomiliseconds(BRFCDR.MessageReceiveTimeByte)))
								+ "|" + String.valueOf(BRFCDR.Status) + "|" + String.valueOf(BRFCDR.TextSize) + "|"
								+ String.valueOf(BRFCDR.NumberOfDeliveryAttemps) + "|" // +
																						// chargeResult.strPO_CODE
																						// +,
																						// chargeResult.dblTaxAir
																						// +,
																						// chargeResult.dblTaxIdd
																						// +,
																						// chargeResult.dblTaxSer
																						// +
								+ String.valueOf(BRFCDR.StatusReportsGenerated) + "|" + BRFCDR.ClientName + "|"
								+ String.valueOf(BRFCDR.MessageType) + "|" + String.valueOf(BRFCDR.OriginatingMSC) + "|"
								+ String.valueOf(BRFCDR.OriginatingGroup) + "|" + BRFCDR.SSN;
						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}
				writeLogFile("         - GSM               : " + Global.rpad(Integer.toString(mRecGSM), 6, " "));
				writeLogFile("         - SMPP              : " + Global.rpad(Integer.toString(mRecSMPP), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecGSM + mRecSMPP;
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_smo=" + mRecGSM + ",rec_smt=" + mRecSMPP + ",rec_other="
							+ mRecOther + ",rec_convert=" + mRecConvert + " WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_smo=" + mRecGSM + ",rec_smt=" + mRecSMPP + ",rec_other="
							+ mRecOther + ",rec_convert=" + mRecConvert + " WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert ALCATEL : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileCDR.close();
					fileCDR = null;
					fileConvert.closeFile();
					fileConvert = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	} // End class ConvertSMSC

	class ConvertRTPV {

		protected StructRTPV RTPVCDR = new StructRTPV();
		protected int mEncapsulationLength = 0;
		protected int mFeature = 0;
		protected int mSubFeature = 0;
		protected int mType = 0;
		protected int mSubType = 0;
		protected int mStktVarParLength = 0;
		protected int mEleLength = 0;
		protected String mEleValue = "";
		protected int mRet = 0;
		protected int mEventLength = 0;
		protected String mClass = "";
		protected String mObject = "";
		protected String mStartDateTime = "";
		protected int mValueLength = 0;

		private void convertRTPVFile() {
			int mByteN = 0;

			mRecConvert++;
			while (mByteN < mRecLength) {
				// header
				RTPVCDR.Header = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				mStktVarParLength = 0;
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 128) {
					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mStktVarParLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {
					mStktVarParLength = mLength;
				}
				for (int mEn = 1; mEn <= mStktVarParLength; mEn++) {
					mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					if ("a0".compareTo(mValue) == 0) { // Call Ticket
						mByteN += 2; // bo qua 1 byte length va 1 byte TYPE
						mEn += 2;
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						RTPVCDR.Header = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						mEn++;
					} else if ("a1".compareTo(mValue) == 0) { // Service ID
						mByteN += 2; // bo qua 1 byte length va 1 byte TYPE
						mEn += 2;
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							RTPVCDR.GlobalServiceIdentifier += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mEn++;
						}
					} else { // Stkt-element data
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						if (mLength > 128) {
							mRet = mLength - 128;
							mEleLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mEleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
										* Math.pow(256, (mRet - i));
								mByteN++;
								mEn++;
							}
						} else {
							mEleLength = mLength;
						}
						// Content Stkt-Ele
						for (int mEle = 1; mEle <= mEleLength; mEle++) {
							mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mEn++;

							mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							mEn++;
							mEle++;
							if ("a0".compareTo(mValue) == 0) { // Call data
								mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
								mEn++;
								mEle++;
								if (mValue.substring(1).compareTo("0") == 0) { // Stkt-tag
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;

									// content Feature
									// Type
									mFeature = 0;
									mEleValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 1; i <= mLength; i++) {
										mFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
												* Math.pow(256, (mLength - i));
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubFeature
									// Type
									mSubFeature = 0;
									mEleValue = Global.HexToDecimal(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content Type
									// Type
									mType = 0;
									mEleValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubType
									// Type
									mSubType = 0;
									mEleValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}

									// octet string DUMP
									mEleValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									mValue = "";
									for (int i = 0; i < mLength; i++) {
										mValue += (char) (mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									mEleValue = mFeature + "." + mSubFeature + "." + mType + "." + mSubType;

									if (mEleValue.compareTo("1.2.1.5") == 0) { // StartDateTime
																				// Process
										mStartDateTime = mValue;
									} else if (mEleValue.compareTo("3100.2.34.3") == 0) { // StartDateTime
										RTPVCDR.CallStartDateTime = mValue;
									} else if (mEleValue.compareTo("3100.2.10.1") == 0) { // Format
																							// of
																							// Calling
																							// Number
																							// INCDR.FmtOfCalling
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.19.2") == 0) { // Calling
																							// Number
										RTPVCDR.TagCallingNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.11.1") == 0) { // Format
																							// of
																							// Called
																							// Number
																							// INCDR.FmtOfCalled
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.11.2") == 0) // Called
									// Number
									{
										// INCDR.TagCalledNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.12.1") == 0) { // Format
																							// of
																							// Translated
																							// Number
																							// INCDR.FmtOfTranslatedNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.12.2") == 0) { // Translated
																							// Number
																							// INCDR.TagTranslateNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.13.1") == 0) { // Call
																							// cost
																							// INCDR.TagCallCost
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.34.1") == 0) { // End
																							// DateTime
																							// INCDR.CallEndDateTime1
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.14.2") == 0) { // Duration
																							// INCDR.TagCallDuration1
																							// =
																							// Global.TimeToSeconds(mValue);
									} else if (mEleValue.compareTo("3100.2.22.1") == 0) { // Call
																							// Type
										RTPVCDR.TagCallType = mValue;
										if (RTPVCDR.TagCallType.compareTo("1") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("5") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("128") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("129") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("130") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("131") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("132") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("133") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("134") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("10") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "IC";
											mRecIC++;
										} else if (RTPVCDR.TagCallType.compareTo("11") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "IC";
											mRecIC++;
										} else if (RTPVCDR.TagCallType.compareTo("20") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "DV";
											mRecDivert++;
										} else if (RTPVCDR.TagCallType.compareTo("21") == 0) {
											RTPVCDR.RecordType = "SMS";
											RTPVCDR.CallType = "SMO";
											mRecSMO++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("192") == 0) {
											RTPVCDR.RecordType = "CALL";
											RTPVCDR.CallType = "OG";
											mRecOG++;
										} else if (RTPVCDR.TagCallType.compareTo("193") == 0) {
											RTPVCDR.RecordType = "REFIL";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											;
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
											// RTPVCDR.CallEndDateTime1 = "";
										} else if (RTPVCDR.TagCallType.compareTo("208") == 0) {
											RTPVCDR.RecordType = "USSD";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											;
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("209") == 0) {
											RTPVCDR.RecordType = "USSD";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											;
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("210") == 0) {
											RTPVCDR.RecordType = "USSD";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											;
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("224") == 0) {
											RTPVCDR.RecordType = "DAILY";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("240") == 0) {
											RTPVCDR.RecordType = "DAILY";
											RTPVCDR.CallType = Global.DecToHexa(RTPVCDR.TagCallType);
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else if (RTPVCDR.TagCallType.compareTo("300") == 0) {
											RTPVCDR.RecordType = "RTEC";
											RTPVCDR.CallType = RTPVCDR.TagCallType;
											mRecOther++;
											RTPVCDR.TagCallDuration1 = 0;
										} else {
											mRecOther++;
											RTPVCDR.RecordType = "OTHER";
											mByteN = mRecLength;
											mEle = mRecLength;
											mEn = mRecLength;
										}
									} else if (mEleValue.compareTo("3100.2.22.2") == 0) // Teleservice
									// Indicator
									{
										RTPVCDR.TeleserviceIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.22.3") == 0) // Network
									// Indicator
									{
										RTPVCDR.NetworkCauseResultIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.22.4") == 0) // IN
									// Service
									// Indicator
									{
										RTPVCDR.INServiceResultIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.23.1") == 0) { // IMSI
										RTPVCDR.TagIMSI = mValue;
									} else if (mEleValue.compareTo("3100.2.24.1") == 0) { // Remain
																							// credit
																							// RTPVCDR.TagRemainningCredit
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.24.7") == 0) { // Bonus
																							// credit
																							// RTPVCDR.TagBonnusCredit
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.26.1") == 0) { // refill
																							// mean
										RTPVCDR.TagReFill_ScratchType = mValue;
									} else if (mEleValue.compareTo("3100.2.26.2") == 0) // number
									// used
									// for
									// refill
									{
										RTPVCDR.TagReFill_ScratchNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.26.3") == 0) { // refill
																							// among
										RTPVCDR.TagReFill_ScratchValue = Integer.parseInt(mValue);
									} else if (mEleValue.compareTo("3100.2.27.1") == 0) // discarded
									// credit
									{
										// RTPVCDR.TagDiscardedCredit = mValue;
									} else if (mEleValue.compareTo("3100.2.36.1") == 0) // charging
									// class
									// number
									{
										// RTPVCDR.TagChargingClassNumber =
										// mValue;
									} else if (mEleValue.compareTo("3100.2.37.1") == 0) // Specific
									// charging
									// indicator
									{
										// RTPVCDR.TagSpecificChargingIndicator
										// = mValue;
									} else if (mEleValue.compareTo("3100.2.39.1") == 0) // Specific
									// charging
									// indicator
									{
										// RTPVCDR.TagPeriodicAutomaticRefill =
										// mValue;
									} else if (mEleValue.compareTo("3100.2.33.2") == 0) // location
									// number
									{
										// RTPVCDR.TagLocationNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.44.1") == 0) // previous
									// account
									// profile
									{
										// RTPVCDR.TagAccountProfileModification
										// =mValue;
									} else if (mEleValue.compareTo("3100.2.46.1") == 0) // format
									// of
									// original
									// called
									// number
									{
										RTPVCDR.FmtOfOriginalCalled = mValue;
									} else if (mEleValue.compareTo("3100.2.46.2") == 0) // original
									// called
									// number
									{
										// RTPVCDR.TagOriginalCalledNumber
										// =mValue;
									} else if (mEleValue.compareTo("3100.2.70.1") == 0) { // CONTENT
																							// PROVIDER
																							// ID
																							// INCDR.TagOriginalCalledNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.70.2") == 0) { // CONTENT
																							// PROVIDER
																							// TRANSACTION
																							// ID
																							// INCDR.TagOriginalCalledNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.70.3") == 0) { // Price
																							// INCDR.TagOriginalCalledNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.70.4") == 0) { // CURRENCY
																							// INCDR.TagOriginalCalledNumber
																							// =
																							// mValue;
									} else if (mEleValue.compareTo("3100.2.70.5") == 0) { // Bonus
																							// INCDR.TagOriginalCalledNumber
																							// =
																							// mValue;
									}
									// else
									// //System.out.println(mEleValue + " - " +
									// mValue);
								}
							} else if ("a1".compareTo(mValue) == 0) { // Call
																		// event
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;
								/*
								 * mValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++;
								 *
								 * mEventLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; for (int j = 0; j <
								 * mEventLength; j++) { //content Feature //Type
								 * mFeature = 0; mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; //Content for
								 * (int i = 1; i <= mLength; i++) { mFeature +=
								 * Global.fixSignedByte(mBuffer[mByteN]) *
								 * Math.pow(256, (mLength - i)); mByteN++;
								 * mEn++; mEle++; j++; } //content SubFeature
								 * //Type mSubFeature = 0; mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; //Content for
								 * (int i = 0; i < mLength; i++) { mSubFeature
								 * += Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; } //content
								 * Type //Type mType = 0; mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; //Content for
								 * (int i = 0; i < mLength; i++) { mType +=
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; } //content
								 * SubType //Type mSubType = 0; mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; //Content for
								 * (int i = 0; i < mLength; i++) { mSubType +=
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; }
								 *
								 * //content Value //Type mValue = ""; mEleValue
								 * =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; //Content for
								 * (int i = 0; i < mLength; i++) { mValue +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++; } if
								 * (j < mEventLength) { //octet string DUMP
								 * mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; j++;
								 * //Length mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; j++; mValue = "";
								 * for (int i = 0; i < mLength; i++) { mValue +=
								 * (char) (mBuffer[mByteN]); mByteN++; mEn++;
								 * mEle++; j++; } } }
								 */
								// mEleValue = mFeature + "." + mSubFeature +
								// "." +
								// mType + "." + mSubType;
								// //System.out.println(mEleValue + " - " +
								// mValue);
							} else if ("a2".compareTo(mValue) == 0) { // Stkt-obj
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;
								/*
								 * mValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++;
								 *
								 * //content Class //Type mClass = ""; mEleValue
								 * =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; //Length
								 * mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; //Content for (int i
								 * = 0; i < mLength; i++) { mClass +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; }
								 * //content Object //Type mObject = "";
								 * mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; //Length
								 * mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; //Content for (int i
								 * = 0; i < mLength; i++) { mObject +=
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; } //octet
								 * string DUMP mEleValue =
								 * Global.HexToBCD(Global.fixSignedByte(mBuffer[
								 * mByteN])); mByteN++; mEn++; mEle++; //Length
								 * mLength =
								 * Global.fixSignedByte(mBuffer[mByteN]);
								 * mByteN++; mEn++; mEle++; mValue = ""; for
								 * (int i = 0; i < mLength; i++) { mValue +=
								 * (char) (mBuffer[mByteN]); mByteN++; mEn++;
								 * mEle++; }
								 */
							}
						} // end for element
					} // end if Stkt-element data
				} // End for mStktVarParLength
			} // End while record length
			mFileByte += mByteN;
		}

		// ---------Modified by Nguyen Tien Khai-------//
		private void AnalyseRTPVFile() throws Exception {
			try {
				if (RTPVCDR.CallStartDateTime.compareTo("") != 0) {
					mValue = Global.Format(new java.util.Date(Global.convertDateTimeToLong(RTPVCDR.CallStartDateTime)
							- Global.convertTomiliseconds(RTPVCDR.TagCallDuration1)), "yyyyMMddHHmmss");
					RTPVCDR.CallStartDateTime = mValue;
				}
				if (RTPVCDR.TagCallType.compareTo("193") == 0) {
					RTPVCDR.TagCallDuration1 = 0;
					RTPVCDR.CallEndDateTime1 = "";
					RTPVCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
				} else if (RTPVCDR.TagCallType.compareTo("224") == 0) {
					RTPVCDR.TagCallDuration1 = 0;
					// RTPVCDR.TagCallCost = INCDR.TagPeriodicAutomaticRefill;
					RTPVCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
				} else if (RTPVCDR.TagCallType.compareTo("240") == 0) {
					RTPVCDR.TagCallDuration1 = 0;
					// RTPVCDR.TagCallCost = INCDR.TagPeriodicAutomaticRefill;
					RTPVCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
				} else if (RTPVCDR.TagCallType.compareTo("300") == 0) { // son
																		// moi
																		// them
					RTPVCDR.TagCallDuration1 = 0;
					// RTPVCDR.TagCallCost = INCDR.TagPeriodicAutomaticRefill;
					RTPVCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
				}

				if (RTPVCDR.RecordType.compareTo("OTHER") != 0) {
					if (RTPVCDR.TagCallingNumber.length() > 0) {
						if (RTPVCDR.TagCallingNumber.substring(0, 2).compareTo("84") == 0) {
							RTPVCDR.TagCallingNumber = RTPVCDR.TagCallingNumber.substring(2);
						}
					}
					if (RTPVCDR.CallStartDateTime.compareTo("") == 0) {
						try {
							RTPVCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss",
									"yyyyMMddHHmmss");
						} catch (Exception e) {
							throw e;
						}
					}
				}
			} catch (Exception ex) {
				throw ex;
			}

		}

		// ------------------------------------------//
		protected int RTPVFile(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {

				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mRTPVHeaderCharge);
				} else {
					fileConvert.addText(Global.mRTPVHeaderNoCharge);
				}

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecDivert = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				mEventLength = 0;
				mClass = "";
				mObject = "";
				mStartDateTime = "";
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					if (mConnection != null || mSQL != null) {
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
					}
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;
				while (mFileByte < mFileLength) {
					RTPVCDR.RecordType = "";
					RTPVCDR.CallType = "";
					RTPVCDR.Header = "";
					RTPVCDR.GlobalServiceIdentifier = "";
					RTPVCDR.CallStartDateTime = "";
					RTPVCDR.TagCallingNumber = ""; // 63EA
					// RTPVCDR.TagCalledNumber = ""; // 64EA
					// RTPVCDR.TagTranslateNumber = "";
					// RTPVCDR.TagCallCost = "";
					RTPVCDR.CallEndDateTime1 = "";
					RTPVCDR.TagCallDuration1 = 0;
					RTPVCDR.TagCallType = "";
					// RTPVCDR.TagAccountProfileModification = "";
					RTPVCDR.INServiceResultIndicator = "";
					RTPVCDR.NetworkCauseResultIndicator = "";
					RTPVCDR.TeleserviceIndicator = "";
					// RTPVCDR.TagLocationNumber = "";
					RTPVCDR.TagIMSI = "";
					// RTPVCDR.TagRemainningCredit = "";
					RTPVCDR.TagReFill_ScratchType = "";
					RTPVCDR.TagReFill_ScratchNumber = "";
					RTPVCDR.TagReFill_ScratchValue = 0;
					// RTPVCDR.TagReFill_NumberOfRefill = "";
					// RTPVCDR.TagDiscardedCredit = "";
					// RTPVCDR.TagCallDuration2 = 0;
					// RTPVCDR.CallEndDateTime2 = "";
					// RTPVCDR.TagChargingClassNumber = "";
					// RTPVCDR.TagSpecificChargingIndicator = "";
					// INCDR.TagLocationIndicator = "";
					// RTPVCDR.TagOriginalCalledNumber = "";
					// RTPVCDR.TagBonnusCredit = "";
					RTPVCDR.FmtOfCalling = "";
					RTPVCDR.FmtOfCalled = "";
					RTPVCDR.FmtOfTranslatedNumber = "";
					RTPVCDR.FmtOfOriginalCalled = "";
					// RTPVCDR.TagPeriodicAutomaticRefill = "";
					RTPVCDR.CallingOrg = "";
					RTPVCDR.CalledOrg = "";
					mRecLength = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]));
					mFileByte += 4;
					if (mFileByte + mRecLength > mFileLength) {
						if (mConnection != null) {
							mConnection.rollback();
							mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
									+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
									+ "'  WHERE file_id = " + pFileID;
							Global.ExecuteSQL(mConnection, mSQL);
							mConnection.commit();
						} else {
							// System.out.println("mConnection is null");
						}
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}
					convertRTPVFile();

					// ---------Modified by Nguyen Tien Khai-------//
					// Analyzation
					try {
						AnalyseRTPVFile();
					} catch (Exception ex) {
						continue;
					}
					// ------------------------------------------//
					if ((RTPVCDR.RecordType.length() > 0) && (RTPVCDR.RecordType.compareTo("OTHER") != 0)) {
						if (cdrfileParam.ChargeCDRFile) {
							// appendValue(RTPVCDR.RecordType);
							appendValue(RTPVCDR.TagCallingNumber);
							appendValue(RTPVCDR.CallType);
							appendValue(RTPVCDR.TeleserviceIndicator);
							appendValue(RTPVCDR.TagIMSI); // Calling_imsi
							appendValue(RTPVCDR.TagReFill_ScratchType);
							appendValue(String.valueOf(RTPVCDR.TagReFill_ScratchValue));
							appendValue(RTPVCDR.INServiceResultIndicator);
							appendValue(RTPVCDR.NetworkCauseResultIndicator);
							appendValue(RTPVCDR.TagReFill_ScratchNumber);
							appendValue(RTPVCDR.CallStartDateTime);
							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = RTPVCDR.CallStartDateTime.substring(6, 8) + "/"
										+ RTPVCDR.CallStartDateTime.substring(4, 6) + "/"
										+ RTPVCDR.CallStartDateTime.substring(0, 4) + " "
										+ RTPVCDR.CallStartDateTime.substring(8, 10) + ":"
										+ RTPVCDR.CallStartDateTime.substring(10, 12) + ":"
										+ RTPVCDR.CallStartDateTime.substring(12, 14);
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}
							} catch (Exception ex) {
							}
						} else {
							mRecN++;
							mStrValues = mRecN + "|" + RTPVCDR.TagCallingNumber + "|" + RTPVCDR.CallType + "|"
									+ RTPVCDR.TeleserviceIndicator + "|" + RTPVCDR.TagIMSI + "|"
									+ RTPVCDR.TagReFill_ScratchType + "|"
									+ String.valueOf(RTPVCDR.TagReFill_ScratchValue) + "|"
									+ RTPVCDR.INServiceResultIndicator + "|" + RTPVCDR.NetworkCauseResultIndicator + "|"
									+ RTPVCDR.TagReFill_ScratchNumber + "|" + RTPVCDR.CallStartDateTime.substring(6, 8)
									+ "/" + RTPVCDR.CallStartDateTime.substring(4, 6) + "/" // +
																							// RTPVCDR.CallStartDateTime
									+ RTPVCDR.CallStartDateTime.substring(0, 4) + " "
									+ RTPVCDR.CallStartDateTime.substring(8, 10) + ":"
									+ RTPVCDR.CallStartDateTime.substring(10, 12) + ":"
									+ RTPVCDR.CallStartDateTime.substring(12, 14) + "";
							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = RTPVCDR.CallStartDateTime.substring(6, 8) + "/"
										+ RTPVCDR.CallStartDateTime.substring(4, 6) + "/"
										+ RTPVCDR.CallStartDateTime.substring(0, 4) + " "
										+ RTPVCDR.CallStartDateTime.substring(8, 10) + ":"
										+ RTPVCDR.CallStartDateTime.substring(10, 12) + ":"
										+ RTPVCDR.CallStartDateTime.substring(12, 14);
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}

								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						}
					}
				}

				writeLogFile("*");

				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				writeLogFile("***");
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	}

	// End class Convert RTPV
	class ConvertAcounting {

		protected int mListOfInvokeLength = 0;

		public int Acounting(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			RandomAccessFile fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			String mSQL = null;
			int mFileLength = 0;
			int mRecN = 0;
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mByteN = 0;
				mRecN = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecAnnoun = 0;
				mRecDivert = 0;
				mRecTransit = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mListOfInvokeLength = 0;
				mValue = "";
				mRet = 0;
				mRecLength = 0;
				mLength = 0;
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				StructHeader sHeader = new StructHeader();
				StructCounter sCounter = new StructCounter();
				int block = -1;
				while (mFileByte < mFileLength) {
					mByteN = 0;
					String strTemp = "";
					int intTemp = (Global.fixSignedByte(mBuffer[mFileByte]) * 256)
							+ Global.fixSignedByte(mBuffer[mFileByte + 1]);
					sHeader.setTransmissionCheckSum(intTemp + "");
					mFileByte++;
					mFileByte++;
					mByteN++;
					mByteN++;
					if (intTemp == 0) {
						continue;
					}
					sHeader.setName("Accounting Class Data Output heading");
					strTemp = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte]));
					mFileByte++;
					mByteN++;
					sCounter.setName("Record Counter");
					sCounter.setTransmissionCheckSum(intTemp + "");
					sCounter.setTypeOfRecord(strTemp);

					sHeader.setTypeOfRecord(strTemp); // Type of record
					if (strTemp.equals("00") || strTemp.equals("02")) {
						block++;

						// Exchange identity
						strTemp = "";
						for (int i = 0; i < 23; i++) {
							strTemp += (char) (mBuffer[mFileByte]);
							mFileByte++;
							mByteN++;
						}
						sHeader.setExchangeIdentity(strTemp);

						// Source
						strTemp = "";
						for (int i = 0; i < 4; i++) {
							strTemp += (char) (mBuffer[mFileByte]);
							mFileByte++;
							mByteN++;
						}
						sHeader.setSource(strTemp);

						// Total number of used remuneration verification
						// counters
						intTemp = (Global.fixSignedByte(mBuffer[mFileByte]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + 1]);
						sHeader.setTotalNumberOfUsedRemunerationVerificationCounters(intTemp + "");
						mFileByte += 2;
						mByteN += 2;

						// Total number of used remuneration counters
						intTemp = (Global.fixSignedByte(mBuffer[mFileByte]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + 1]);
						sHeader.setTotalNumberOfUsedRemunerationCounters(intTemp + "");
						mFileByte += 2;
						mByteN += 2;

						// year
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setYearTheLastTimePeriodicOutputWasMade(intTemp + "");
						mFileByte++;
						mByteN++;

						// month
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setMonthTheLastTimePeriodicOutputWasMade(intTemp + "");
						mFileByte++;
						mByteN++;

						// day
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setDayTheLastTimePeriodicOutputWasMade(intTemp + "");
						mFileByte++;
						mByteN++;

						// hour
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setHourTheLastTimePeriodicOutputWasMade(intTemp + "");
						mFileByte++;
						mByteN++;

						// minute
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setMinuteTheLastTimePeriodicOutputWasMade(intTemp + "");
						mFileByte++;
						mByteN++;

						// year
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setYearForTheCurrentOutput(intTemp + "");
						mFileByte++;
						mByteN++;

						// month
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setMonthForTheCurrentOutput(intTemp + "");
						mFileByte++;
						mByteN++;

						// day
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setDayForTheCurrentOutput(intTemp + "");
						mFileByte++;
						mByteN++;

						// hour
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setHourForTheCurrentOutput(intTemp + "");
						mFileByte++;
						mByteN++;

						// minute
						intTemp = Global.fixSignedByte(mBuffer[mFileByte]);
						sHeader.setMinuteForTheCurrentOutput(intTemp + "");
						mFileByte++;
						mByteN++;
						mRecN++;

						// create header record
						mStrValues = block + "|" + mRecN + "|" + sHeader.getName() + "|"
								+ sHeader.getTransmissionCheckSum() + "|" + sHeader.getTypeOfRecord() + "|"
								+ sHeader.getExchangeIdentity() + "|" + sHeader.getSource() + "|"
								+ sHeader.getTotalNumberOfUsedRemunerationVerificationCounters() + "|"
								+ sHeader.getTotalNumberOfUsedRemunerationCounters() + "|"
								+ sHeader.getYearTheLastTimePeriodicOutputWasMade() + "|"
								+ sHeader.getMonthTheLastTimePeriodicOutputWasMade() + "|"
								+ sHeader.getDayTheLastTimePeriodicOutputWasMade() + "|"
								+ sHeader.getHourTheLastTimePeriodicOutputWasMade() + "|"
								+ sHeader.getMinuteTheLastTimePeriodicOutputWasMade() + "|"
								+ sHeader.getYearForTheCurrentOutput() + "|" + sHeader.getMonthForTheCurrentOutput()
								+ "|" + sHeader.getDayForTheCurrentOutput() + "|" + sHeader.getHourForTheCurrentOutput()
								+ "|" + sHeader.getMinuteForTheCurrentOutput();
						fileConvert.addText(Global.mHeaderForAcounting);
						fileConvert.addText(mStrValues);
						fileConvert.addText(Global.mCounterForAcounting);
						mStrValues = "";
						mRecConvert++;
					} else if (strTemp.equals("01")) {
						// Accounting class number
						intTemp = (Global.fixSignedByte(mBuffer[mFileByte]) * 256)
								+ Global.fixSignedByte(mBuffer[mFileByte + 1]);
						sCounter.setAccountingClassNumber(intTemp + "");
						mFileByte += 2;
						mByteN += 2;

						// Type of accounting
						strTemp = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte]));
						sCounter.setTypeOfAccounting(strTemp + "");
						mFileByte++;
						mByteN++;

						// Message counter
						sCounter.setMessageCounter(Global.BinToLong(mBuffer, mFileByte, 4) + ""); // Message
																									// counter
						mFileByte += 4;
						mByteN += 4;
						sCounter.setOctetCounter(Global.BinToLong(mBuffer, mFileByte, 4) + ""); // Octet
																								// counter
						mFileByte += 4;
						mByteN += 4;
						// dua dong du lieu counter header vao file
						mRecN++;
						mStrValues = block + "|" + mRecN + "|" + sCounter.getName() + "|"
								+ sCounter.getTransmissionCheckSum() + "|" + sCounter.getTypeOfRecord() + "|"
								+ sCounter.getAccountingClassNumber() + "|" + sCounter.getTypeOfAccounting() + "|"
								+ sCounter.getMessageCounter() + "|" + sCounter.getOctetCounter();
						fileConvert.addText(mStrValues);
						mStrValues = "";
						mRecConvert++;
					}
				}
				writeLogFile("    Total block           : " + Global.rpad(Integer.toString(block + 1), 6, " "));
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				writeLogFile("      -------------------------------");
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT;
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ " WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_transit=" + mRecTransit + ",rec_announ=" + mRecAnnoun
							+ ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert
							+ " WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert ALCATEL : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileCDR.close();
					fileCDR = null;
					fileConvert.closeFile();
					fileConvert = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	} // End class Convert Acounting

	class ConvertMOSMPPG4 {

		protected StructSMPPG4 sSMPPG4 = new StructSMPPG4();
		protected int mListOfInvokeLength = 0;

		private int smppg4MO(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws SQLException, Exception {
			BufferedReader fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			String mSQL = null;
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new BufferedReader(new FileReader(mSource));

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}
				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				fileConvert.addText(Global.mMOHeader);
				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mByteN = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecAnnoun = 0;
				mRecDivert = 0;
				mRecTransit = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mListOfInvokeLength = 0;
				mValue = "";
				mRet = 0;
				mRecLength = 0;
				mLength = 0;
				String line = null;
				String arrLine[] = null;
				sSMPPG4.sequence = "";
				sSMPPG4.msgType = "";
				sSMPPG4.srcAddr = "";
				sSMPPG4.destAddr = "";
				sSMPPG4.submitMultiID = "";
				sSMPPG4.isDLR = "";
				sSMPPG4.status = "";
				sSMPPG4.receiveTime = "";
				sSMPPG4.sendTime = "";
				sSMPPG4.smscId = "";
				sSMPPG4.smppService = "";
				sSMPPG4.errCode = "";
				sSMPPG4.aptemptCount = "";
				sSMPPG4.validity = "";
				sSMPPG4.smscSequenceNumber = "";
				sSMPPG4.statusDetail = "";
				sSMPPG4.smsContent = "";

				while ((line = fileCDR.readLine()) != null) {
					arrLine = line.split("[|]", -1);
					sSMPPG4.sequence = arrLine[0];
					sSMPPG4.msgType = arrLine[1];
					sSMPPG4.srcAddr = arrLine[2];
					sSMPPG4.destAddr = arrLine[5];
					sSMPPG4.submitMultiID = "";
					sSMPPG4.isDLR = arrLine[9];
					sSMPPG4.status = arrLine[10];
					sSMPPG4.receiveTime = arrLine[11];
					sSMPPG4.sendTime = arrLine[12];
					sSMPPG4.smscId = arrLine[13];
					sSMPPG4.smppService = arrLine[15];
					sSMPPG4.errCode = arrLine[18];
					sSMPPG4.aptemptCount = arrLine[19];
					sSMPPG4.validity = arrLine[20];
					sSMPPG4.smscSequenceNumber = arrLine[22];
					sSMPPG4.statusDetail = arrLine[23];
					sSMPPG4.smsContent = arrLine[24];
					// if (sSMPPG4.destAddr.trim().equals("049207"))
					// {
					// String str = arrLine[24];
					// if (str.trim().length() >= 40)
					// {
					// sSMPPG4.smsContent =
					// CryptoVietPayProcess.decryptSMS(str);
					// }
					// else
					// {
					// sSMPPG4.smsContent = str;
					// }
					// }
					// else
					// {
					// sSMPPG4.smsContent = arrLine[24];
					// }

					mRecConvert++;
					String textLine = String.valueOf(mRecConvert) + "|";
					textLine += sSMPPG4.sequence + "|";
					textLine += sSMPPG4.msgType + "|";
					textLine += sSMPPG4.srcAddr + "|";
					textLine += sSMPPG4.destAddr + "|";
					textLine += sSMPPG4.submitMultiID + "|";
					textLine += sSMPPG4.isDLR + "|";
					textLine += sSMPPG4.status + "|";
					textLine += sSMPPG4.receiveTime + "|";
					textLine += sSMPPG4.sendTime + "|";
					textLine += sSMPPG4.smscId + "|";
					textLine += sSMPPG4.smppService + "|";
					textLine += sSMPPG4.errCode + "|";
					textLine += sSMPPG4.aptemptCount + "|";
					textLine += sSMPPG4.validity + "|";
					textLine += sSMPPG4.smscSequenceNumber + "|";
					textLine += sSMPPG4.statusDetail + "|";
					textLine += sSMPPG4.smsContent;
					fileConvert.addText(textLine);
					textLine = "";

				}
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 10, " "));
				writeLogFile("      -------------------------------");
				mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",rec_total="
						+ mRecConvert + ",rec_convert=" + mRecConvert + "WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

			} catch (FileNotFoundException e) {
				// e.printStackTrace();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert SMPPG4 : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					IOUtil = null;
					fileCDR.close();
					fileCDR = null;
					fileConvert.closeFile();
					fileConvert = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	}

	class ConvertMTSMPPG4 {

		protected StructSMPPG4 sSMPPG4 = new StructSMPPG4();
		protected int mListOfInvokeLength = 0;

		private int smppg4MT(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws SQLException, Exception {
			BufferedReader fileCDR = null;
			TextFile fileConvert = new TextFile();
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			String mSQL = null;
			try {
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new BufferedReader(new FileReader(mSource));

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}
				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				fileConvert.addText(Global.mMTHeader);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mByteN = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mListOfInvokeLength = 0;
				mValue = "";
				mRet = 0;
				mRecLength = 0;
				mLength = 0;
				String line = null;
				String arrLine[] = null;
				int count = 0;
				sSMPPG4.sequence = "";
				sSMPPG4.msgType = "";
				sSMPPG4.srcAddr = "";
				sSMPPG4.destAddr = "";
				sSMPPG4.submitMultiID = "";
				sSMPPG4.isDLR = "";
				sSMPPG4.status = "";
				sSMPPG4.receiveTime = "";
				sSMPPG4.sendTime = "";
				sSMPPG4.smscId = "";
				sSMPPG4.smppService = "";
				sSMPPG4.errCode = "";
				sSMPPG4.aptemptCount = "";
				sSMPPG4.validity = "";
				sSMPPG4.smscSequenceNumber = "";
				sSMPPG4.statusDetail = "";
				sSMPPG4.smsContent = "";

				while ((line = fileCDR.readLine()) != null) {
					arrLine = line.split("[|]", -1);
					sSMPPG4.sequence = arrLine[0];
					sSMPPG4.msgType = arrLine[1];
					sSMPPG4.srcAddr = arrLine[2];
					sSMPPG4.destAddr = arrLine[5];
					sSMPPG4.submitMultiID = arrLine[9];
					sSMPPG4.status = arrLine[10];
					sSMPPG4.receiveTime = arrLine[11];
					sSMPPG4.sendTime = arrLine[12];
					sSMPPG4.smscId = arrLine[13];
					sSMPPG4.smppService = arrLine[15];
					sSMPPG4.errCode = arrLine[24];
					sSMPPG4.aptemptCount = arrLine[25];
					sSMPPG4.validity = arrLine[26];
					sSMPPG4.statusDetail = arrLine[29];
					sSMPPG4.smsContent = arrLine[30];
					mRecConvert++;
					String textLine = String.valueOf(mRecConvert) + "|" + sSMPPG4.sequence + "|" + sSMPPG4.msgType + "|"
							+ sSMPPG4.srcAddr + "|" + sSMPPG4.destAddr + "|" + sSMPPG4.submitMultiID + "|"
							+ sSMPPG4.isDLR + "|" + sSMPPG4.status + "|" + sSMPPG4.receiveTime + "|" + sSMPPG4.sendTime
							+ "|" + sSMPPG4.smscId + "|" + sSMPPG4.smppService + "|" + sSMPPG4.errCode + "|"
							+ sSMPPG4.aptemptCount + "|" + sSMPPG4.validity + "|" + sSMPPG4.smscSequenceNumber + "|"
							+ sSMPPG4.statusDetail + "|" + sSMPPG4.smsContent;
					fileConvert.addText(textLine);
					textLine = "";
				}
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 10, " "));
				writeLogFile("      -------------------------------");
				mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",rec_total="
						+ mRecConvert + ",rec_convert=" + mRecConvert + "WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + e.toString()
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.err.println(Global.Format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss")
							+ " : ERROR in module convert SMPPG4 : " + mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					IOUtil = null;
					fileCDR.close();
					fileCDR = null;
					fileConvert.closeFile();
					fileConvert = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}
	}

	class ConvertICC {

		protected StructICC ICCCDR = new StructICC();
		protected int mEncapsulationLength = 0;
		protected int mFeature = 0;
		protected int mSubFeature = 0;
		protected int mType = 0;
		protected int mSubType = 0;
		protected int mStktVarParLength = 0;
		protected int mEleLength = 0;
		protected String mEleValue = "";
		protected int mRet = 0;
		protected int mEventLength = 0;
		protected String mClass = "";
		protected String mObject = "";
		protected String mStartDateTime = "";
		protected int mValueLength = 0;
		protected int accountTree = 0;
		protected java.util.Map<String, Integer> accountTreeMap = new java.util.HashMap<String, Integer>();

		private void convertICC462() {
			int mByteN = 0;

			mRecConvert++;
			while (mByteN < mRecLength) {
				// header
				ICCCDR.Header = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				mStktVarParLength = 0;
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 128) {
					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mStktVarParLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {
					mStktVarParLength = mLength;
				}
				for (int mEn = 1; mEn <= mStktVarParLength; mEn++) {
					mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					if ("a0".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}
					} else if ("a1".compareTo(mValue) == 0) {

						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}
					} else { // Stkt-element data
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						if (mLength > 128) {
							mRet = mLength - 128;
							mEleLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mEleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
										* Math.pow(256, (mRet - i));
								mByteN++;
								mEn++;
							}
						} else {
							mEleLength = mLength;
						}
						// Content Stkt-Ele
						for (int mEle = 1; mEle <= mEleLength; mEle++) {
							mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mEn++;

							mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							mEn++;
							mEle++;
							if ("a0".compareTo(mValue) == 0) { // Call data
								mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
								mEn++;
								mEle++;
								if (mValue.substring(1).compareTo("0") == 0) { // Stkt-tag
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;

									// content Feature
									// Type
									mFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 1; i <= mLength; i++) {
										mFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
												* Math.pow(256, (mLength - i));
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubFeature
									// Type
									mSubFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content Type
									// Type
									mType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubType
									// Type
									mSubType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}

									// octet string DUMP
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									mValue = "";
									String eventVal = "";
									String strLocation = "";
									String strCell = "";

									for (int i = 0; i < mLength; i++) {
										//mValue += (char) (mBuffer[mFileByte + mByteN]);
										mValue += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
										eventVal += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
										// Xu ly cho CountryCode + NetworkCode +
										// LocationCode + Cell Code 27 Oct.
										// type = GPRS
										
										if (i >= 12 && i <= 15) {
											strLocation += (char) (mBuffer[mFileByte + mByteN]);
										} else if (i > 15) {
											strCell += (char) (mBuffer[mFileByte + mByteN]);
										}
										
										// End.
										mByteN++;
										mEn++;
										mEle++;
									}

									 /*if(mValue.trim().equals("106=8254f210000154f21000061001"))
									 {
										System.out.println(Global.Hex2Dec(strLocation));
										System.out.println(Global.Hex2Dec(strCell));
										System.out.println(strLocation +"-"+strCell);
									 }*/
									 
									mEleValue = mFeature + "." + mSubFeature + "." + mType + "." + mSubType;

									if (mEleValue.compareTo("1.2.1.5") == 0) { // StartDateTime
																				// Process
										mStartDateTime = mValue;
									}

									else if (mEleValue.compareTo("3100.2.112.1") == 0) { // Event
																							// time
																							// module
										mStartDateTime = mValue;
										ICCCDR.orgCallStaTime = mValue;
									}

									/*
									 * else if
									 * (mEleValue.compareTo("3100.2.14.1") == 0)
									 * { // StartDateTime
									 * ICCCDR.CallStartDateTime = mValue; }
									 */
									else if (mEleValue.compareTo("3100.2.10.1") == 0) { // Format
																						// of
																						// Calling
																						// Number
										ICCCDR.FmtOfCalling = mValue;
									}
									// Thay doi 11/1/2012.
									// else if
									// (mEleValue.compareTo("3100.2.19.2") == 0
									// || mEleValue.compareTo("3100.2.104.5") ==
									// 0)
									// { // Calling Number
									// ICCCDR.TagCallingNumber = mValue;
									// }

									// org call id for calltype = 189 -
									// 07-Jan-2013
									else if (mEleValue.compareTo("3100.2.19.2") == 0) {
										ICCCDR.TagOriginalCalledNumber1 = mValue;
									} else if (mEleValue.compareTo("3100.2.10.2") == 0) { // Calling
																							// Number
										if (ICCCDR.TagCallingNumber.compareTo("") == 0)
											ICCCDR.TagCallingNumber = mValue;
										else
											ICCCDR.duplicatedNotes += " calling_isdn=" + mValue;
									} else if (mEleValue.compareTo("3100.2.104.5") == 0) {
										if (ICCCDR.TagCallingNumber1.compareTo("") == 0)
											ICCCDR.TagCallingNumber1 = mValue;
										else
											ICCCDR.duplicatedNotes += " calling_isdn=" + mValue;
									} else if (mEleValue.compareTo("3100.2.11.1") == 0) { // Format
																							// of
																							// Called
																							// Number
										ICCCDR.FmtOfCalled = mValue;
									} else if (mEleValue.compareTo("3100.2.11.2") == 0) // Called
									// Number
									{
										ICCCDR.TagCalledNumber = mValue;
									}else if  (mEleValue.compareTo("3100.2.11.9") == 0){
										ICCCDR.routeNumber =  mValue;
									}
									
									else if (mEleValue.compareTo("3100.2.34.1") == 0) { // End
																							// DateTime
										ICCCDR.CallEndDateTime1 = mValue;
									} else if (mEleValue.compareTo("3100.2.34.2") == 0) { // Duration
										ICCCDR.TagCallDuration1 = Global.TimeToSeconds(mValue);// Ring
																								// tone
																								// &
																								// call
																								// duration
									}
									// Rtect Calling Number.

									// RTec Call Cost
									else if (mEleValue.compareTo("3100.2.70.3") == 0) {
										ICCCDR.TagRTecCallCost = mValue;
									} else if (mEleValue.compareTo("3100.2.22.1") == 0) { // Call
																							// Type
										ICCCDR.CallType = mValue;
										if (mValue.compareTo("1") == 0 || mValue.compareTo("5") == 0
												|| mValue.compareTo("155") == 0) {
											mRecOG++;
										} else if (mValue.compareTo("16") == 0 || mValue.compareTo("17") == 0
												|| mValue.compareTo("156") == 0) {
											mRecIC++;
										} else if (mValue.compareTo("20") == 0 || mValue.compareTo("157") == 0) {
											mRecDivert++;
										} else if (mValue.compareTo("2") == 0 || mValue.compareTo("189") == 0) {
											mRecData++;
										} else if (mValue.compareTo("21") == 0) {
											mRecSMO++;
										} else {
											mRecOther++;
											ICCCDR.RecordType = "OTHER";
										}
									}
									// 29-06
									else if (mEleValue.compareTo("3100.2.22.4") == 0) { // Remain
																						// credit
										ICCCDR.InServiceResult = mValue;
									}
									// 19-8.
									else if (mEleValue.compareTo("3100.2.19.5") == 0
											|| mEleValue.compareTo("3100.2.104.2") == 0) { // IMSI
										if (ICCCDR.TagIMSI.compareTo("") == 0)
											ICCCDR.TagIMSI = mValue;
										// else
										// ICCCDR.duplicatedNotes += " IMSI=" +
										// mValue;
									}

									else if (mEleValue.compareTo("3100.2.24.1") == 0) { // Remain
																						// credit
										ICCCDR.TagRemainningCredit = mValue;
									}

									else if (mEleValue.compareTo("3100.2.26.1") == 0) { // refill
																						// mean
										ICCCDR.TagReFill_ScratchType = mValue;
									} else if (mEleValue.compareTo("3100.2.26.2") == 0) // number
																						// used
																						// for
																						// refill
									{
										ICCCDR.TagReFill_ScratchNumber = mValue;
									}
									// 23-8 old field la 26.3
									else if (mEleValue.compareTo("3100.2.135.1") == 0) { // refill
																							// among
										/*
										 * // datnh, 2014.04.17, do co nhieu ban
										 * ghi, chi lay ban ghi dau tien if
										 * (ICCCDR.TagReFill_ScratchValue == 0)
										 * { ICCCDR.TagReFill_ScratchValue =
										 * Integer.parseInt(mValue); }
										 */
										// datnh, 2014.04.21, luu 2 gia tri a-b
										if (ICCCDR.TagReFill_ScratchValue.equals("")) {
											ICCCDR.TagReFill_ScratchValue = mValue;
										} else {
											ICCCDR.TagReFill_ScratchValue += "-" + mValue;
										}
									} else if (mEleValue.compareTo("3100.2.39.1") == 0) // Periodic
																						// automatic
																						// refill
																						// or
																						// withdrawal
									{
										ICCCDR.TagPeriodicAutomaticRefill = mValue;
									} else if (mEleValue.compareTo("3100.2.30.6") == 0) // Fee
																						// Name.
									{
										ICCCDR.feeName = mValue;
									} else if (mEleValue.compareTo("3100.2.33.2") == 0) // location
									// number
									{
										ICCCDR.TagLocationNumber = mValue;
									} else if (mEleValue.compareTo("3100.2.124.9") == 0) // Bundle
																							// unit
									{
										ICCCDR.bunldeUnit = mValue;
									} else if (mEleValue.compareTo("3100.2.128.1") == 0) {
										ICCCDR.countryCode = String.valueOf(mValue) + "-";
									} else if (mEleValue.compareTo("3100.2.128.2") == 0) {
										ICCCDR.networkCode = String.valueOf(mValue) + "-";
									} else if (mEleValue.compareTo("3100.2.128.3") == 0) {
										ICCCDR.nsl_lac = String.valueOf(Global.Hex2Dec(mValue)) + "-";
									}

									else if (mEleValue.compareTo("3100.2.128.4") == 0) {
										ICCCDR.nsl_ci = String.valueOf(Global.Hex2Dec(mValue));
									} else if (mEleValue.compareTo("3100.2.97.1") == 0) {
										ICCCDR.sgsnAddress = mValue;
									} else if (mEleValue.compareTo("3100.2.117.3") == 0) {
										ICCCDR.zoneOrgArea = mValue;
									} else if (mEleValue.compareTo("3100.2.117.4") == 0) {
										ICCCDR.zoneDestArea = mValue;
									}
									// 4 Jun 2012
									else if (mEleValue.compareTo("3100.2.70.7") == 0) {
										ICCCDR.TranDesc = mValue;
									}

									// 27-10
									else if (mEleValue.compareTo("3100.2.70.15") == 0) {
										ICCCDR.nsl_lac = Global.Hex2Dec(strLocation) + "-";
										ICCCDR.nsl_ci = Global.Hex2Dec(strCell) + "";
									}

									else if (mEleValue.compareTo("3100.2.124.6") == 0) {
										switch (accountTree) {
										case 1:
											ICCCDR.limitDateKMDK1Bucket = mValue;
											break;
										case 2:
											ICCCDR.limitDateKMDK2Bucket = mValue;
											break;
										case 3:
											ICCCDR.limitDateKMDK3Bucket = mValue;
											break;
										case 4:
											ICCCDR.limitDateKM1Bucket = mValue;
											break;
										case 5:
											ICCCDR.limitDateKM2Bucket = mValue;
											break;
										case 6:
											ICCCDR.limitDateKM3Bucket = mValue;
											break;
										case 7:
											ICCCDR.limitDateKMBucket = mValue;
											break;
										case 8:
											ICCCDR.limitDateDKBucket = mValue;
											break;
										case 9:
											ICCCDR.limitDatePacketBucket = mValue;
											break;
										case 10:
											ICCCDR.limitDatePacketOPBucket = mValue;
											break;
										case 11:
											ICCCDR.bundleLMLimitDate = mValue;
											break;
										case 12:
											ICCCDR.bundleCLMLimitDate = mValue;
											break;
										case 13:
											ICCCDR.bundleVNPT1LimitDate = mValue;
											break;
										case 14:
											ICCCDR.bundleCredit1LimitDate = mValue;
											break;
										case 15:
											ICCCDR.bonusKM2TLimitDate = mValue;
											break;
										case 16:
											ICCCDR.bonusKM3TLimitDate = mValue;
											break;
										case 17:
											ICCCDR.bundleVOICETHLimitDate = mValue;
											break;
										case 18:
											ICCCDR.bonusKM1TLimitDate = mValue;
											break;
										case 19:
											ICCCDR.bundleGPRS0LimitDate = mValue;
											break;
										case 20:
											ICCCDR.bundleWALLET1LimitDate = mValue;
											break;
										case 21:
											ICCCDR.bundleWALLET2LimitDate = mValue;
											break;
										case 22:
											ICCCDR.bundleIRDLimitDate = mValue;
											break;
										case 23:
											ICCCDR.bundleGROUPLimitDate = mValue;
											break;
										case 24:
											ICCCDR.bundleKM99TLimitDate = mValue;
											break;
										case 25:
											ICCCDR.bundleLM1LimitDate = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1LimitDate = mValue;
											break;

										default:
											break;
										}

										// Tien.
										// Tai khoan khuyen mai dinh ky.
										/*
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK1") == 0) {
										 * ICCCDR.limitDateKMDK1Bucket = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK2") == 0) {
										 * ICCCDR.limitDateKMDK2Bucket = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS2") == 0) {
										 * ICCCDR.limitDateKMDK3Bucket = mValue;
										 * } //Tai khoan khuyen mai. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM1") == 0) {
										 * ICCCDR.limitDateKM1Bucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2") == 0) {
										 * ICCCDR.limitDateKM2Bucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS") == 0) {
										 * ICCCDR.limitDateKM3Bucket = mValue; }
										 * //San luong. //Thoai else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_KM") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_KM") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS_KM") == 0)
										 * { ICCCDR.limitDateKMBucket = mValue;
										 * } // Tai khoan san luong them GPRS4 -
										 * 07-Jan - 2013 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE2") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMSPack") == 0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS2") == 0 ) {
										 * ICCCDR.limitDateDKBucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_0") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("Subsc_SMS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS") == 0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mGPRS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS4") == 0) {
										 * ICCCDR.limitDatePacketBucket =
										 * mValue; } else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_OP") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_OP") == 0) {
										 * ICCCDR.limitDatePacketOPBucket =
										 * mValue; } // Nguyen Tien Khai - add
										 * tags for VOICE_LM or SMS_LM else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS_LM")==0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_LM")==0){
										 * ICCCDR.bundleLMLimitDate= mValue; //
										 * Nguyen Tien Khai - add tags for
										 * VOICE_CLM thay VOICE_CLM -> VOICE_PKG
										 * (07-Jan-2013) }else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT_0")==0){
										 * ICCCDR.bundleCLMLimitDate= mValue; }
										 * // VOICE_PKG1 -> VNPT1. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG1") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT1_0") ==
										 * 0){ ICCCDR.bundleVNPT1LimitDate =
										 * mValue; } //CREDIT1 ->CREDIT1 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("CREDIT1") == 0){
										 * ICCCDR.bundleCredit1LimitDate =
										 * mValue; } else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2T") == 0){
										 * ICCCDR.bonusKM2TLimitDate = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM3T") == 0){
										 * ICCCDR.bonusKM3TLimitDate = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_TH") ==
										 * 0){ ICCCDR.bundleVOICETHLimitDate =
										 * mValue; }
										 */

									}

									else if (mEleValue.compareTo("3100.2.124.4") == 0) {
										switch (accountTree) {
										case 1:
											ICCCDR.allocatedKMDK1Bucket = mValue;
											break;
										case 2:
											ICCCDR.allocatedKMDK2Bucket = mValue;
											break;
										case 3:
											ICCCDR.allocatedKMDK3Bucket = mValue;
											break;
										case 4:
											ICCCDR.allocatedKM1Bucket = mValue;
											break;
										case 5:
											ICCCDR.allocatedKM2Bucket = mValue;
											break;
										case 6:
											ICCCDR.allocatedKM3Bucket = mValue;
											break;
										case 7:
											ICCCDR.allocatedKMBucket = mValue;
											break;
										case 8:
											ICCCDR.allocatedDKBucket = mValue;
											break;
										case 9:
											ICCCDR.allocatedPacketBucket = mValue;
											break;
										case 10:
											ICCCDR.allocatedPacketOPBucket = mValue;
											break;
										case 11:
											ICCCDR.bundleLMAllocated = mValue;
											break;
										case 12:
											ICCCDR.bundleCLMAllocated = mValue;
											break;
										case 13:
											ICCCDR.bundleVNPT1Allocated = mValue;
											break;
										case 14:
											ICCCDR.bundleCredit1Allocated = mValue;
											break;
										case 15:
											ICCCDR.bonusKM2TAllocated = mValue;
											break;
										case 16:
											ICCCDR.bonusKM3TAllocated = mValue;
											break;
										case 17:
											ICCCDR.bundleVOICETHAllocated = mValue;
											break;
										case 18:
											ICCCDR.bonusKM1TAllocated = mValue;
											break;
										case 19:
											ICCCDR.bundleGPRS0Allocated = mValue;
											break;
										case 20:
											ICCCDR.bundleWALLET1Allocated = mValue;
											break;
										case 21:
											ICCCDR.bundleWALLET2Allocated = mValue;
											break;
										case 22:
											ICCCDR.bundleIRDAllocated = mValue;
											break;
										case 23:
											ICCCDR.bundleGROUPAllocated = mValue;
											break;
										case 24:
											ICCCDR.bundleKM99TAllocated = mValue;
											break;
										case 25:
											ICCCDR.bundleLM1Allocated = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1Allocated = mValue;
											break;

										default:
											break;
										}

										// Tien.
										// Tai khoan khuyen mai dinh ky.
										/*
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK1") == 0) {
										 * ICCCDR.allocatedKMDK1Bucket = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK2") == 0) {
										 * ICCCDR.allocatedKMDK2Bucket = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS2") == 0) {
										 * ICCCDR.allocatedKMDK3Bucket = mValue;
										 * } //Tai khoan khuyen mai. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM1") == 0) {
										 * ICCCDR.allocatedKM1Bucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2") == 0) {
										 * ICCCDR.allocatedKM2Bucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS") == 0) {
										 * ICCCDR.allocatedKM3Bucket = mValue; }
										 * //San luong. //Thoai else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_KM") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_KM") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS_KM") == 0)
										 * { ICCCDR.allocatedKMBucket = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE2") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMSPack") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS2") == 0) {
										 * ICCCDR.allocatedDKBucket = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_0") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("Subsc_SMS") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mGPRS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS4") == 0) {
										 * ICCCDR.allocatedPacketBucket =
										 * mValue; } else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_OP") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_OP") == 0) {
										 * ICCCDR.allocatedPacketOPBucket =
										 * mValue; } // Nguyen Tien Khai - add
										 * tags for VOICE_LM or SMS_LM else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS_LM") == 0){
										 * ICCCDR.bundleLMAllocated= mValue; //
										 * Nguyen Tien Khai - add tags for
										 * VOICE_CLM thay VOICE_CLM = VOICE_PKG
										 * (07-Jan-2013) }else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT_0") == 0){
										 * ICCCDR.bundleCLMAllocated= mValue; }
										 * // VOICE_PKG1 -> VNPT1. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG1") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT1_0") ==
										 * 0){ ICCCDR.bundleVNPT1Allocated =
										 * mValue; } //CREDIT1 ->CREDIT1 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("CREDIT1") == 0){
										 * ICCCDR.bundleCredit1Allocated =
										 * mValue; } else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2T") == 0){
										 * ICCCDR.bonusKM2TAllocated = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM3T") == 0){
										 * ICCCDR.bonusKM3TAllocated = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_TH") ==
										 * 0){ ICCCDR.bundleVOICETHAllocated =
										 * mValue; }
										 */

									} else if (mEleValue.compareTo("3100.2.44.1") == 0) {
										// Modified by Nguyen Tien Khai -
										// 10/12/2012 - duplicated values.
										if (ICCCDR.TagAccountProfileModification.compareTo("") == 0)
											ICCCDR.TagAccountProfileModification = mValue;
										else
											ICCCDR.duplicatedNotes += " acc_profile=" + mValue;

									} else if (mEleValue.compareTo("3100.2.46.1") == 0) {
										ICCCDR.FmtOfOriginalCalled = mValue;
									} else if (mEleValue.compareTo("3100.2.133.1") == 0) {
										ICCCDR.TagOriginalCalledNumberM2U = mValue;
									}

									/*
									 * else if
									 * (mEleValue.compareTo("3100.2.133.1") ==
									 * 0) { ICCCDR.TagOriginalCalledNumber =
									 * mValue; }
									 */
									else if (mEleValue.compareTo("3100.2.46.2") == 0) {
										ICCCDR.TagOriginalCalledNumber = mValue;
									}

									else if (mEleValue.compareTo("3100.2.66.2") == 0) // ChargingID
									{
										ICCCDR.ChargingId = mValue;
									}

									else if (mEleValue.compareTo("3100.2.22.8") == 0) // network
																						// event
																						// type
																						// name
									{
										ICCCDR.eventTypeName = mValue;
									} else if (mEleValue.compareTo("3100.2.40.1") == 0) // Location
																						// indicator.
									{
										ICCCDR.locationIndicator = mValue;
									}

									else if (mEleValue.compareTo("3100.2.24.8") == 0) // crdit
																						// before
																						// trans
									{
										ICCCDR.creditBeforeTrans = mValue;
									} else if (mEleValue.compareTo("3100.2.70.1") == 0) // Network
																						// Element
																						// ID
									{
										ICCCDR.NetEleID = mValue;
									} else if (mEleValue.compareTo("3100.2.70.2") == 0) // Network
																						// Element
																						// Transaction
																						// ID
									{
										ICCCDR.NetEleTranID = mValue;
									} else if (mEleValue.compareTo("3100.2.142.1") == 0) // Duration
									{
										// ICCCDR.usedQuantity1 = mValue;
										String[] temp = mValue.split("\\.");
										ICCCDR.usedQuantity1 = temp[0];
									}
									// new editor data: - 12/01/2011.
									else if (mEleValue.compareTo("3100.2.100.1") == 0) // SubScriber
																						// Type.
									{
										// Modified by Nguyen Tien Khai -
										// 10/12/2012 - duplicated values.
										if (ICCCDR.subScriberType.compareTo("") == 0)
											ICCCDR.subScriberType = mValue;
										else
											ICCCDR.duplicatedNotes += " SubScriber_type=" + mValue;
									} else if (mEleValue.compareTo("3100.2.136.2") == 0) // Destination
																							// of
																							// the
																							// Charging
																							// Matrix.
									{
										ICCCDR.DestCharingMatrix = mValue;
									}

									else if (mEleValue.compareTo("3100.2.124.1") == 0) // Bundle
																						// Identifier.
									{
										ICCCDR.bundleIdentifier = mValue;
										try {
											accountTree = accountTreeMap.get(ICCCDR.bundleIdentifier).intValue();
										} catch (Exception ex) {
											accountTree = 0;
										}

										// bundle name
										switch (accountTree) {
										case 25:
											ICCCDR.bundleLM1Name = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1Name = mValue;
											break;
										case 27:
											ICCCDR.bundleDATA6Name = mValue;
											break;
										case 28:
											ICCCDR.bundleKMKNDLName = mValue;
											break;
										case 29:
											ICCCDR.bundleLM_DLName = mValue;
											break;
										case 30:
											ICCCDR.bundleDATA5Name = mValue;
											break;
										case 31:
											ICCCDR.bundleCSName = mValue;
											break;
										case 32:
											ICCCDR.bundleWifiName = mValue;
											break;
										case 33:
											ICCCDR.bundleDataDemName = mValue;
											break;
										case 34:
											ICCCDR.bundleMLoyaltyName = mValue;
											break;
										case 35:
											ICCCDR.bonusKM4Name = mValue;
											break;
										case 36:
											ICCCDR.bonusKM4TName = mValue;
											break;
										case 37:
											ICCCDR.bonusKMDK4Name = mValue;
											break;
										case 38:
											ICCCDR.bundleTHOAILM1Name = mValue;
											break;
										case 39:
											ICCCDR.bonusIRAName = mValue;
											break;
										case 40:
											ICCCDR.bonusIRBName = mValue;
											break;
										case 41:
											ICCCDR.bonusIRVSName = mValue;
											break;
										case 42:
											ICCCDR.bonusIRSMSName = mValue;
											break;
										case 43:
											ICCCDR.bundleVOICE_KM1Name = mValue;
											break;
										case 44:
											ICCCDR.bundleDATA_31Name = mValue;
											break;
										case 45:
											ICCCDR.bundleSMSRefillName = mValue;
											break;
										case 46:
											ICCCDR.bundleVIDEOName = mValue;
											break;
										case 47:
											ICCCDR.bundleWALLET3Name = mValue;
											break;
										case 48:
											ICCCDR.bundleRMName = mValue;
											break;
										case 49:
											ICCCDR.bundleSMS3Name = mValue;
											break;
										case 50:
											ICCCDR.bundleDataZ1Name = mValue;
											break;
										case 51:
											ICCCDR.bundleDataZ2Name = mValue;
											break;
										case 52:
											ICCCDR.bundleDataZ3Name = mValue;
											break;
										case 53:
											ICCCDR.bundleLNName = mValue;
											break;
										case 54:
											ICCCDR.bonusTK1Name = mValue;
											break;
										case 55:
											ICCCDR.bonusKM1VName = mValue;
											break;
										case 56:
											ICCCDR.bonusKM2VName = mValue;
											break;
										case 57:
											ICCCDR.bonusKM3VName = mValue;
											break;
										case 58:
											ICCCDR.bonusKM4VName = mValue;
											break;
										case 59:
											ICCCDR.bonusCredit2Name = mValue;
											break;
										case 60:
											ICCCDR.bonusCredit3Name = mValue;
											break;
										case 61:
											ICCCDR.bundleDATA_LNName = mValue;
											break;
										case 62:
											ICCCDR.bundleDATA_VCName = mValue;
											break;

										default:
											break;
										}
									} else if (mEleValue.compareTo("3100.2.70.8") == 0) // service
																						// id.
									{
										ICCCDR.serviceId = mValue;
									} else if (mEleValue.compareTo("3100.2.124.2") == 0) // REMAINING
																							// UNITS
									{
										switch (accountTree) {
										case 1:
											ICCCDR.consumedKMDK1Unit = mValue;
											break;
										case 2:
											ICCCDR.consumedKMDK2Unit = mValue;
											break;
										case 3:
											ICCCDR.consumedKMDK3Unit = mValue;
											break;
										case 4:
											ICCCDR.consumedKM1Unit = mValue;
											break;
										case 5:
											ICCCDR.consumedKM2Unit = mValue;
											break;
										case 6:
											ICCCDR.consumedKM3Unit = mValue;
											break;
										case 7:
											ICCCDR.consumedKMUnit = mValue;
											break;
										case 8:
											ICCCDR.consumedDKUnit = mValue;
											break;
										case 9:
											ICCCDR.consumedPacketUnit = mValue;
											break;
										case 10:
											ICCCDR.consumedPacketOPUnit = mValue;
											break;
										case 11:
											ICCCDR.bundleLMConsumed = mValue;
											break;
										case 12:
											ICCCDR.bundleCLMConsumed = mValue;
											break;
										case 13:
											ICCCDR.bundleVNPT1Consumed = mValue;
											break;
										case 14:
											ICCCDR.bundleCredit1Consumed = mValue;
											break;
										case 15:
											ICCCDR.bonusKM2TConsumed = mValue;
											break;
										case 16:
											ICCCDR.bonusKM3TConsumed = mValue;
											break;
										case 17:
											ICCCDR.bundleVOICETHConsumed = mValue;
											break;
										case 18:
											ICCCDR.bonusKM1TConsumed = mValue;
											break;

										case 19:
											ICCCDR.bundleGPRS0Consumed = mValue;
											break;
										case 20:
											ICCCDR.bundleWALLET1Consumed = mValue;
											break;
										case 21:
											ICCCDR.bundleWALLET2Consumed = mValue;
											break;
										case 22:
											ICCCDR.bundleIRDConsumed = mValue;
											break;
										case 23:
											ICCCDR.bundleGROUPConsumed = mValue;
											break;
										case 24:
											ICCCDR.bundleKM99TConsumed = mValue;
											break;
										case 25:
											ICCCDR.bundleLM1Consumed = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1Consumed = mValue;
											break;
										case 27:
											ICCCDR.bundleDATA6Consumed = mValue;
											break;
										case 28:
											ICCCDR.bundleKMKNDLConsumed = mValue;
											break;
										case 29:
											ICCCDR.bundleLM_DLConsumed = mValue;
											break;
										case 30:
											ICCCDR.bundleDATA5Consumed = mValue;
											break;
										case 31:
											ICCCDR.bundleCSConsumed = mValue;
											break;
										case 32:
											ICCCDR.bundleWifiConsumed = mValue;
											break;
										case 33:
											ICCCDR.bundleDataDemConsumed = mValue;
											break;
										case 34:
											ICCCDR.bundleMLoyaltyConsumed = mValue;
											break;
										case 35:
											ICCCDR.bonusKM4Consumed = mValue;
											break;
										case 36:
											ICCCDR.bonusKM4TConsumed = mValue;
											break;
										case 37:
											ICCCDR.bonusKMDK4Consumed = mValue;
											break;
										case 38:
											ICCCDR.bundleTHOAILM1Consumed = mValue;
											break;
										case 39:
											ICCCDR.bonusIRAConsumed = mValue;
											break;
										case 40:
											ICCCDR.bonusIRBConsumed = mValue;
											break;
										case 41:
											ICCCDR.bonusIRVSConsumed = mValue;
											break;
										case 42:
											ICCCDR.bonusIRSMSConsumed = mValue;
											break;
										case 43:
											ICCCDR.bundleVOICE_KM1Consumed = mValue;
											break;
										case 44:
											ICCCDR.bundleDATA_31Consumed = mValue;
											break;
										case 45:
											ICCCDR.bundleSMSRefillConsumed = mValue;
											break;
										case 46:
											ICCCDR.bundleVIDEOConsumed = mValue;
											break;
										case 47:
											ICCCDR.bundleWALLET3Consumed = mValue;
											break;
										case 48:
											ICCCDR.bundleRMConsumed = mValue;
											break;
										case 49:
											ICCCDR.bundleSMS3Consumed = mValue;
											break;
										case 50:
											ICCCDR.bundleDataZ1Consumed = mValue;
											break;
										case 51:
											ICCCDR.bundleDataZ2Consumed = mValue;
											break;
										case 52:
											ICCCDR.bundleDataZ3Consumed = mValue;
											break;
										case 53:
											ICCCDR.bundleLNConsumed = mValue;
											break;
										case 54:
											ICCCDR.bonusTK1Consumed = mValue;
											break;
										case 55:
											ICCCDR.bonusKM1VConsumed = mValue;
											break;
										case 56:
											ICCCDR.bonusKM2VConsumed = mValue;
											break;
										case 57:
											ICCCDR.bonusKM3VConsumed = mValue;
											break;
										case 58:
											ICCCDR.bonusKM4VConsumed = mValue;
											break;
										case 59:
											ICCCDR.bonusCredit2Consumed = mValue;
											break;
										case 60:
											ICCCDR.bonusCredit3Consumed = mValue;
											break;
										case 61:
											ICCCDR.bundleDATA_LNConsumed = mValue;
											break;
										case 62:
											ICCCDR.bundleDATA_VCConsumed = mValue;
											break;

										default:
											break;
										}

										// Tien.
										// Tai khoan khuyen mai dinh ky.
										/*
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK1") == 0) {
										 * ICCCDR.consumedKMDK1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK2") == 0) {
										 * ICCCDR.consumedKMDK2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS2") == 0) {
										 * ICCCDR.consumedKMDK3Unit = mValue; }
										 * //Tai khoan khuyen mai. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM1") == 0) {
										 * ICCCDR.consumedKM1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2") == 0) {
										 * ICCCDR.consumedKM2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS") == 0) {
										 * ICCCDR.consumedKM3Unit = mValue; }
										 * //San luong. //Thoai else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_KM") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_KM") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS_KM") == 0)
										 * { ICCCDR.consumedKMUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE2") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMSPack") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS2") == 0) {
										 * ICCCDR.consumedDKUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_0") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("Subsc_SMS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS") == 0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mGPRS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS4") == 0) {
										 * ICCCDR.consumedPacketUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_OP") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_OP") == 0) {
										 * ICCCDR.consumedPacketOPUnit = mValue;
										 * } // Nguyen Tien Khai - add tags for
										 * VOICE_LM or SMS_LM else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS_LM") == 0){
										 * ICCCDR.bundleLMConsumed= mValue; //
										 * Nguyen Tien Khai - add tags for
										 * VOICE_CLM -> thay VOICE_CLM =
										 * VOICE_PKG (07-Jan-2013) }else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT_0") == 0){
										 * ICCCDR.bundleCLMConsumed= mValue; }
										 * // VOICE_PKG1 -> VNPT1. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG1") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT1_0") ==
										 * 0){ ICCCDR.bundleVNPT1Consumed =
										 * mValue; } //CREDIT1 ->CREDIT1 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("CREDIT1") == 0){
										 * ICCCDR.bundleCredit1Consumed =
										 * mValue; } else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2T") == 0){
										 * ICCCDR.bonusKM2TConsumed = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM3T") == 0){
										 * ICCCDR.bonusKM3TConsumed = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_TH") ==
										 * 0){ ICCCDR.bundleVOICETHConsumed =
										 * mValue; }
										 */

									} else if (mEleValue.compareTo("3100.2.124.3") == 0) // REMAINING
																							// UNITS
									{
										switch (accountTree) {
										case 1:
											ICCCDR.remainingKMDK1Unit = mValue;
											break;
										case 2:
											ICCCDR.remainingKMDK2Unit = mValue;
											break;
										case 3:
											ICCCDR.remainingKMDK3Unit = mValue;
											break;
										case 4:
											ICCCDR.remainingKM1Unit = mValue;
											break;
										case 5:
											ICCCDR.remainingKM2Unit = mValue;
											break;
										case 6:
											ICCCDR.remainingKM3Unit = mValue;
											break;
										case 7:
											ICCCDR.remainingKMUnit = mValue;
											break;
										case 8:
											ICCCDR.remainingDKUnit = mValue;
											break;
										case 9:
											ICCCDR.remainingPacketUnit = mValue;
											break;
										case 10:
											ICCCDR.remainingPacketOPUnit = mValue;
											break;
										case 11:
											ICCCDR.bundleLMRemaining = mValue;
											break;
										case 12:
											ICCCDR.bundleCLMRemaining = mValue;
											break;
										case 13:
											ICCCDR.bundleVNPT1Remaining = mValue;
											break;
										case 14:
											ICCCDR.bundleCredit1Remaining = mValue;
											break;
										case 15:
											ICCCDR.bonusKM2TRemaining = mValue;
											break;
										case 16:
											ICCCDR.bonusKM3TRemaining = mValue;
											break;
										case 17:
											ICCCDR.bundleVOICETHRemaining = mValue;
											break;
										case 18:
											ICCCDR.bonusKM1TRemaining = mValue;
											break;
										case 19:
											ICCCDR.bundleGPRS0Remaining = mValue;
											break;
										case 20:
											ICCCDR.bundleWALLET1Remaining = mValue;
											break;
										case 21:
											ICCCDR.bundleWALLET2Remaining = mValue;
											break;
										case 22:
											ICCCDR.bundleIRDRemaining = mValue;
											break;
										case 23:
											ICCCDR.bundleGROUPRemaining = mValue;
											break;
										case 24:
											ICCCDR.bundleKM99TRemaining = mValue;
											break;
										case 25:
											ICCCDR.bundleLM1Remaining = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1Remaining = mValue;
											break;
										case 27:
											ICCCDR.bundleDATA6Remaining = mValue;
											break;
										case 28:
											ICCCDR.bundleKMKNDLRemaining = mValue;
											break;
										case 29:
											ICCCDR.bundleLM_DLRemaining = mValue;
											break;
										case 30:
											ICCCDR.bundleDATA5Remaining = mValue;
											break;
										case 31:
											ICCCDR.bundleCSRemaining = mValue;
											break;
										case 32:
											ICCCDR.bundleWifiRemaining = mValue;
											break;
										case 33:
											ICCCDR.bundleDataDemRemaining = mValue;
											break;
										case 34:
											ICCCDR.bundleMLoyaltyRemaining = mValue;
											break;
										case 35:
											ICCCDR.bonusKM4Remaining = mValue;
											break;
										case 36:
											ICCCDR.bonusKM4TRemaining = mValue;
											break;
										case 37:
											ICCCDR.bonusKMDK4Remaining = mValue;
											break;
										case 38:
											ICCCDR.bundleTHOAILM1Remaining = mValue;
											break;
										case 39:
											ICCCDR.bonusIRARemaining = mValue;
											break;
										case 40:
											ICCCDR.bonusIRBRemaining = mValue;
											break;
										case 41:
											ICCCDR.bonusIRVSRemaining = mValue;
											break;
										case 42:
											ICCCDR.bonusIRSMSRemaining = mValue;
											break;
										case 43:
											ICCCDR.bundleVOICE_KM1Remaining = mValue;
											break;
										case 44:
											ICCCDR.bundleDATA_31Remaining = mValue;
											break;
										case 45:
											ICCCDR.bundleSMSRefillRemaining = mValue;
											break;
										case 46:
											ICCCDR.bundleVIDEORemaining = mValue;
											break;
										case 47:
											ICCCDR.bundleWALLET3Remaining = mValue;
											break;
										case 48:
											ICCCDR.bundleRMRemaining = mValue;
											break;
										case 49:
											ICCCDR.bundleSMS3Remaining = mValue;
											break;
										case 50:
											ICCCDR.bundleDataZ1Remaining = mValue;
											break;
										case 51:
											ICCCDR.bundleDataZ2Remaining = mValue;
											break;
										case 52:
											ICCCDR.bundleDataZ3Remaining = mValue;
											break;
										case 53:
											ICCCDR.bundleLNRemaining = mValue;
											break;
										case 54:
											ICCCDR.bonusTK1Remaining = mValue;
											break;
										case 55:
											ICCCDR.bonusKM1VRemaining = mValue;
											break;
										case 56:
											ICCCDR.bonusKM2VRemaining = mValue;
											break;
										case 57:
											ICCCDR.bonusKM3VRemaining = mValue;
											break;
										case 58:
											ICCCDR.bonusKM4VRemaining = mValue;
											break;
										case 59:
											ICCCDR.bonusCredit2Remaining = mValue;
											break;
										case 60:
											ICCCDR.bonusCredit3Remaining = mValue;
											break;
										case 61:
											ICCCDR.bundleDATA_LNRemaining = mValue;
											break;
										case 62:
											ICCCDR.bundleDATA_VCRemaining = mValue;
											break;

										default:
											break;
										}

										/*
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK1") == 0) {
										 * ICCCDR.remainingKMDK1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK2") == 0) {
										 * ICCCDR.remainingKMDK2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS2") == 0) {
										 * ICCCDR.remainingKMDK3Unit = mValue; }
										 * //Tai khoan khuyen mai. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM1") == 0) {
										 * ICCCDR.remainingKM1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2") == 0) {
										 * ICCCDR.remainingKM2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS") == 0) {
										 * ICCCDR.remainingKM3Unit = mValue; }
										 * //San luong. //Thoai else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_KM") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_KM") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS_KM") == 0)
										 * { ICCCDR.remainingKMUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE2") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMSPack") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS2") == 0) {
										 * ICCCDR.remainingDKUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_0") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("Subsc_SMS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS") == 0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mGPRS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS4") == 0) {
										 * ICCCDR.remainingPacketUnit = mValue;
										 * } else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_OP") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_OP") == 0) {
										 * ICCCDR.remainingPacketOPUnit =
										 * mValue; } // Nguyen Tien Khai - add
										 * tags for VOICE_LM or SMS_LM else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS_LM") == 0){
										 * ICCCDR.bundleLMRemaining= mValue; //
										 * Nguyen Tien Khai - add tags for
										 * VOICE_CLM -> thay VOICE_CLM =
										 * VOICE_PKG (07-Jan-2013) }else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT_0") == 0){
										 * ICCCDR.bundleCLMRemaining= mValue; }
										 * // VOICE_PKG1 -> VNPT1. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG1") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT1_0") ==
										 * 0){ ICCCDR.bundleVNPT1Remaining =
										 * mValue; } //CREDIT1 ->CREDIT1 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("CREDIT1") == 0){
										 * ICCCDR.bundleCredit1Remaining =
										 * mValue; }
										 * 
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2T") == 0){
										 * ICCCDR.bonusKM2TRemaining = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM3T") == 0){
										 * ICCCDR.bonusKM3TRemaining = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_TH") ==
										 * 0){ ICCCDR.bundleVOICETHRemaining =
										 * mValue; }
										 */

									} else if (mEleValue.compareTo("3100.2.124.8") == 0) // INITIAL
																							// UNITS
									{
										switch (accountTree) {
										case 1:
											ICCCDR.initialKMDK1Unit = mValue;
											break;
										case 2:
											ICCCDR.initialKMDK2Unit = mValue;
											break;
										case 3:
											ICCCDR.initialKMDK3Unit = mValue;
											break;
										case 4:
											ICCCDR.initialKM1Unit = mValue;
											break;
										case 5:
											ICCCDR.initialKM2Unit = mValue;
											break;
										case 6:
											ICCCDR.initialKM3Unit = mValue;
											break;
										case 7:
											ICCCDR.initialKMUnit = mValue;
											break;
										case 8:
											ICCCDR.initialDKUnit = mValue;
											break;
										case 9:
											ICCCDR.initialPacketUnit = mValue;
											break;
										case 10:
											ICCCDR.initialPacketOPUnit = mValue;
											break;
										case 11:
											ICCCDR.bundleLMInitial = mValue;
											break;
										case 12:
											ICCCDR.bundleCLMInitial = mValue;
											break;
										case 13:
											ICCCDR.bundleVNPT1Initial = mValue;
											break;
										case 14:
											ICCCDR.bundleCredit1Initial = mValue;
											break;
										case 15:
											ICCCDR.bonusKM2TInitial = mValue;
											break;
										case 16:
											ICCCDR.bonusKM3TInitial = mValue;
											break;
										case 17:
											ICCCDR.bundleVOICETHInitial = mValue;
											break;
										case 18:
											ICCCDR.bonusKM1TInitial = mValue;
											break;
										case 19:
											ICCCDR.bundleGPRS0Initial = mValue;
											break;
										case 20:
											ICCCDR.bundleWALLET1Initial = mValue;
											break;
										case 21:
											ICCCDR.bundleWALLET2Initial = mValue;
											break;
										case 22:
											ICCCDR.bundleIRDInitial = mValue;
											break;
										case 23:
											ICCCDR.bundleGROUPInitial = mValue;
											break;
										case 24:
											ICCCDR.bundleKM99TInitial = mValue;
											break;
										case 25:
											ICCCDR.bundleLM1Initial = mValue;
											break;
										case 26:
											ICCCDR.bundleDATA_KM1Initial = mValue;
											break;
										case 27:
											ICCCDR.bundleDATA6Initial = mValue;
											break;
										case 28:
											ICCCDR.bundleKMKNDLInitial = mValue;
											break;
										case 29:
											ICCCDR.bundleLM_DLInitial = mValue;
											break;
										case 30:
											ICCCDR.bundleDATA5Initial = mValue;
											break;
										case 31:
											ICCCDR.bundleCSInitial = mValue;
											break;
										case 32:
											ICCCDR.bundleWifiInitial = mValue;
											break;
										case 33:
											ICCCDR.bundleDataDemInitial = mValue;
											break;
										case 34:
											ICCCDR.bundleMLoyaltyInitial = mValue;
											break;
										case 35:
											ICCCDR.bonusKM4Initial = mValue;
											break;
										case 36:
											ICCCDR.bonusKM4TInitial = mValue;
											break;
										case 37:
											ICCCDR.bonusKMDK4Initial = mValue;
											break;
										case 38:
											ICCCDR.bundleTHOAILM1Initial = mValue;
											break;
										case 39:
											ICCCDR.bonusIRAInitial = mValue;
											break;
										case 40:
											ICCCDR.bonusIRBInitial = mValue;
											break;
										case 41:
											ICCCDR.bonusIRVSInitial = mValue;
											break;
										case 42:
											ICCCDR.bonusIRSMSInitial = mValue;
											break;
										case 43:
											ICCCDR.bundleVOICE_KM1Initial = mValue;
											break;
										case 44:
											ICCCDR.bundleDATA_31Initial = mValue;
											break;
										case 45:
											ICCCDR.bundleSMSRefillInitial = mValue;
											break;
										case 46:
											ICCCDR.bundleVIDEOInitial = mValue;
											break;
										case 47:
											ICCCDR.bundleWALLET3Initial = mValue;
											break;
										case 48:
											ICCCDR.bundleRMInitial = mValue;
											break;
										case 49:
											ICCCDR.bundleSMS3Initial = mValue;
											break;
										case 50:
											ICCCDR.bundleDataZ1Initial = mValue;
											break;
										case 51:
											ICCCDR.bundleDataZ2Initial = mValue;
											break;
										case 52:
											ICCCDR.bundleDataZ3Initial = mValue;
											break;
										case 53:
											ICCCDR.bundleLNInitial = mValue;
											break;
										case 54:
											ICCCDR.bonusTK1Initial = mValue;
											break;
										case 55:
											ICCCDR.bonusKM1VInitial = mValue;
											break;
										case 56:
											ICCCDR.bonusKM2VInitial = mValue;
											break;
										case 57:
											ICCCDR.bonusKM3VInitial = mValue;
											break;
										case 58:
											ICCCDR.bonusKM4VInitial = mValue;
											break;
										case 59:
											ICCCDR.bonusCredit2Initial = mValue;
											break;
										case 60:
											ICCCDR.bonusCredit3Initial = mValue;
											break;
										case 61:
											ICCCDR.bundleDATA_LNInitial = mValue;
											break;
										case 62:
											ICCCDR.bundleDATA_VCInitial = mValue;
											break;

										default:
											break;
										}

										/*
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK1") == 0) {
										 * ICCCDR.initialKMDK1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KMDK2") == 0) {
										 * ICCCDR.initialKMDK2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS2") == 0) {
										 * ICCCDR.initialKMDK3Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM1") == 0) {
										 * ICCCDR.initialKM1Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2") == 0) {
										 * ICCCDR.initialKM2Unit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("BONUS") == 0) {
										 * ICCCDR.initialKM3Unit = mValue; }
										 * //San luong. //Thoai, sms, gprs. else
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_KM") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_KM") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS_KM") == 0)
										 * { ICCCDR.initialKMUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE2") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMSPack") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS2") == 0) {
										 * ICCCDR.initialDKUnit = mValue; } else
										 * if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_0") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("Subsc_SMS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS") == 0||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS") == 0
										 * ||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mGPRS") == 0 ||
										 * ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("GPRS4") == 0) {
										 * ICCCDR.initialPacketUnit = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_OP") == 0
										 * || ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_OP") == 0) {
										 * ICCCDR.initialPacketOPUnit = mValue;
										 * } // Nguyen Tien Khai - add tags for
										 * VOICE_LM or SMS_LM else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("SMS_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVOICE_LM") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mSMS_LM") == 0){
										 * ICCCDR.bundleLMInitial= mValue; //
										 * Nguyen Tien Khai - add tags for
										 * VOICE_CLM -> thay VOICE_CLM =
										 * VOICE_PKG (07-Jan-2013) }else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT_0") == 0){
										 * ICCCDR.bundleCLMInitial= mValue; } //
										 * VOICE_PKG1 -> VNPT1. else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_PKG1") ==
										 * 0||ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("mVNPT1_0") ==
										 * 0){ ICCCDR.bundleVNPT1Initial =
										 * mValue; } //CREDIT1 ->CREDIT1 else if
										 * (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("CREDIT1") == 0){
										 * ICCCDR.bundleCredit1Initial = mValue;
										 * }
										 * 
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM2T") == 0){
										 * ICCCDR.bonusKM2TInitial = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("KM3T") == 0){
										 * ICCCDR.bonusKM3TInitial = mValue; }
										 * else if (ICCCDR.bundleIdentifier.
										 * compareToIgnoreCase("VOICE_TH") ==
										 * 0){ ICCCDR.bundleVOICETHInitial =
										 * mValue; }
										 */

										// Vas.
									}
									// --Modified Date:25-Jul-2012--
									else if (mEleValue.compareTo("3100.2.37.1") == 0) {
										ICCCDR.SpecificChargingIndicator = mValue;
									} else if (mEleValue.compareTo("3100.2.37.10") == 0) {
										ICCCDR.NameOfCUG = mValue;

									} else if (mEleValue.compareTo("3186.8.1.1") == 0) {
										ICCCDR.NumberOfDaysSwapped = mValue;
									} else if (mEleValue.compareTo("3186.8.1.2") == 0) {
										ICCCDR.AmountSwapped = mValue;
									} else if (mEleValue.compareTo("3186.8.1.3") == 0) {
										ICCCDR.Fee = mValue;
									}
									// --End--
									// Discarded Credit
									else if (mEleValue.compareTo("3100.2.143.2") == 0) {
										ICCCDR.reasonCode = mValue;
									} else if (mEleValue.compareTo("3100.2.106.1") == 0) { // Tariff
																							// plan
																							// name
										if (ICCCDR.tariffPlanName.compareTo("") == 0)
											ICCCDR.tariffPlanName = mValue;
										else
											ICCCDR.tariffPlanName += "," + mValue;
									}
									/**
									 * 2014.01.06, datnh, bo sung thong tin
									 * truong causeRecClose
									 */
									else if (mEleValue.compareTo("3100.2.18.1") == 0) {
										ICCCDR.causeRecClose = mValue;
									}
									/**
									 * 2014.03.04, datnh, bo sung thong tin
									 * truong Correlation Identifier
									 */
									else if (mEleValue.compareTo("3100.2.41.1") == 0) {
										ICCCDR.correlationIdentifier = mValue;
									}

									/**
									 * 2014.05.19, datnh, bo sung thong tin
									 * truong Community Identifier, Topup
									 * profile
									 */
									else if (mEleValue.compareTo("3100.2.19.9") == 0) {
										ICCCDR.communityIdentifier = mValue;
									} else if (mEleValue.compareTo("3100.2.135.4") == 0) {
										ICCCDR.topupProfile = mValue;
									}
									/**
									 * 2014.06.27, datnh, bo sung thong tin
									 * truong old fnf num
									 */
									else if (mEleValue.compareTo("3100.2.958.2") == 0) {
										ICCCDR.oldFnfNum = mValue;
									} else if (mEleValue.compareTo("3100.2.958.3") == 0) {
										ICCCDR.newFnfNum = mValue;
									} else if (mEleValue.compareTo("3100.2.28.20") == 0) {
										ICCCDR.accPreLang = mValue;
									} else if (mEleValue.compareTo("3100.2.28.21") == 0) {
										ICCCDR.accCurLang = mValue;
									} else if (mEleValue.compareTo("3100.2.114.11") == 0){
										ICCCDR.resellerId = mValue;
										}
								}
							} else if ("a1".compareTo(mValue) == 0) { // Call
																		// data
								mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
								mEn++;
								mEle++;
								if (mValue.substring(1).compareTo("0") == 0) { // Stkt-tag
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;

									// content Feature
									// Type
									mFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 1; i <= mLength; i++) {
										mFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
												* Math.pow(256, (mLength - i));
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubFeature
									// Type
									mSubFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content Type
									// Type
									mType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubType
									// Type
									mSubType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}

									// octet string DUMP
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									mValue = "";
									String eventVal = "";
									for (int i = 0; i < mLength; i++) {
										mValue += (char) (mBuffer[mFileByte + mByteN]);
										eventVal += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
										mByteN++;
										mEn++;
										mEle++;
									}
									mEleValue = mFeature + "." + mSubFeature + "." + mType + "." + mSubType;

									if (mEleValue.compareTo("3100.2.140.1") == 0) // Duration
									{
										ICCCDR.TagCallDuration = Global.Hex2Dec(eventVal);
									} else if (mEleValue.compareTo("3100.2.139.7") == 0) // Event
																							// cost
																							// vat
									{
										ICCCDR.eventCostVat = Global.Hex2Dec(eventVal);
										// --Modified Date:30-Aug-2012-- if
										// (Event cost vat has not value at
										// 3100.2.139.7 then get value at
										// 3100.2.139.5)
									} else if (mEleValue.compareTo("3100.2.139.5") == 0) {
										ICCCDR.eventCostVat = Global.Hex2Dec(eventVal);
									}

									else if (mEleValue.compareTo("3100.2.139.8") == 0) {
										ICCCDR.discardedCredit = Global.Hex2Dec(eventVal);
									}
									// --End--
								}
							} else if ("a2".compareTo(mValue) == 0) { // Stkt-obj
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;

							}
						} // end for element
					} // end if Stkt-element data
				} // End for mStktVarParLength
			} // End while record length
			mFileByte += mByteN;
		}

		private void AnalyseICC462() {
			/*
			 * if (ICCCDR.CallStartDateTime.compareTo("") != 0) { mValue =
			 * Global.Format(new
			 * java.util.Date(Global.convertDateTimeToLong(ICCCDR.
			 * CallStartDateTime) -
			 * Global.convertTomiliseconds(ICCCDR.TagCallDuration1)),
			 * "yyyyMMddHHmmss"); ICCCDR.CallStartDateTime = mValue; }
			 */

			// --Modified Date:12-Sep-2012-- Caculate CallStartDateTime =
			// CallEndDateTime - Call Duration without Ringtone Duration
			// - only calculate CallStartDateTime for OG record
			// mValue = Global.Format(new
			// java.util.Date(Global.convertDateTimeToLong(ICCCDR.CallEndDateTime1)
			// - Global.convertTomiliseconds(ICCCDR.TagCallDuration)),
			// "yyyyMMddHHmmss");
			// --Modified Date:12-Sep-2012-- Caculate CallStartDateTime =
			// CallEndDateTime - Call Duration(Don't round) without Ringtone
			// Duration

			if (ICCCDR.CallType.compareTo("1") == 0 || ICCCDR.CallType.compareTo("5") == 0
					|| ICCCDR.CallType.compareTo("155") == 0 || ICCCDR.CallType.compareTo("20") == 0) {
				if (ICCCDR.CallEndDateTime1.compareTo("") != 0) {
					int realDuration = 0;
					if (ICCCDR.usedQuantity1.length() > 0)
						realDuration = Integer.parseInt(ICCCDR.usedQuantity1);
					mValue = Global.Format(new java.util.Date(Global.convertDateTimeToLong(ICCCDR.CallEndDateTime1)
							- Global.convertTomiliseconds(realDuration)), "yyyyMMddHHmmss");
					ICCCDR.CallStartDateTime = mValue;
				}
			}

			// --datnh--2013.12.10
			if (ICCCDR.countryCode.trim().equals(""))
				ICCCDR.countryCode = "0-";
			if (ICCCDR.networkCode.trim().equals(""))
				ICCCDR.networkCode = "0-";
			if (ICCCDR.nsl_lac.trim().equals(""))
				ICCCDR.nsl_lac = "0-";
			if (ICCCDR.nsl_ci.trim().equals(""))
				ICCCDR.nsl_ci = "0";

			// --End--
			ICCCDR.cellGlobalIdentifier = ICCCDR.countryCode + ICCCDR.networkCode + ICCCDR.nsl_lac + ICCCDR.nsl_ci;
			if (ICCCDR.CallType.compareTo("189") == 0) {
				//ANHNT 18/07/2016
				//Sua lai thong tin localtion va cell 4G
				
				if(ICCCDR.TagLocationNumber != null && !ICCCDR.TagLocationNumber.equals("")){
					if(ICCCDR.TagLocationNumber.substring(0,2).equals("82")){
						try {
							String mnc = ICCCDR.TagLocationNumber.substring(8,12);
							String nodeB = ICCCDR.TagLocationNumber.substring(18,24);
							String cell_id = ICCCDR.TagLocationNumber.substring(24,ICCCDR.TagLocationNumber.length());
							
							ICCCDR.cellGlobalIdentifier = ICCCDR.countryCode + ICCCDR.networkCode 
							+ Global.Hex2Dec(mnc)+"-"+ Global.Hex2Dec(nodeB)+"-"+ Global.Hex2Dec(cell_id);
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
					
					int tmp = Global.Hex2Dec(ICCCDR.TagLocationNumber.substring(0,2));
					ICCCDR.TagLocationNumber = tmp+"."+ICCCDR.cellGlobalIdentifier.replace("-", "");
				}
				
				if (ICCCDR.nsl_lac.trim().equals("") || ICCCDR.nsl_ci.trim().equals("")) {
					ICCCDR.cellGlobalIdentifier = "";
				}
			}

			if (ICCCDR.TagCallingNumber.compareTo("") == 0) {
				ICCCDR.TagCallingNumber = ICCCDR.TagCallingNumber1;
			}
			if (ICCCDR.TagCallType.compareTo("193") == 0) {
				ICCCDR.TagCallDuration1 = 0;
				ICCCDR.CallEndDateTime1 = "";
				// da fix loi ngay 12/1/2011.
				// ICCCDR.CallStartDateTime = Global.Format(mStartDateTime,
				// "dd/MM/yyyyHH:mm:ss", "yyyyMMddHHmmss");
				ICCCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			} else if (ICCCDR.TagCallType.compareTo("224") == 0) {
				ICCCDR.TagCallDuration1 = 0;
				ICCCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			}

			else if (ICCCDR.TagCallType.compareTo("240") == 0) {
				ICCCDR.TagCallDuration1 = 0;
				ICCCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
			} else {
				ICCCDR.CallingOrg = ICCCDR.FmtOfCalling + ICCCDR.TagCallingNumber;
			}
			// if (INCDR.RecordType.compareTo("OTHER") != 0) {
			if (ICCCDR.TagCallingNumber.length() > 0) {
				/*
				 * if (((INCDR.FmtOfCalling.compareTo("3") == 0) ||
				 * (INCDR.FmtOfCalling.compareTo("4") == 0)) &&
				 * ((INCDR.TagCallingNumber.substring(0, 2).compareTo("84") ==
				 * 0)))
				 */
				if (ICCCDR.TagCallingNumber.length() >= 2) {
					if (ICCCDR.TagCallingNumber.substring(0, 2).compareTo("84") == 0) {
						ICCCDR.TagCallingNumber = ICCCDR.TagCallingNumber.substring(2);
					}
				}
			}

			if (ICCCDR.TagCalledNumber.compareTo("") != 0) {
				ICCCDR.CalledOrg = ICCCDR.FmtOfCalled + ICCCDR.TagCalledNumber;
				// && (isNumeric(INCDR.TagCalledNumber)))
				if (ICCCDR.TagCalledNumber.length() > 0) {
					if (ICCCDR.FmtOfCalled.compareTo("4") == 0) {
						if (ICCCDR.TagCalledNumber.length() > 2) {
							if (ICCCDR.TagCalledNumber.substring(0, 2).compareTo("84") == 0) {
								ICCCDR.TagCalledNumber = "0" + ICCCDR.TagCalledNumber.substring(2);
							} else if (ICCCDR.TagCalledNumber.length() > 7) {
								ICCCDR.TagCalledNumber = "00" + ICCCDR.TagCalledNumber;
								if (ICCCDR.TagCalledNumber.substring(0, 3).compareTo("000") == 0) {
									ICCCDR.TagCalledNumber = "0" + ICCCDR.TagCalledNumber.substring(3);
								}
							}
						} else {
							ICCCDR.TagCalledNumber = ICCCDR.TagCalledNumber;
						}
					} else if (ICCCDR.FmtOfCalled.compareTo("3") == 0) {
						// Modified by Nguyen Tien Khai 07-Oct-2012
						// if (ICCCDR.TagCalledNumber.length() >= 9)
						// {
						ICCCDR.TagCalledNumber = "0" + ICCCDR.TagCalledNumber;
						// }
					}
					if (ICCCDR.TagCalledNumber.length() > 21) {
						ICCCDR.TagCalledNumber = ICCCDR.TagCalledNumber.substring(0, 21);
					}
				}
			}
			// if value of tag:3100.2.46.2 = null and call type =189 then
			// TagOriginalCalledNumber =value of tag: 3100.2.19.2
			// 07-Jan-2013
			if (ICCCDR.TagOriginalCalledNumber.compareTo("") == 0 && ICCCDR.CallType.compareTo("189") == 0) {
				ICCCDR.TagOriginalCalledNumber = ICCCDR.TagOriginalCalledNumber1;
			}
			// Handle for M2U record org call id = 3100.2.133.1
			if (ICCCDR.CallType.compareTo("360") == 0) {
				ICCCDR.TagOriginalCalledNumber = ICCCDR.TagOriginalCalledNumberM2U;
			}

			//
			if (ICCCDR.TagOriginalCalledNumber.length() > 0) {
				if (ICCCDR.FmtOfOriginalCalled.compareTo("4") == 0) {
					if (ICCCDR.TagOriginalCalledNumber.length() > 2) {
						if (ICCCDR.TagOriginalCalledNumber.substring(0, 2).compareTo("84") == 0) {
							ICCCDR.TagOriginalCalledNumber = "0" + ICCCDR.TagOriginalCalledNumber.substring(2);
						} else if (ICCCDR.TagOriginalCalledNumber.length() > 7) {
							ICCCDR.TagOriginalCalledNumber = "00" + ICCCDR.TagOriginalCalledNumber;
							if (ICCCDR.TagOriginalCalledNumber.substring(0, 3).compareTo("000") == 0) {
								ICCCDR.TagOriginalCalledNumber = "0" + ICCCDR.TagOriginalCalledNumber.substring(3);
							}
						}
					} else {
						ICCCDR.TagOriginalCalledNumber = ICCCDR.TagOriginalCalledNumber;
					}
				} else if (ICCCDR.FmtOfCalled.compareTo("3") == 0) {
					// Modified by Nguyen Tien Khai 07-Oct-2012
					// if (ICCCDR.TagCalledNumber.length() >= 9)
					// {
					ICCCDR.TagOriginalCalledNumber = "0" + ICCCDR.TagOriginalCalledNumber;
					// }
				}
				if (ICCCDR.TagOriginalCalledNumber.length() > 21) {
					ICCCDR.TagOriginalCalledNumber = ICCCDR.TagOriginalCalledNumber.substring(0, 21);
				}
			}

			if (ICCCDR.CallStartDateTime.compareTo("") == 0) {
				if (mStartDateTime.equals("")) {
					ICCCDR.CallStartDateTime = "                   ";
				} else {
					// da fix loi ngay 12/1/2011.
					// try
					// {
					ICCCDR.CallStartDateTime = Global.Format(mStartDateTime, "dd/MM/yyyy HH:mm:ss", "yyyyMMddHHmmss");
					// }
					// catch(Exception e)
					// {
					// ICCCDR.CallStartDateTime = Global.Format(mStartDateTime,
					// "dd/MM/yyyyHH:mm:ss", "yyyyMMddHHmmss");
					// }
				}
			}
			// }

			if (ICCCDR.CallType.compareTo("415") == 0 || ICCCDR.CallType.compareTo("451") == 0)
				ICCCDR.TranDesc = ICCCDR.reasonCode;

			// datnh, 2014.04.21
			if (ICCCDR.TagReFill_ScratchValue.equals("")) {
				ICCCDR.TagReFill_ScratchValue = "0-0";
			} else if (ICCCDR.TagReFill_ScratchValue.indexOf("-") == -1) {
				ICCCDR.TagReFill_ScratchValue += "-0";
			}
		}

		protected int INFile_ICC462(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";

			try {
				//Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mICCHeaderCharge);
				} else {
					fileConvert.addText(Global.mICCHeaderNoCharge);
				}

				//mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				//Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecOG = 0;
				mRecIC = 0;
				mRecSMO = 0;
				mRecSMT = 0;
				mRecDivert = 0;
				mRecOther = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				mEventLength = 0;
				mClass = "";
				mObject = "";
				mStartDateTime = "";
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					//mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					//Global.ExecuteSQL(mConnection, mSQL);
				//	mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;

				// Added by Nguyen Tien Khai, handling duplicated subScriber
				// Type, calling isdn,acc profile,IMSI in call record. --Date:
				// 10-12-2012
				String duplicatedNotes = "";

				accountTreeMap.put("KMDK1", 1); // tai khoan tien dinh ky 1
				accountTreeMap.put("KMDK2", 2); // tai khoan tien dinh ky 2
				accountTreeMap.put("BONUS2", 3);// tai khoan tien dinh ky 3
				accountTreeMap.put("KM1", 4);// tai khoan tien KM1
				accountTreeMap.put("KM2", 5);// tai khoan tien KM2
				accountTreeMap.put("BONUS", 6);// tai khoan tien KM3
				accountTreeMap.put("VOICE_KM", 7);// tai khoan tien KM
				accountTreeMap.put("SMS", 7);
				accountTreeMap.put("SMS_KM", 7);
				accountTreeMap.put("GPRS_KM", 7);
				
				accountTreeMap.put("VOICE2", 8);// tai khoan
				accountTreeMap.put("SMSPack", 8);
				accountTreeMap.put("GPRS2", 8);
				accountTreeMap.put("SMS2", 8);

				accountTreeMap.put("VOICE", 9);// tai khoan goi
				accountTreeMap.put("mVOICE_0", 9);
				accountTreeMap.put("mSMS", 9);
				accountTreeMap.put("Subsc_SMS", 9);
				accountTreeMap.put("GPRS", 9);
				accountTreeMap.put("mGPRS", 9);
				accountTreeMap.put("GPRS4", 9);
				accountTreeMap.put("mVOICE", 9);

				accountTreeMap.put("VOICE_OP", 10);// tai khoan offpeak
				accountTreeMap.put("SMS_OP", 10);

				accountTreeMap.put("VOICE_LM", 11);// tai khoan lien mang
				accountTreeMap.put("SMS_LM", 11);
				accountTreeMap.put("mVOICE_LM", 11);
				accountTreeMap.put("mSMS_LM", 11);

				accountTreeMap.put("VOICE_PKG", 12);// tai khoan CLM (vnpt)
				accountTreeMap.put("mVNPT_0", 12);
				accountTreeMap.put("SMSVNPT", 12);
				accountTreeMap.put("mSMSVNPT", 12);
				accountTreeMap.put("SMS_PKG", 12);
				accountTreeMap.put("VOICE_CLM", 12);
				accountTreeMap.put("mVOICE_PKG", 12);

				accountTreeMap.put("VOICE_PKG1", 13);// tai khoan vnpt1
				accountTreeMap.put("mVNPT1_0", 13);
				accountTreeMap.put("mVOICE_PKG1", 13);

				accountTreeMap.put("CREDIT1", 14);// tai khoan credit (goi ACB)

				accountTreeMap.put("KM2T", 15); // tai khoan KM2T

				accountTreeMap.put("KM3T", 16);// tai khoan KM3T

				accountTreeMap.put("VOICE_TH", 17);// tai khoan Voice_TH
				accountTreeMap.put("mVOICE_TH", 17);
				
				accountTreeMap.put("KM1T", 18);// tai khoan KM1T
				
				accountTreeMap.put("GPRS_0", 19);// tai khoan GPRS0
				
				accountTreeMap.put("WALLET1", 20);// tai khoan vi 1
				
				accountTreeMap.put("WALLET2", 21);// tai khoan vi 2
				
				accountTreeMap.put("IRD", 22);// tai khoan IRD
				accountTreeMap.put("mIRD", 22);

				accountTreeMap.put("G_DATA", 23); // tai khoan GROUP
				accountTreeMap.put("G_VOICE", 23);

				accountTreeMap.put("KM99T", 24); // tai khoan KM99T

				accountTreeMap.put("mVOICE_LM1", 25); // tai khoan LM1
				accountTreeMap.put("VOICE_KM2", 25); 
				
				accountTreeMap.put("DATA_KM1", 26); // tai khoan DATA_KM1 
				
				accountTreeMap.put("GPRS6", 27); // tai khoan DATA6

				accountTreeMap.put("KMKNDL", 28); // tai khoan KMKNDL
				
				accountTreeMap.put("VOICE_LM_DL", 29); // tai khoan LM_DL
				accountTreeMap.put("SMS_LM_DL", 29); // tai khoan LM_DL
				
				accountTreeMap.put("GPRS5", 30); // tai khoan DATA5

				accountTreeMap.put("VOICE_LM_CS", 31);// Tai khoan chia se
				accountTreeMap.put("SMS_LM_CS", 31);
				accountTreeMap.put("Data_CS", 31);

				accountTreeMap.put("VOICE_WI-FI_QT", 32);// Tai khoan wifi calling
				accountTreeMap.put("VOICE_WI-FI", 32);
				accountTreeMap.put("SMS_WI-FI", 32);
				accountTreeMap.put("SMS_WI-FI_QT", 32);

				accountTreeMap.put("DataDem", 33);// Tai khoan DataDem

				accountTreeMap.put("VOICE_ML_NM", 34);// Tai khoan M-loyalty
				accountTreeMap.put("VOICE_ML_LM", 34);
				accountTreeMap.put("SMS_ML_NM", 34);
				accountTreeMap.put("SMS_ML_LM", 34);
				
				accountTreeMap.put("KM4", 35); //Tai khoan KM4
				
				accountTreeMap.put("KM4T", 36);// Tai khoan KM4T
				
				accountTreeMap.put("KMDK4", 37);// Tai khoan KMDK4
				
				accountTreeMap.put("THOAILM1", 38);// Tai khoan THOAILM1
				
				accountTreeMap.put("IRA", 39);// Tai khoan IRA
				
				accountTreeMap.put("IRB", 40);// Tai khoan IRB
				
				accountTreeMap.put("IRVS", 41);// Tai khoan IRVS
				
				accountTreeMap.put("IRSMS", 42);// Tai khoan IRSMS
				
				accountTreeMap.put("VOICE_KM1", 43);// Tai khoan VOICE_KM1
				
				accountTreeMap.put("Data_31", 44);// Tai khoan Data_31 
				
				/** 30-09-2016 */
				accountTreeMap.put("SMSRefill", 45);// Tai khoan smsRefill
				
				accountTreeMap.put("VIDEO", 46);// Tai khoan VIDEO
				
				accountTreeMap.put("WALLET3", 47);// Tai khoan WALLET3
				
				accountTreeMap.put("VORMO_0", 48);// Tai khoan cvqt
				accountTreeMap.put("VORMI_0", 48);
				accountTreeMap.put("SMSRM_0", 48);
				accountTreeMap.put("DATARM", 48);
				
				accountTreeMap.put("SMS3", 49);// Tai khoan SMS3
				
				accountTreeMap.put("DataZ1", 50);// Tai khoan DataZ1
				
				accountTreeMap.put("DataZ2", 51);// Tai khoan DataZ2
				
				accountTreeMap.put("DataZ3", 52);// Tai khoan DataZ3
				
				accountTreeMap.put("VOICELN", 53);// Tai khoan khach hang lau nam
				accountTreeMap.put("SMSLN", 53);
				
				accountTreeMap.put("TK1", 54); // Tai khoan nguyen gia
				
				accountTreeMap.put("KM1V", 55); // Tai khoan KM1V
				
				accountTreeMap.put("KM2V", 56); // Tai khoan KM2V
				
				accountTreeMap.put("KM3V", 57); // Tai khoan KM3V
				
				accountTreeMap.put("KM4V", 58); // Tai khoan KM4V
				
				accountTreeMap.put("Credit2", 59); // Tai khoan Credit2
				
				accountTreeMap.put("Credit3", 60); // Tai khoan Credit3
				
				accountTreeMap.put("DATA_LN", 61); // Tai khoan DATA_LN
				
				accountTreeMap.put("DATA_VC", 62); // Tai khoan DATA_VC

				while (mFileByte < mFileLength) {
					ICCCDR.RecordType = "";
					ICCCDR.CallType = "";
					ICCCDR.Header = "";
					ICCCDR.GlobalServiceIdentifier = "";
					ICCCDR.CallStartDateTime = "";
					ICCCDR.TagCallingNumber = ""; // 63EA
					ICCCDR.TagCalledNumber = ""; // 64EA
					ICCCDR.CallEndDateTime1 = "";
					ICCCDR.TagCallDuration1 = 0;
					ICCCDR.TagCallType = "";
					ICCCDR.TagAccountProfileModification = "";
					ICCCDR.TagLocationNumber = "";
					ICCCDR.TagIMSI = "";
					ICCCDR.TagRemainningCredit = "";
					ICCCDR.TagReFill_ScratchType = "";
					ICCCDR.TagReFill_ScratchNumber = "";
					ICCCDR.TagReFill_ScratchValue = "";
					ICCCDR.TagReFill_NumberOfRefill = "";
					ICCCDR.TagCallDuration2 = 0;
					ICCCDR.CallEndDateTime2 = "";
					ICCCDR.TagOriginalCalledNumber = "";
					ICCCDR.TagOriginalCalledNumber1 = "";
					ICCCDR.TagOriginalCalledNumberM2U = "";
					ICCCDR.FmtOfCalling = "";
					ICCCDR.FmtOfCalled = "";
					ICCCDR.FmtOfOriginalCalled = "";
					ICCCDR.TagPeriodicAutomaticRefill = "";
					ICCCDR.CallingOrg = "";
					ICCCDR.CalledOrg = "";
					ICCCDR.eventTypeName = "";
					ICCCDR.creditBeforeTrans = "";
					ICCCDR.nsl_ci = "";
					ICCCDR.nsl_lac = "";
					// limit date and allocated Bundle.
					ICCCDR.limitDateKMDK1Bucket = "";
					ICCCDR.allocatedKMDK1Bucket = "";
					ICCCDR.limitDateKMDK2Bucket = "";
					ICCCDR.allocatedKMDK2Bucket = "";
					ICCCDR.limitDateKMDK3Bucket = "";
					ICCCDR.allocatedKMDK3Bucket = "";
					ICCCDR.limitDateKM1Bucket = "";
					ICCCDR.allocatedKM1Bucket = "";
					ICCCDR.limitDateKM2Bucket = "";
					ICCCDR.allocatedKM2Bucket = "";
					ICCCDR.limitDateKM3Bucket = "";
					ICCCDR.allocatedKM3Bucket = "";
					ICCCDR.limitDateKMBucket = "";
					ICCCDR.allocatedKMBucket = "";
					ICCCDR.limitDateDKBucket = "";
					ICCCDR.allocatedDKBucket = "";
					ICCCDR.limitDatePacketBucket = "";
					ICCCDR.allocatedPacketBucket = "";
					ICCCDR.limitDatePacketOPBucket = "";
					ICCCDR.allocatedPacketOPBucket = "";

					ICCCDR.sgsnAddress = "";
					// GPRS
					ICCCDR.ChargingId = "";
					ICCCDR.TagRTecCallCost = "";
					ICCCDR.NetEleID = "";
					ICCCDR.NetEleTranID = "";
					// Duration
					ICCCDR.TagCallDuration = 0;
					// Account Tree.
					// Tai khoan khuyen mai dinh ky 1.
					ICCCDR.consumedKMDK1Unit = "";
					ICCCDR.remainingKMDK1Unit = "";
					ICCCDR.initialKMDK1Unit = "";

					// Tai khoan khuyen mai dinh ky 2.
					ICCCDR.consumedKMDK2Unit = "";
					ICCCDR.remainingKMDK2Unit = "";
					ICCCDR.initialKMDK2Unit = "";

					// Tai khoan khuyen mai dinh ky 3.
					ICCCDR.consumedKMDK3Unit = "";
					ICCCDR.remainingKMDK3Unit = "";
					ICCCDR.initialKMDK3Unit = "";

					// Tai khoan khuyen mai 1.
					ICCCDR.consumedKM1Unit = "";
					ICCCDR.remainingKM1Unit = "";
					ICCCDR.initialKM1Unit = "";

					// Tai khoan khuyen mai 2.
					ICCCDR.consumedKM2Unit = "";
					ICCCDR.remainingKM2Unit = "";
					ICCCDR.initialKM2Unit = "";

					// Tai khoan khuyen mai 3.
					ICCCDR.consumedKM3Unit = "";
					ICCCDR.remainingKM3Unit = "";
					ICCCDR.initialKM3Unit = "";
					////// tai khoan san luong
					// tai khoan thoai
					ICCCDR.consumedKMUnit = "";
					ICCCDR.remainingKMUnit = "";
					ICCCDR.initialKMUnit = "";

					ICCCDR.consumedDKUnit = "";
					ICCCDR.remainingDKUnit = "";
					ICCCDR.initialDKUnit = "";

					ICCCDR.consumedPacketUnit = "";
					ICCCDR.remainingPacketUnit = "";
					ICCCDR.initialPacketUnit = "";

					ICCCDR.consumedPacketOPUnit = "";
					ICCCDR.remainingPacketOPUnit = "";
					ICCCDR.initialPacketOPUnit = "";

					ICCCDR.bundleIdentifier = "";
					// End Account Tree.

					ICCCDR.bunldeUnit = "";
					ICCCDR.consumedUnitBonus = "";
					ICCCDR.remainingUnitBonus = "";
					ICCCDR.initialUnitBonus = "";
					ICCCDR.eventCostVat = 0;
					ICCCDR.locationIndicator = "";
					ICCCDR.zoneOrgArea = "";
					ICCCDR.zoneDestArea = "";
					ICCCDR.subScriberType = "";
					ICCCDR.usedQuantity1 = "";
					ICCCDR.DestCharingMatrix = "";
					ICCCDR.serviceId = "";
					ICCCDR.feeName = "";
					ICCCDR.cellGlobalIdentifier = "";
					ICCCDR.networkCode = "";
					ICCCDR.countryCode = "";
					ICCCDR.cellGlobalIdentifier189 = "";
					ICCCDR.TranDesc = "";
					ICCCDR.TagCallingNumber1 = "";

					// --Modified Date:25-Jul-2012--
					ICCCDR.AmountSwapped = "";
					ICCCDR.Fee = "";
					ICCCDR.NumberOfDaysSwapped = "";
					ICCCDR.SpecificChargingIndicator = "";
					ICCCDR.NameOfCUG = "";
					// --End--

					ICCCDR.bundleLMLimitDate = "";
					ICCCDR.bundleLMAllocated = "";
					ICCCDR.bundleLMConsumed = "";
					ICCCDR.bundleLMRemaining = "";
					ICCCDR.bundleLMInitial = "";

					ICCCDR.bundleCLMLimitDate = "";
					ICCCDR.bundleCLMAllocated = "";
					ICCCDR.bundleCLMConsumed = "";
					ICCCDR.bundleCLMRemaining = "";
					ICCCDR.bundleCLMInitial = "";

					// discarded credit
					ICCCDR.discardedCredit = 0;

					// tai khoan CREDIT1
					ICCCDR.bundleCredit1LimitDate = "";
					ICCCDR.bundleCredit1Allocated = "";
					ICCCDR.bundleCredit1Consumed = "";
					ICCCDR.bundleCredit1Remaining = "";
					ICCCDR.bundleCredit1Initial = "";
					// tai khoan VNPT1
					ICCCDR.bundleVNPT1LimitDate = "";
					ICCCDR.bundleVNPT1Allocated = "";
					ICCCDR.bundleVNPT1Consumed = "";
					ICCCDR.bundleVNPT1Remaining = "";
					ICCCDR.bundleVNPT1Initial = "";

					ICCCDR.orgCallStaTime = "";
					ICCCDR.reasonCode = "";

					ICCCDR.tariffPlanName = "";

					// tai khoan KM1T
					ICCCDR.bonusKM1TLimitDate = "";
					ICCCDR.bonusKM1TAllocated = "";
					ICCCDR.bonusKM1TConsumed = "";
					ICCCDR.bonusKM1TRemaining = "";
					ICCCDR.bonusKM1TInitial = "";

					// tai khoan KM2T
					ICCCDR.bonusKM2TLimitDate = "";
					ICCCDR.bonusKM2TAllocated = "";
					ICCCDR.bonusKM2TConsumed = "";
					ICCCDR.bonusKM2TRemaining = "";
					ICCCDR.bonusKM2TInitial = "";

					// tai khoan KM3T
					ICCCDR.bonusKM3TLimitDate = "";
					ICCCDR.bonusKM3TAllocated = "";
					ICCCDR.bonusKM3TConsumed = "";
					ICCCDR.bonusKM3TRemaining = "";
					ICCCDR.bonusKM3TInitial = "";

					// tai khoan VOICETH
					ICCCDR.bundleVOICETHLimitDate = "";
					ICCCDR.bundleVOICETHAllocated = "";
					ICCCDR.bundleVOICETHConsumed = "";
					ICCCDR.bundleVOICETHRemaining = "";
					ICCCDR.bundleVOICETHInitial = "";

					// tai khoan GPRS_0
					ICCCDR.bundleGPRS0LimitDate = "";
					ICCCDR.bundleGPRS0Allocated = "";
					ICCCDR.bundleGPRS0Consumed = "";
					ICCCDR.bundleGPRS0Remaining = "";
					ICCCDR.bundleGPRS0Initial = "";

					// tai khoan vi
					ICCCDR.bundleWALLET1LimitDate = "";
					ICCCDR.bundleWALLET1Allocated = "";
					ICCCDR.bundleWALLET1Consumed = "";
					ICCCDR.bundleWALLET1Remaining = "";
					ICCCDR.bundleWALLET1Initial = "";

					ICCCDR.bundleWALLET2LimitDate = "";
					ICCCDR.bundleWALLET2Allocated = "";
					ICCCDR.bundleWALLET2Consumed = "";
					ICCCDR.bundleWALLET2Remaining = "";
					ICCCDR.bundleWALLET2Initial = "";

					// Tai khoan IRD
					ICCCDR.bundleIRDLimitDate = "";
					ICCCDR.bundleIRDAllocated = "";
					ICCCDR.bundleIRDConsumed = "";
					ICCCDR.bundleIRDRemaining = "";
					ICCCDR.bundleIRDInitial = "";

					// Tai khoan GROUP
					ICCCDR.bundleGROUPLimitDate = "";
					ICCCDR.bundleGROUPAllocated = "";
					ICCCDR.bundleGROUPConsumed = "";
					ICCCDR.bundleGROUPRemaining = "";
					ICCCDR.bundleGROUPInitial = "";

					ICCCDR.causeRecClose = "";
					ICCCDR.correlationIdentifier = "";

					ICCCDR.communityIdentifier = "";
					ICCCDR.topupProfile = "";

					ICCCDR.oldFnfNum = "";
					ICCCDR.newFnfNum = "";
					ICCCDR.accPreLang = "";
					ICCCDR.accCurLang = "";

					// Tai khoan KM99T
					ICCCDR.bundleKM99TLimitDate = "";
					ICCCDR.bundleKM99TAllocated = "";
					ICCCDR.bundleKM99TConsumed = "";
					ICCCDR.bundleKM99TRemaining = "";
					ICCCDR.bundleKM99TInitial = "";

					// Tai khoan LM1
					ICCCDR.bundleLM1Name = "";
					ICCCDR.bundleLM1LimitDate = "";
					ICCCDR.bundleLM1Allocated = "";
					ICCCDR.bundleLM1Consumed = "";
					ICCCDR.bundleLM1Remaining = "";
					ICCCDR.bundleLM1Initial = "";

					// Tai khoan DATA_KM1
					ICCCDR.bundleDATA_KM1Name = "";
					ICCCDR.bundleDATA_KM1LimitDate = "";
					ICCCDR.bundleDATA_KM1Allocated = "";
					ICCCDR.bundleDATA_KM1Consumed = "";
					ICCCDR.bundleDATA_KM1Remaining = "";
					ICCCDR.bundleDATA_KM1Initial = "";

					ICCCDR.InServiceResult = "";

					// Tai khoan DATA6
					ICCCDR.bundleDATA6Name = "";
					ICCCDR.bundleDATA6Consumed = "";
					ICCCDR.bundleDATA6Remaining = "";
					ICCCDR.bundleDATA6Initial = "";

					// Tai khoan KMKNDL
					ICCCDR.bundleKMKNDLName = "";
					ICCCDR.bundleKMKNDLConsumed = "";
					ICCCDR.bundleKMKNDLRemaining = "";
					ICCCDR.bundleKMKNDLInitial = "";

					// Tai khoan LM_DL
					ICCCDR.bundleLM_DLName = "";
					ICCCDR.bundleLM_DLConsumed = "";
					ICCCDR.bundleLM_DLRemaining = "";
					ICCCDR.bundleLM_DLInitial = "";

					// Tai khoan DATA5
					ICCCDR.bundleDATA5Name = "";
					ICCCDR.bundleDATA5Consumed = "";
					ICCCDR.bundleDATA5Remaining = "";
					ICCCDR.bundleDATA5Initial = "";

					// Tai khoan chia se
					ICCCDR.bundleCSName = "";
					ICCCDR.bundleCSConsumed = "";
					ICCCDR.bundleCSRemaining = "";
					ICCCDR.bundleCSInitial = "";

					// Tai khoan wifi calling
					ICCCDR.bundleWifiName = "";
					ICCCDR.bundleWifiConsumed = "";
					ICCCDR.bundleWifiRemaining = "";
					ICCCDR.bundleWifiInitial = "";

					// Tai khoan DataDem
					ICCCDR.bundleDataDemName = "";
					ICCCDR.bundleDataDemConsumed = "";
					ICCCDR.bundleDataDemRemaining = "";
					ICCCDR.bundleDataDemInitial = "";

					// Tai khoan M-loyalty
					ICCCDR.bundleMLoyaltyName = "";
					ICCCDR.bundleMLoyaltyConsumed = "";
					ICCCDR.bundleMLoyaltyRemaining = "";
					ICCCDR.bundleMLoyaltyInitial = "";
					
					// Tai khoan KM4
					ICCCDR.bonusKM4Name = "";
					ICCCDR.bonusKM4Consumed = "";
					ICCCDR.bonusKM4Remaining = "";
					ICCCDR.bonusKM4Initial = "";
					
					// Tai khoan KM4T
					ICCCDR.bonusKM4TName = "";
					ICCCDR.bonusKM4TConsumed = "";
					ICCCDR.bonusKM4TRemaining = "";
					ICCCDR.bonusKM4TInitial = "";
					
					// Tai khoan KMDK4
					ICCCDR.bonusKMDK4Name = "";
					ICCCDR.bonusKMDK4Consumed = "";
					ICCCDR.bonusKMDK4Remaining = "";
					ICCCDR.bonusKMDK4Initial = "";
					
					// Tai khoan THOAILM1
					ICCCDR.bundleTHOAILM1Name = "";
					ICCCDR.bundleTHOAILM1Consumed = "";
					ICCCDR.bundleTHOAILM1Remaining = "";
					ICCCDR.bundleTHOAILM1Initial = "";
					
					//Tai khoan IRA
					ICCCDR.bonusIRAName = "";
					ICCCDR.bonusIRAConsumed = "";
					ICCCDR.bonusIRARemaining = "";
					ICCCDR.bonusIRAInitial = "";
				    
				    //Tai khoan IRB
					ICCCDR.bonusIRBName = "";
					ICCCDR.bonusIRBConsumed = "";
					ICCCDR.bonusIRBRemaining = "";
					ICCCDR.bonusIRBInitial = "";
				    
				    //Tai khoan IRVS
					ICCCDR.bonusIRVSName = "";
					ICCCDR.bonusIRVSConsumed = "";
					ICCCDR.bonusIRVSRemaining = "";
					ICCCDR.bonusIRVSInitial = "";
				    
				    //Tai khoan IRA
					ICCCDR.bonusIRSMSName = "";
					ICCCDR.bonusIRSMSConsumed = "";
					ICCCDR.bonusIRSMSRemaining = "";
					ICCCDR.bonusIRSMSInitial = "";
				    
				    //Tai khoan VOICE KM1
					ICCCDR.bundleVOICE_KM1Name = "";
					ICCCDR.bundleVOICE_KM1Consumed = "";
					ICCCDR.bundleVOICE_KM1Remaining = "";
					ICCCDR.bundleVOICE_KM1Initial = "";
				    
				    //Tai khoan DATA_31
					ICCCDR.bundleDATA_31Name = "";
					ICCCDR.bundleDATA_31Consumed = "";
					ICCCDR.bundleDATA_31Remaining = "";
					ICCCDR.bundleDATA_31Initial = "";
				    
				    //Tai khoan route number
					ICCCDR.routeNumber = "";
					
					//Tai khoan SMSRefill
					ICCCDR.bundleSMSRefillName = "";
					ICCCDR.bundleSMSRefillConsumed = "";
					ICCCDR.bundleSMSRefillRemaining = "";
					ICCCDR.bundleSMSRefillInitial = "";
					
					//Tai khoan VIDEO
					ICCCDR.bundleVIDEOName = "";
					ICCCDR.bundleVIDEOConsumed = "";
					ICCCDR.bundleVIDEORemaining = "";
					ICCCDR.bundleVIDEOInitial = "";
					
					//Tai khoan WALLET3
					ICCCDR.bundleWALLET3Name = "";
					ICCCDR.bundleWALLET3Consumed = "";
					ICCCDR.bundleWALLET3Remaining = "";
					ICCCDR.bundleWALLET3Initial = "";
					
					//Tai khoan RM
					ICCCDR.bundleRMName = "";
					ICCCDR.bundleRMConsumed = "";
					ICCCDR.bundleRMRemaining = "";
					ICCCDR.bundleRMInitial = "";
					
					//Tai khoan SMS3
					ICCCDR.bundleSMS3Name = "";
					ICCCDR.bundleSMS3Consumed = "";
					ICCCDR.bundleSMS3Remaining = "";
					ICCCDR.bundleSMS3Initial = "";
					
					//Tai khoan DataZ1
					ICCCDR.bundleDataZ1Name = "";
					ICCCDR.bundleDataZ1Consumed = "";
					ICCCDR.bundleDataZ1Remaining = "";
					ICCCDR.bundleDataZ1Initial = "";
					
					//Tai khoan DataZ2
					ICCCDR.bundleDataZ2Name = "";
					ICCCDR.bundleDataZ2Consumed = "";
					ICCCDR.bundleDataZ2Remaining = "";
					ICCCDR.bundleDataZ2Initial = "";
					
					//Tai khoan DataZ3
					ICCCDR.bundleDataZ3Name = "";
					ICCCDR.bundleDataZ3Consumed = "";
					ICCCDR.bundleDataZ3Remaining = "";
					ICCCDR.bundleDataZ3Initial = "";
					
					//Tai khoan LN 
					ICCCDR.bundleLNName = "";
					ICCCDR.bundleLNConsumed = "";
					ICCCDR.bundleLNRemaining = "";
					ICCCDR.bundleLNInitial = "";
					
					//Tai khoan TK1 
					ICCCDR.bonusTK1Name = "";
					ICCCDR.bonusTK1Consumed = "";
					ICCCDR.bonusTK1Remaining = "";
					ICCCDR.bonusTK1Initial = "";
					
					//Tai khoan KM1V 
					ICCCDR.bonusKM1VName = "";
					ICCCDR.bonusKM1VConsumed = "";
					ICCCDR.bonusKM1VRemaining = "";
					ICCCDR.bonusKM1VInitial = "";
					
					//Tai khoan KM2V 
					ICCCDR.bonusKM2VName = "";
					ICCCDR.bonusKM2VConsumed = "";
					ICCCDR.bonusKM2VRemaining = "";
					ICCCDR.bonusKM2VInitial = "";
					
					//Tai khoan KM3V 
					ICCCDR.bonusKM3VName = "";
					ICCCDR.bonusKM3VConsumed = "";
					ICCCDR.bonusKM3VRemaining = "";
					ICCCDR.bonusKM3VInitial = "";
					
					//Tai khoan KM4V 
					ICCCDR.bonusKM4VName = "";
					ICCCDR.bonusKM4VConsumed = "";
					ICCCDR.bonusKM4VRemaining = "";
					ICCCDR.bonusKM4VInitial = "";
					
					//Tai khoan Credit2 
					ICCCDR.bonusCredit2Name = "";
					ICCCDR.bonusCredit2Consumed = "";
					ICCCDR.bonusCredit2Remaining = "";
					ICCCDR.bonusCredit2Initial = "";
					
					//Tai khoan Credit3 
					ICCCDR.bonusCredit3Name = "";
					ICCCDR.bonusCredit3Consumed = "";
					ICCCDR.bonusCredit3Remaining = "";
					ICCCDR.bonusCredit3Initial = "";
					
					//Tai khoan DATA_LN 
					ICCCDR.bundleDATA_LNName = "";
					ICCCDR.bundleDATA_LNConsumed = "";
					ICCCDR.bundleDATA_LNRemaining = "";
					ICCCDR.bundleDATA_LNInitial = "";
					
					//Tai khoan DATA_VC 
					ICCCDR.bundleDATA_VCName = "";
					ICCCDR.bundleDATA_VCConsumed = "";
					ICCCDR.bundleDATA_VCRemaining = "";
					ICCCDR.bundleDATA_VCInitial = "";
					
					//Reseller ID
					ICCCDR.resellerId = "";

					accountTree = 0;
					// Added by Nguyen Tien Khai, handling duplicated subScriber
					// Type, calling isdn,acc profile,IMSI in call record.
					// --Date: 10-12-2012
					ICCCDR.duplicatedNotes = "";

					mRecLength = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]));
					mFileByte += 4;
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}

					convertICC462();
					// Analyzation
					AnalyseICC462();

					if (cdrfileParam.ChargeCDRFile) {
						appendValue(ICCCDR.RecordType);
						appendValue(ICCCDR.CallType);
						appendValue(ICCCDR.TagCallingNumber);
						appendValue(ICCCDR.TagIMSI); // Calling_imsi
						appendValue(ICCCDR.CallStartDateTime);
						appendValue(String.valueOf(ICCCDR.TagCallDuration1));
						appendValue(ICCCDR.CallEndDateTime1);
						appendValue(ICCCDR.TagCalledNumber);
						appendValue(ICCCDR.TagLocationNumber); // CELL_ID
						appendValue(ICCCDR.TagAccountProfileModification);
						appendValue(ICCCDR.TagRemainningCredit);
						appendValue(ICCCDR.TagOriginalCalledNumber);
						appendValue(ICCCDR.TagReFill_ScratchType);
						appendValue(ICCCDR.TagReFill_ScratchNumber);
						appendValue(String.valueOf(ICCCDR.TagReFill_ScratchValue));
						appendValue(ICCCDR.CallingOrg);
						appendValue(ICCCDR.CalledOrg);

						fileConvert.addText(mStrValues);
						mStrValues = "";
						try {
							String dateCallTime = ICCCDR.CallStartDateTime.substring(6, 8) + "/"
									+ ICCCDR.CallStartDateTime.substring(4, 6) + "/"
									+ ICCCDR.CallStartDateTime.substring(0, 4) + " "
									+ ICCCDR.CallStartDateTime.substring(8, 10) + ":"
									+ ICCCDR.CallStartDateTime.substring(10, 12) + ":"
									+ ICCCDR.CallStartDateTime.substring(12, 14);
							if (lastCallingTime.equals("")) {
								lastCallingTime = dateCallTime;
							} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
								lastCallingTime = lastCallingTime;
							}
							// get first calling time.(18/02/2011)
							if (firstCallingTime.equals("")) {
								firstCallingTime = dateCallTime;
							} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
								firstCallingTime = dateCallTime;
							}

						} catch (Exception ex) {
						}
					} else {
						mRecN++;
						mStrValues = mRecN + "|" + pCenterID + "|" + ICCCDR.CallType + "|" + "|" + "|" + "|" + "|"
								+ ICCCDR.TagCallingNumber + "|" + ICCCDR.TagIMSI + "|"
								+ ICCCDR.CallStartDateTime.substring(6, 8) + "/"
								+ ICCCDR.CallStartDateTime.substring(4, 6) + "/"
								+ ICCCDR.CallStartDateTime.substring(0, 4) + " "
								+ ICCCDR.CallStartDateTime.substring(8, 10) + ":"
								+ ICCCDR.CallStartDateTime.substring(10, 12) + ":"
								+ ICCCDR.CallStartDateTime.substring(12, 14) + "|" + ICCCDR.TagCallDuration + "|"
								+ ICCCDR.TagCallDuration1 + "|" + ICCCDR.CallEndDateTime1 + "|" + ICCCDR.TagCalledNumber
								+ "|" + ICCCDR.TagLocationNumber + "|" + ICCCDR.TagOriginalCalledNumber + "|"
								+ ICCCDR.TagReFill_ScratchType + "|" + ICCCDR.TagReFill_ScratchNumber + "|"
								+ ICCCDR.TagReFill_ScratchValue + "|" + ICCCDR.TagAccountProfileModification + "|"
								+ ICCCDR.CallingOrg + "|" + ICCCDR.CalledOrg + "|" + ICCCDR.eventTypeName + "|"
								+ ICCCDR.cellGlobalIdentifier + "|" + ICCCDR.sgsnAddress + "|" + ICCCDR.NetEleID + "|"
								+ ICCCDR.NetEleTranID + "|" + ICCCDR.zoneOrgArea + "|" + ICCCDR.zoneDestArea + "|"
								+ ICCCDR.locationIndicator + "|" + ICCCDR.subScriberType + "|" + ICCCDR.usedQuantity1
								+ "|" + ICCCDR.DestCharingMatrix +
								// Start Account Tree.
								"|" + ICCCDR.limitDateDKBucket + "|" + ICCCDR.allocatedDKBucket + "|"
								+ ICCCDR.consumedDKUnit + "|" + ICCCDR.remainingDKUnit + "|" + ICCCDR.initialDKUnit
								+ "|" + ICCCDR.limitDateKMBucket + "|" + ICCCDR.allocatedKMBucket + "|"
								+ ICCCDR.consumedKMUnit + "|" + ICCCDR.remainingKMUnit + "|" + ICCCDR.initialKMUnit
								+ "|" + ICCCDR.limitDatePacketBucket + "|" + ICCCDR.allocatedPacketBucket + "|"
								+ ICCCDR.consumedPacketUnit + "|" + ICCCDR.remainingPacketUnit + "|"
								+ ICCCDR.initialPacketUnit + "|" + ICCCDR.limitDatePacketOPBucket + "|"
								+ ICCCDR.allocatedPacketOPBucket + "|" + ICCCDR.consumedPacketOPUnit + "|"
								+ ICCCDR.remainingPacketOPUnit + "|" + ICCCDR.initialPacketOPUnit + "|"
								+ ICCCDR.limitDateKMDK1Bucket + "|" + ICCCDR.allocatedKMDK1Bucket + "|"
								+ ICCCDR.consumedKMDK1Unit + "|" + ICCCDR.remainingKMDK1Unit + "|"
								+ ICCCDR.initialKMDK1Unit + "|" + ICCCDR.limitDateKMDK2Bucket + "|"
								+ ICCCDR.allocatedKMDK2Bucket + "|" + ICCCDR.consumedKMDK2Unit + "|"
								+ ICCCDR.remainingKMDK2Unit + "|" + ICCCDR.initialKMDK2Unit + "|"
								+ ICCCDR.limitDateKMDK3Bucket + "|" + ICCCDR.allocatedKMDK3Bucket + "|"
								+ ICCCDR.consumedKMDK3Unit + "|" + ICCCDR.remainingKMDK3Unit + "|"
								+ ICCCDR.initialKMDK3Unit + "|" + ICCCDR.limitDateKM1Bucket + "|"
								+ ICCCDR.allocatedKM1Bucket + "|" + ICCCDR.consumedKM1Unit + "|"
								+ ICCCDR.remainingKM1Unit + "|" + ICCCDR.initialKM1Unit + "|"
								+ ICCCDR.limitDateKM2Bucket + "|" + ICCCDR.allocatedKM2Bucket + "|"
								+ ICCCDR.consumedKM2Unit + "|" + ICCCDR.remainingKM2Unit + "|" + ICCCDR.initialKM2Unit
								+ "|" + ICCCDR.limitDateKM3Bucket + "|" + ICCCDR.allocatedKM3Bucket + "|"
								+ ICCCDR.consumedKM3Unit + "|" + ICCCDR.remainingKM3Unit + "|" + ICCCDR.initialKM3Unit
								+ "|" + ICCCDR.creditBeforeTrans + "|" + ICCCDR.eventCostVat + "|"
								+ ICCCDR.TagRemainningCredit + "|" + ICCCDR.serviceId + "|" + ICCCDR.feeName + "|"
								+ ICCCDR.TranDesc;

						// --
						mStrValues += "|" + ICCCDR.AmountSwapped + "|" + ICCCDR.Fee + "|" + ICCCDR.NumberOfDaysSwapped
								+ "|" + ICCCDR.SpecificChargingIndicator + "|" + ICCCDR.NameOfCUG;
						mStrValues += "|" + ICCCDR.bundleLMLimitDate + "|" + ICCCDR.bundleLMAllocated + "|"
								+ ICCCDR.bundleLMConsumed + "|" + ICCCDR.bundleLMRemaining + "|"
								+ ICCCDR.bundleLMInitial;
						mStrValues += "|" + ICCCDR.bundleCLMLimitDate + "|" + ICCCDR.bundleCLMAllocated + "|"
								+ ICCCDR.bundleCLMConsumed + "|" + ICCCDR.bundleCLMRemaining + "|"
								+ ICCCDR.bundleCLMInitial;
						mStrValues += "|" + ICCCDR.discardedCredit + "|" + ICCCDR.bundleVNPT1LimitDate + "|"
								+ ICCCDR.bundleVNPT1Allocated + "|" + ICCCDR.bundleVNPT1Consumed + "|"
								+ ICCCDR.bundleVNPT1Remaining + "|" + ICCCDR.bundleVNPT1Initial;
						mStrValues += "|" + ICCCDR.bundleCredit1LimitDate + "|" + ICCCDR.bundleCredit1Allocated + "|"
								+ ICCCDR.bundleCredit1Consumed + "|" + ICCCDR.bundleCredit1Remaining + "|"
								+ ICCCDR.bundleCredit1Initial;
						mStrValues += "|" + ICCCDR.orgCallStaTime + "|" + ICCCDR.tariffPlanName;
						mStrValues += "|" + ICCCDR.bonusKM2TLimitDate + "|" + ICCCDR.bonusKM2TAllocated + "|"
								+ ICCCDR.bonusKM2TConsumed + "|" + ICCCDR.bonusKM2TRemaining + "|"
								+ ICCCDR.bonusKM2TInitial;
						mStrValues += "|" + ICCCDR.bonusKM3TLimitDate + "|" + ICCCDR.bonusKM3TAllocated + "|"
								+ ICCCDR.bonusKM3TConsumed + "|" + ICCCDR.bonusKM3TRemaining + "|"
								+ ICCCDR.bonusKM3TInitial;
						mStrValues += "|" + ICCCDR.bundleVOICETHLimitDate + "|" + ICCCDR.bundleVOICETHAllocated + "|"
								+ ICCCDR.bundleVOICETHConsumed + "|" + ICCCDR.bundleVOICETHRemaining + "|"
								+ ICCCDR.bundleVOICETHInitial;
						mStrValues += "|" + ICCCDR.bonusKM1TLimitDate + "|" + ICCCDR.bonusKM1TAllocated + "|"
								+ ICCCDR.bonusKM1TConsumed + "|" + ICCCDR.bonusKM1TRemaining + "|"
								+ ICCCDR.bonusKM1TInitial;
						mStrValues += "|" + ICCCDR.bundleGPRS0LimitDate + "|" + ICCCDR.bundleGPRS0Allocated + "|"
								+ ICCCDR.bundleGPRS0Consumed + "|" + ICCCDR.bundleGPRS0Remaining + "|"
								+ ICCCDR.bundleGPRS0Initial;
						mStrValues += "|" + ICCCDR.bundleWALLET1LimitDate + "|" + ICCCDR.bundleWALLET1Allocated + "|"
								+ ICCCDR.bundleWALLET1Consumed + "|" + ICCCDR.bundleWALLET1Remaining + "|"
								+ ICCCDR.bundleWALLET1Initial;
						mStrValues += "|" + ICCCDR.bundleWALLET2LimitDate + "|" + ICCCDR.bundleWALLET2Allocated + "|"
								+ ICCCDR.bundleWALLET2Consumed + "|" + ICCCDR.bundleWALLET2Remaining + "|"
								+ ICCCDR.bundleWALLET2Initial;
						mStrValues += "|" + ICCCDR.bundleIRDLimitDate + "|" + ICCCDR.bundleIRDAllocated + "|"
								+ ICCCDR.bundleIRDConsumed + "|" + ICCCDR.bundleIRDRemaining + "|"
								+ ICCCDR.bundleIRDInitial;
						mStrValues += "|" + ICCCDR.causeRecClose + "|" + ICCCDR.correlationIdentifier + "|"
								+ ICCCDR.communityIdentifier + "|" + ICCCDR.topupProfile;
						mStrValues += "|" + ICCCDR.oldFnfNum + "|" + ICCCDR.newFnfNum + "|" + ICCCDR.accPreLang + "|"
								+ ICCCDR.accCurLang;
						mStrValues += "|" + ICCCDR.bundleGROUPLimitDate + "|" + ICCCDR.bundleGROUPAllocated + "|"
								+ ICCCDR.bundleGROUPConsumed + "|" + ICCCDR.bundleGROUPRemaining + "|"
								+ ICCCDR.bundleGROUPInitial;
						mStrValues += "|" + ICCCDR.bundleKM99TLimitDate + "|" + ICCCDR.bundleKM99TAllocated + "|"
								+ ICCCDR.bundleKM99TConsumed + "|" + ICCCDR.bundleKM99TRemaining + "|"
								+ ICCCDR.bundleKM99TInitial;
						mStrValues += "|" + ICCCDR.bundleLM1Name + "|" + ICCCDR.bundleLM1LimitDate + "|"
								+ ICCCDR.bundleLM1Allocated + "|" + ICCCDR.bundleLM1Consumed + "|"
								+ ICCCDR.bundleLM1Remaining + "|" + ICCCDR.bundleLM1Initial;
						mStrValues += "|" + ICCCDR.bundleDATA_KM1Name + "|" + ICCCDR.bundleDATA_KM1LimitDate + "|"
								+ ICCCDR.bundleDATA_KM1Allocated + "|" + ICCCDR.bundleDATA_KM1Consumed + "|"
								+ ICCCDR.bundleDATA_KM1Remaining + "|" + ICCCDR.bundleDATA_KM1Initial;
						mStrValues += "|" + ICCCDR.InServiceResult;
						mStrValues += "|" + ICCCDR.bundleDATA6Name + "|" + ICCCDR.bundleDATA6Consumed + "|"
								+ ICCCDR.bundleDATA6Remaining + "|" + ICCCDR.bundleDATA6Initial;
						mStrValues += "|" + ICCCDR.bundleKMKNDLName + "|" + ICCCDR.bundleKMKNDLConsumed + "|"
								+ ICCCDR.bundleKMKNDLRemaining + "|" + ICCCDR.bundleKMKNDLInitial;
						mStrValues += "|" + ICCCDR.bundleLM_DLName + "|" + ICCCDR.bundleLM_DLConsumed + "|"
								+ ICCCDR.bundleLM_DLRemaining + "|" + ICCCDR.bundleLM_DLInitial;
						mStrValues += "|" + ICCCDR.bundleDATA5Name + "|" + ICCCDR.bundleDATA5Consumed + "|"
								+ ICCCDR.bundleDATA5Remaining + "|" + ICCCDR.bundleDATA5Initial;
						mStrValues += "|" + ICCCDR.bundleCSName + "|" + ICCCDR.bundleCSConsumed + "|"
								+ ICCCDR.bundleCSRemaining + "|" + ICCCDR.bundleCSInitial;
						mStrValues += "|" + ICCCDR.bundleWifiName + "|" + ICCCDR.bundleWifiConsumed + "|"
								+ ICCCDR.bundleWifiRemaining + "|" + ICCCDR.bundleWifiInitial;
						mStrValues += "|" + ICCCDR.bundleDataDemName + "|" + ICCCDR.bundleDataDemConsumed + "|"
								+ ICCCDR.bundleDataDemRemaining + "|" + ICCCDR.bundleDataDemInitial;
						mStrValues += "|" + ICCCDR.bundleMLoyaltyName + "|" + ICCCDR.bundleMLoyaltyConsumed + "|"
								+ ICCCDR.bundleMLoyaltyRemaining + "|" + ICCCDR.bundleMLoyaltyInitial;
						
						mStrValues += "|" + ICCCDR.bonusKM4Name + "|" + ICCCDR.bonusKM4Consumed + "|"
								+ ICCCDR.bonusKM4Remaining + "|" + ICCCDR.bonusKM4Initial;
						mStrValues += "|" + ICCCDR.bonusKM4TName + "|" + ICCCDR.bonusKM4TConsumed + "|"
								+ ICCCDR.bonusKM4TRemaining + "|" + ICCCDR.bonusKM4TInitial;
						mStrValues += "|" + ICCCDR.bonusKMDK4Name + "|" + ICCCDR.bonusKMDK4Consumed + "|"
								+ ICCCDR.bonusKMDK4Remaining + "|" + ICCCDR.bonusKMDK4Initial;
						mStrValues += "|" + ICCCDR.bundleTHOAILM1Name + "|" + ICCCDR.bundleTHOAILM1Consumed + "|"
								+ ICCCDR.bundleTHOAILM1Remaining + "|" + ICCCDR.bundleTHOAILM1Initial;
						
						mStrValues += "|" + ICCCDR.bonusIRAName + "|" + ICCCDR.bonusIRAConsumed + "|"
								+ ICCCDR.bonusIRARemaining + "|" + ICCCDR.bonusIRAInitial;
						mStrValues += "|" + ICCCDR.bonusIRBName + "|" + ICCCDR.bonusIRBConsumed + "|"
								+ ICCCDR.bonusIRBRemaining + "|" + ICCCDR.bonusIRBInitial;
						mStrValues += "|" + ICCCDR.bonusIRVSName + "|" + ICCCDR.bonusIRVSConsumed + "|"
								+ ICCCDR.bonusIRVSRemaining + "|" + ICCCDR.bonusIRVSInitial;
						mStrValues += "|" + ICCCDR.bonusIRSMSName + "|" + ICCCDR.bonusIRSMSConsumed + "|"
								+ ICCCDR.bonusIRSMSRemaining + "|" + ICCCDR.bonusIRSMSInitial;
						mStrValues += "|" + ICCCDR.bundleVOICE_KM1Name + "|" + ICCCDR.bundleVOICE_KM1Consumed + "|"
								+ ICCCDR.bundleVOICE_KM1Remaining + "|" + ICCCDR.bundleVOICE_KM1Initial;
						mStrValues += "|" + ICCCDR.bundleDATA_31Name + "|" + ICCCDR.bundleDATA_31Consumed + "|"
								+ ICCCDR.bundleDATA_31Remaining + "|" + ICCCDR.bundleDATA_31Initial;
						mStrValues += "|" + ICCCDR.routeNumber;
						
						mStrValues += "|" + ICCCDR.bundleSMSRefillName + "|" + ICCCDR.bundleSMSRefillConsumed + "|"
								+ ICCCDR.bundleSMSRefillRemaining + "|" + ICCCDR.bundleSMSRefillInitial;
						mStrValues += "|" + ICCCDR.bundleVIDEOName + "|" + ICCCDR.bundleVIDEOConsumed + "|"
								+ ICCCDR.bundleVIDEORemaining + "|" + ICCCDR.bundleVIDEOInitial;
						mStrValues += "|" + ICCCDR.bundleWALLET3Name + "|" + ICCCDR.bundleWALLET3Consumed + "|"
								+ ICCCDR.bundleWALLET3Remaining + "|" + ICCCDR.bundleWALLET3Initial;
						mStrValues += "|" + ICCCDR.bundleRMName + "|" + ICCCDR.bundleRMConsumed + "|"
								+ ICCCDR.bundleRMRemaining + "|" + ICCCDR.bundleRMInitial;
						mStrValues += "|" + ICCCDR.bundleSMS3Name + "|" + ICCCDR.bundleDataZ1Consumed + "|"
								+ ICCCDR.bundleDataZ1Remaining + "|" + ICCCDR.bundleDataZ1Initial;
						mStrValues += "|" + ICCCDR.bundleDataZ1Name + "|" + ICCCDR.bonusIRAConsumed + "|"
								+ ICCCDR.bonusIRARemaining + "|" + ICCCDR.bonusIRAInitial;
						mStrValues += "|" + ICCCDR.bundleDataZ2Name + "|" + ICCCDR.bundleDataZ2Consumed + "|"
								+ ICCCDR.bundleDataZ2Remaining + "|" + ICCCDR.bundleDataZ2Initial;
						mStrValues += "|" + ICCCDR.bundleDataZ3Name + "|" + ICCCDR.bundleDataZ3Consumed + "|"
								+ ICCCDR.bundleDataZ3Remaining + "|" + ICCCDR.bundleDataZ3Initial;
						mStrValues += "|" + ICCCDR.bundleLNName + "|" + ICCCDR.bundleLNConsumed + "|"
								+ ICCCDR.bundleLNRemaining + "|" + ICCCDR.bundleLNInitial;
						mStrValues += "|" + ICCCDR.bonusTK1Name + "|" + ICCCDR.bonusTK1Consumed + "|"
								+ ICCCDR.bonusTK1Remaining + "|" + ICCCDR.bonusTK1Initial;
						mStrValues += "|" + ICCCDR.bonusKM1VName + "|" + ICCCDR.bonusKM1VConsumed + "|"
								+ ICCCDR.bonusKM1VRemaining + "|" + ICCCDR.bonusKM1VInitial;
						mStrValues += "|" + ICCCDR.bonusKM2VName + "|" + ICCCDR.bonusKM2VConsumed + "|"
								+ ICCCDR.bonusKM2VRemaining + "|" + ICCCDR.bonusKM2VInitial;
						mStrValues += "|" + ICCCDR.bonusKM3VName + "|" + ICCCDR.bonusKM3VConsumed + "|"
								+ ICCCDR.bonusKM3VRemaining + "|" + ICCCDR.bonusKM3VInitial;
						mStrValues += "|" + ICCCDR.bonusKM4VName + "|" + ICCCDR.bonusKM4VConsumed + "|"
								+ ICCCDR.bonusKM4VRemaining + "|" + ICCCDR.bonusKM4VInitial;
						mStrValues += "|" + ICCCDR.reasonCode;
						mStrValues += "|" + ICCCDR.bonusCredit2Name + "|" + ICCCDR.bonusCredit2Consumed + "|"
								+ ICCCDR.bonusCredit2Remaining + "|" + ICCCDR.bonusCredit2Initial;
						mStrValues += "|" + ICCCDR.bonusCredit3Name + "|" + ICCCDR.bonusCredit3Consumed + "|"
								+ ICCCDR.bonusCredit3Remaining + "|" + ICCCDR.bonusCredit3Initial;
						mStrValues += "|" + ICCCDR.bundleDATA_LNName + "|" + ICCCDR.bundleDATA_LNConsumed + "|"
								+ ICCCDR.bundleDATA_LNRemaining + "|" + ICCCDR.bundleDATA_LNInitial;
						mStrValues += "|" + ICCCDR.bundleDATA_VCName + "|" + ICCCDR.bundleDATA_VCConsumed + "|"
								+ ICCCDR.bundleDATA_VCRemaining + "|" + ICCCDR.bundleDATA_VCInitial ;
						mStrValues += "|" +ICCCDR.resellerId;
						
						/*
						 * Add field calling isdn change
						 * calling isdn = ICCCDR.TagCallingNumber
						 * 
						 * @Author: thuongnv
						 */
						
						//System.out.println(ICCCDR.TagCallingNumber);
						mStrValues += "|" + convertHeadNumber(ICCCDR.TagCallingNumber);
						//End thuonvnv edit
						// --End--
						fileConvert.addText(mStrValues);
						mStrValues = "";
						try {
							String dateCallTime = ICCCDR.CallStartDateTime.substring(6, 8) + "/"
									+ ICCCDR.CallStartDateTime.substring(4, 6) + "/"
									+ ICCCDR.CallStartDateTime.substring(0, 4) + " "
									+ ICCCDR.CallStartDateTime.substring(8, 10) + ":"
									+ ICCCDR.CallStartDateTime.substring(10, 12) + ":"
									+ ICCCDR.CallStartDateTime.substring(12, 14);
							if (lastCallingTime.equals("")) {
								lastCallingTime = dateCallTime;
							} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
								lastCallingTime = lastCallingTime;
							}
							// get first calling time.(18/02/2011)
							if (firstCallingTime.equals("")) {
								firstCallingTime = dateCallTime;
							} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
								firstCallingTime = dateCallTime;
							}

						} catch (Exception ex) {
						}
						if (ICCCDR.duplicatedNotes.length() > 0) {
							if (duplicatedNotes.length() == 0)
								duplicatedNotes += mRecN + ":" + ICCCDR.duplicatedNotes;
							else
								duplicatedNotes += ";" + mRecN + ":" + ICCCDR.duplicatedNotes;
						}
					}
				}
				writeLogFile("         - OG                : " + Global.rpad(Integer.toString(mRecOG), 6, " "));
				writeLogFile("         - IC                : " + Global.rpad(Integer.toString(mRecIC), 6, " "));
				writeLogFile("         - Divert            : " + Global.rpad(Integer.toString(mRecDivert), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - DATA              : " + Global.rpad(Integer.toString(mRecData), 6, " "));
				writeLogFile("         - Other rec         : " + Global.rpad(Integer.toString(mRecOther), 6, " "));
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecOG + mRecIC + mRecDivert + mRecSMO + mRecSMT + mRecData;
				if (duplicatedNotes.length() > 0)
					duplicatedNotes = "Duplicated values at records - " + duplicatedNotes;
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",note='" + duplicatedNotes + "',rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic="
							+ mRecIC + ",rec_smo=" + mRecSMO + ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther
							+ ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert + ",min_calling_time='"
							+ lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = "
							+ pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",note='"
							+ duplicatedNotes + "',rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC
							+ ",rec_smo=" + mRecSMO + ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther
							+ ",rec_convert=" + mRecConvert + ",rec_divert=" + mRecDivert + ",min_calling_time='"
							+ lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = "
							+ pFileID;
				}
				//Global.ExecuteSQL(mConnection, mSQL);
				//mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}

			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

	}

	class ConvertSGSN {

		protected StructSGSN structSGSN = new StructSGSN();
		protected int mEncapsulationLength = 0;
		protected int mFeature = 0;
		protected int mSubFeature = 0;
		protected int mType = 0;
		protected int mSubType = 0;
		protected int mStktVarParLength = 0;
		protected int mEleLength = 0;
		protected String mEleValue = "";
		protected int mRet = 0;
		protected int mEventLength = 0;
		protected String mClass = "";
		protected String mObject = "";
		protected String mStartDateTime = "";
		protected int mValueLength = 0;
		protected int mRecPDP = 0;
		protected int mRecMM = 0;
		protected int mRecSMO = 0;
		protected int mRecSMT = 0;
		protected int mRecMBMS = 0;

		// SG6CD14
		protected int GPP_SGSNFile(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mSGSNHeaderCharge);
				} else {
					fileConvert.addText(Global.mSGSGHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				mEventLength = 0;
				mClass = "";
				mObject = "";
				mStartDateTime = "";
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;
				while (mFileByte < mFileLength) {
					mRecLength = 0;
					structSGSN.recordType = 0;
					structSGSN.networkInitiation = "";
					structSGSN.servedIMSI = "";
					structSGSN.servedIMEI = "";
					structSGSN.sgsnAddress = "";
					structSGSN.msNetworkCapability = "";
					structSGSN.routingAreaCode = "";
					structSGSN.locationAreaCode = 0;
					structSGSN.cellIdentifier = 0;
					structSGSN.chargingID = 0;
					structSGSN.ggsnAddressUsed = "";
					structSGSN.accessPointNameNI = "";
					structSGSN.pDPType = "";
					structSGSN.servedPDPAddress = "";
					// structSGSN.listOfTrafficVolumes = "";
					structSGSN.qosRequested = "";
					structSGSN.qosNegotiated = "";
					structSGSN.dataVolumeGPRSUplink = 0;
					structSGSN.dataVolumeGPRSDownlink = 0;
					structSGSN.changeCondition = "";
					structSGSN.changeTime = "";
					structSGSN.failureHandlingContinue = "";
					structSGSN.userLocationInformation = "";

					structSGSN.recordOpeningTime = "";
					structSGSN.duration = 0;
					structSGSN.sGSNChange = "";
					structSGSN.causeForRecClosing = 0;
					structSGSN.diagnostics = 0;
					structSGSN.recordSequenceNumber = 0;
					structSGSN.nodeId = "";
					structSGSN.recordExtensions = "";
					structSGSN.localSequenceNumber = 0;
					structSGSN.aPNSelectionMode = "";
					structSGSN.accessPointNameOI = "";
					structSGSN.servedMSISDN = "";
					structSGSN.chargingCharacteristics = "";
					structSGSN.rATType = 0;
					structSGSN.cAMELInformationPDP = "";
					structSGSN.rNCUnsentDownlinkVolume = 0;
					structSGSN.chChSelectionMode = "";
					structSGSN.dynamicAddressFlag = "";
					structSGSN.numberOfSequence = 0;

					int btTemp = Global.fixSignedByte(mBuffer[mFileByte]);
					int miTagClass = (byte) ((btTemp & 0xc0) >>> 6);
					btTemp &= 0x3f;
					byte mbtConstructed = (byte) ((btTemp & 0xe0) >>> 5);
					btTemp &= 0x1f;
					int miTagID = btTemp;
					mFileByte++;
					if (miTagID >= 31) {
						miTagID = 0;
						boolean bfound = false;
						int tmp;
						while (!bfound) {
							tmp = Global.fixSignedByte(mBuffer[mFileByte]);
							mFileByte++;
							bfound = tmp >>> 7 == 0;
							tmp &= 0x7f;
							miTagID |= tmp;
						}
					}

					int bytesOfLength = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte++;
					if (bytesOfLength > 128) {
						bytesOfLength = bytesOfLength - 128;
						for (int i = 1; i <= bytesOfLength; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (bytesOfLength - i));
							mFileByte++;
						}

					} else {
						mRecLength = bytesOfLength;
					}

					/*
					 * mFileByte++;// tag of length mRecLength =
					 * Global.fixSignedByte(mBuffer[mFileByte]); // value of
					 * length mFileByte++;
					 */
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}

					switch (miTagID) {
					case 20:
						mRecPDP++;
						// if (mRecPDP==736)
						// //System.out.println("");
						convertSGSNPDPRecord();
						AnalyseSGSNPDPRecord();
						break;
					case 22:
						mRecMM++;
						convertSGSNMMRecord();
						// AnalyseSGSNMMRecord();
						break;
					case 23:
						mRecSMO++;
						convertSGSNSMORecord();
						// AnalyseSGSNSMORecord();
						break;
					case 24:
						mRecSMT++;
						convertSGSNSMTRecord();
						// AnalyseSGSNSMTRecord();
						break;
					case 76:
						mRecMBMS++;
						convertSGSNMBMSRecord();
						// AnalyseSGSNMBMSRecord();
						break;
					}

					if (cdrfileParam.ChargeCDRFile) {
						appendValue("" + structSGSN.recordType);
						appendValue(structSGSN.networkInitiation);
						appendValue(structSGSN.servedIMSI);
						appendValue(structSGSN.servedIMEI);
						appendValue(structSGSN.sgsnAddress);
						appendValue(structSGSN.msNetworkCapability);
						appendValue(structSGSN.routingAreaCode);
						appendValue("" + structSGSN.locationAreaCode);
						appendValue("" + structSGSN.cellIdentifier);
						appendValue("" + structSGSN.chargingID);
						appendValue(structSGSN.ggsnAddressUsed);
						appendValue(structSGSN.accessPointNameNI);
						appendValue(structSGSN.pDPType);
						appendValue(structSGSN.servedPDPAddress);
						// appendValue(structSGSN.listOfTrafficVolumes);
						appendValue("" + structSGSN.dataVolumeGPRSUplink);
						appendValue("" + structSGSN.dataVolumeGPRSDownlink);
						appendValue(structSGSN.recordOpeningTime);
						appendValue("" + structSGSN.duration);
						appendValue(structSGSN.sGSNChange);
						appendValue("" + structSGSN.causeForRecClosing);
						appendValue("" + structSGSN.diagnostics);
						appendValue("" + structSGSN.recordSequenceNumber);
						appendValue(structSGSN.nodeId);
						appendValue(structSGSN.recordExtensions);
						appendValue("" + structSGSN.localSequenceNumber);
						appendValue(structSGSN.aPNSelectionMode);
						appendValue(structSGSN.accessPointNameOI);
						appendValue(structSGSN.servedMSISDN);
						appendValue(structSGSN.chargingCharacteristics);
						appendValue("" + structSGSN.rATType);
						appendValue(structSGSN.cAMELInformationPDP);
						appendValue("" + structSGSN.rNCUnsentDownlinkVolume);
						appendValue(structSGSN.chChSelectionMode);
						appendValue(structSGSN.dynamicAddressFlag);
						appendValue("" + structSGSN.numberOfSequence);

						fileConvert.addText(mStrValues);
					} else {
						mRecN++;
						mStrValues = mRecN + "|" + structSGSN.recordType + "|" + structSGSN.networkInitiation + "|"
								+ structSGSN.servedIMSI + "|" + structSGSN.servedIMEI + "|" + structSGSN.sgsnAddress
								+ "|" + structSGSN.msNetworkCapability + "|" + structSGSN.routingAreaCode + "|"
								+ structSGSN.locationAreaCode + "|" + structSGSN.cellIdentifier + "|"
								+ structSGSN.chargingID + "|" + structSGSN.ggsnAddressUsed + "|"
								+ structSGSN.accessPointNameNI + "|" + structSGSN.pDPType + "|"
								+ structSGSN.servedPDPAddress + "|"
								// + structSGSN.listOfTrafficVolumes + "|"
								+ structSGSN.dataVolumeGPRSUplink + "|" + structSGSN.dataVolumeGPRSDownlink + "|"
								+ structSGSN.recordOpeningTime + "|" + structSGSN.duration + "|" + structSGSN.sGSNChange
								+ "|" + structSGSN.causeForRecClosing + "|" + structSGSN.diagnostics + "|"
								+ structSGSN.recordSequenceNumber + "|" + structSGSN.nodeId + "|"
								+ structSGSN.recordExtensions + "|" + structSGSN.localSequenceNumber + "|"
								+ structSGSN.aPNSelectionMode + "|" + structSGSN.accessPointNameOI + "|"
								+ structSGSN.servedMSISDN + "|" + structSGSN.chargingCharacteristics + "|"
								+ structSGSN.rATType + "|" + structSGSN.cAMELInformationPDP + "|"
								+ structSGSN.rNCUnsentDownlinkVolume + "|" + structSGSN.chChSelectionMode + "|"
								+ structSGSN.dynamicAddressFlag + "|" + structSGSN.numberOfSequence;
						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}
				writeLogFile("         - PDP               : " + Global.rpad(Integer.toString(mRecPDP), 6, " "));
				writeLogFile("         - MM                : " + Global.rpad(Integer.toString(mRecMM), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - MBMS              : " + Global.rpad(Integer.toString(mRecMBMS), 6, " "));

				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecPDP + mRecMM + mRecSMO + mRecSMT + mRecMBMS;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}

			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		// SG7CD8
		protected int SG7CD8_GPP_SGSNFile(String pSourceConvert, String pFileName, int pFileID,
				String pDestinationConvert, String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID)
						throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";
			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mSGSNHeaderCharge);
				} else {
					fileConvert.addText(Global.mSGSGHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;
				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;
				mEventLength = 0;
				mClass = "";
				mObject = "";
				mStartDateTime = "";
				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;
				while (mFileByte < mFileLength) {
					mRecLength = 0;
					structSGSN.recordType = 0;
					structSGSN.networkInitiation = "";
					structSGSN.servedIMSI = "";
					structSGSN.servedIMEI = "";
					structSGSN.sgsnAddress = "";
					structSGSN.msNetworkCapability = "";
					structSGSN.routingAreaCode = "";
					structSGSN.locationAreaCode = 0;
					structSGSN.cellIdentifier = 0;
					structSGSN.chargingID = 0;
					structSGSN.ggsnAddressUsed = "";
					structSGSN.accessPointNameNI = "";
					structSGSN.pDPType = "";
					structSGSN.servedPDPAddress = "";
					// structSGSN.listOfTrafficVolumes = "";
					structSGSN.qosRequested = "";
					structSGSN.qosNegotiated = "";
					structSGSN.dataVolumeGPRSUplink = 0;
					structSGSN.dataVolumeGPRSDownlink = 0;
					structSGSN.changeCondition = "";
					structSGSN.changeTime = "";
					structSGSN.failureHandlingContinue = "";
					structSGSN.userLocationInformation = "";

					structSGSN.recordOpeningTime = "";
					structSGSN.duration = 0;
					structSGSN.sGSNChange = "";
					structSGSN.causeForRecClosing = 0;
					structSGSN.diagnostics = 0;
					structSGSN.recordSequenceNumber = 0;
					structSGSN.nodeId = "";
					structSGSN.recordExtensions = "";
					structSGSN.localSequenceNumber = 0;
					structSGSN.aPNSelectionMode = "";
					structSGSN.accessPointNameOI = "";
					structSGSN.servedMSISDN = "";
					structSGSN.chargingCharacteristics = "";
					structSGSN.rATType = 0;
					structSGSN.cAMELInformationPDP = "";
					structSGSN.rNCUnsentDownlinkVolume = 0;
					structSGSN.chChSelectionMode = "";
					structSGSN.dynamicAddressFlag = "";
					structSGSN.numberOfSequence = 0;

					int btTemp = Global.fixSignedByte(mBuffer[mFileByte]);
					int miTagClass = (byte) ((btTemp & 0xc0) >>> 6);
					btTemp &= 0x3f;
					byte mbtConstructed = (byte) ((btTemp & 0xe0) >>> 5);
					btTemp &= 0x1f;
					int miTagID = btTemp;
					mFileByte++;
					if (miTagID >= 31) {
						miTagID = 0;
						boolean bfound = false;
						int tmp;
						while (!bfound) {
							tmp = Global.fixSignedByte(mBuffer[mFileByte]);
							mFileByte++;
							bfound = tmp >>> 7 == 0;
							tmp &= 0x7f;
							miTagID |= tmp;
						}
					}

					int bytesOfLength = Global.fixSignedByte(mBuffer[mFileByte]);
					mFileByte++;
					if (bytesOfLength > 128) {
						bytesOfLength = bytesOfLength - 128;
						for (int i = 1; i <= bytesOfLength; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (bytesOfLength - i));
							mFileByte++;
						}

					} else {
						mRecLength = bytesOfLength;
					}

					/*
					 * mFileByte++;// tag of length mRecLength =
					 * Global.fixSignedByte(mBuffer[mFileByte]); // value of
					 * length mFileByte++;
					 */
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}

					switch (miTagID) {
					case 20:
						mRecPDP++;
						convertSGSNSG7CD8PDPRecord();
						AnalyseSGSNSG7CD8PDPRecord();
						break;
					case 22:
						mRecMM++;
						convertSGSNMMRecord();
						// AnalyseSGSNMMRecord();
						break;
					case 23:
						mRecSMO++;
						convertSGSNSMORecord();
						// AnalyseSGSNSMORecord();
						break;
					case 24:
						mRecSMT++;
						convertSGSNSMTRecord();
						// AnalyseSGSNSMTRecord();
						break;
					case 76:
						mRecMBMS++;
						convertSGSNMBMSRecord();
						// AnalyseSGSNMBMSRecord();
						break;
					}

					if (cdrfileParam.ChargeCDRFile) {
						appendValue("" + structSGSN.recordType);
						appendValue(structSGSN.networkInitiation);
						appendValue(structSGSN.servedIMSI);
						appendValue(structSGSN.servedIMEI);
						appendValue(structSGSN.sgsnAddress);
						appendValue(structSGSN.msNetworkCapability);
						appendValue(structSGSN.routingAreaCode);
						appendValue("" + structSGSN.locationAreaCode);
						appendValue("" + structSGSN.cellIdentifier);
						appendValue("" + structSGSN.chargingID);
						appendValue(structSGSN.ggsnAddressUsed);
						appendValue(structSGSN.accessPointNameNI);
						appendValue(structSGSN.pDPType);
						appendValue(structSGSN.servedPDPAddress);
						// appendValue(structSGSN.listOfTrafficVolumes);
						appendValue("" + structSGSN.dataVolumeGPRSUplink);
						appendValue("" + structSGSN.dataVolumeGPRSDownlink);
						appendValue(structSGSN.recordOpeningTime);
						appendValue("" + structSGSN.duration);
						appendValue(structSGSN.sGSNChange);
						appendValue("" + structSGSN.causeForRecClosing);
						appendValue("" + structSGSN.diagnostics);
						appendValue("" + structSGSN.recordSequenceNumber);
						appendValue(structSGSN.nodeId);
						appendValue(structSGSN.recordExtensions);
						appendValue("" + structSGSN.localSequenceNumber);
						appendValue(structSGSN.aPNSelectionMode);
						appendValue(structSGSN.accessPointNameOI);
						appendValue(structSGSN.servedMSISDN);
						appendValue(structSGSN.chargingCharacteristics);
						appendValue("" + structSGSN.rATType);
						appendValue(structSGSN.cAMELInformationPDP);
						appendValue("" + structSGSN.rNCUnsentDownlinkVolume);
						appendValue(structSGSN.chChSelectionMode);
						appendValue(structSGSN.dynamicAddressFlag);
						appendValue("" + structSGSN.numberOfSequence);

						fileConvert.addText(mStrValues);
					} else {
						mRecN++;
						mStrValues = mRecN + "|" + structSGSN.recordType + "|" + structSGSN.networkInitiation + "|"
								+ structSGSN.servedIMSI + "|" + structSGSN.servedIMEI + "|" + structSGSN.sgsnAddress
								+ "|" + structSGSN.msNetworkCapability + "|" + structSGSN.routingAreaCode + "|"
								+ structSGSN.locationAreaCode + "|" + structSGSN.cellIdentifier + "|"
								+ structSGSN.chargingID + "|" + structSGSN.ggsnAddressUsed + "|"
								+ structSGSN.accessPointNameNI + "|" + structSGSN.pDPType + "|"
								+ structSGSN.servedPDPAddress + "|"
								// + structSGSN.listOfTrafficVolumes + "|"
								+ structSGSN.dataVolumeGPRSUplink + "|" + structSGSN.dataVolumeGPRSDownlink + "|"
								+ structSGSN.recordOpeningTime + "|" + structSGSN.duration + "|" + structSGSN.sGSNChange
								+ "|" + structSGSN.causeForRecClosing + "|" + structSGSN.diagnostics + "|"
								+ structSGSN.recordSequenceNumber + "|" + structSGSN.nodeId + "|"
								+ structSGSN.recordExtensions + "|" + structSGSN.localSequenceNumber + "|"
								+ structSGSN.aPNSelectionMode + "|" + structSGSN.accessPointNameOI + "|"
								+ structSGSN.servedMSISDN + "|" + structSGSN.chargingCharacteristics + "|"
								+ structSGSN.rATType + "|" + structSGSN.cAMELInformationPDP + "|"
								+ structSGSN.rNCUnsentDownlinkVolume + "|" + structSGSN.chChSelectionMode + "|"
								+ structSGSN.dynamicAddressFlag + "|" + structSGSN.numberOfSequence;

						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}
				writeLogFile("         - PDP               : " + Global.rpad(Integer.toString(mRecPDP), 6, " "));
				writeLogFile("         - MM                : " + Global.rpad(Integer.toString(mRecMM), 6, " "));
				writeLogFile("         - SMO               : " + Global.rpad(Integer.toString(mRecSMO), 6, " "));
				writeLogFile("         - SMT               : " + Global.rpad(Integer.toString(mRecSMT), 6, " "));
				writeLogFile("         - MBMS              : " + Global.rpad(Integer.toString(mRecMBMS), 6, " "));

				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecPDP + mRecMM + mRecSMO + mRecSMT + mRecMBMS;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",rec_og=" + mRecOG + ",rec_ic=" + mRecIC + ",rec_smo=" + mRecSMO
							+ ",rec_smt=" + mRecSMT + ",rec_other=" + mRecOther + ",rec_convert=" + mRecConvert
							+ ",rec_divert=" + mRecDivert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}

			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

		private void convertSGSNPDPRecord() {
			int mByteN = 0;
			mRecConvert++;
			int miChildCount = 0;
			while (mByteN < mRecLength) {
				int btTemp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				int miTagClass = (byte) ((btTemp & 0xc0) >>> 6);
				btTemp &= 0x3f;
				byte mbtConstructed = (byte) ((btTemp & 0xe0) >>> 5);
				btTemp &= 0x1f;
				int miTagID = btTemp;

				mByteN++;
				if (miTagID >= 31) {
					miTagID = 0;
					boolean bfound = false;
					int tmp;
					while (!bfound) {
						tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						bfound = tmp >>> 7 == 0;
						tmp &= 0x7f;
						miTagID |= tmp;
					}
				}

				// length
				int length = 0;
				int bOfLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				// int bytesOfLength = Global.fixSignedByte(mBuffer[mFileByte]);
				mByteN++;
				if (bOfLength > 128) {
					bOfLength = bOfLength - 128;
					for (int i = 1; i <= bOfLength; i++) {
						length += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (bOfLength - i));
						mByteN++;
					}

				} else {
					length = bOfLength;
				}

				switch (miTagID) {
				case 0: // recordType
					switch (miChildCount) {
					case 0:
						miChildCount++;
						for (int i = 1; i <= length; i++) {
							structSGSN.recordType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (length - i));
							mByteN++;
						}
						break;
					case 1:// sgsnAddress - octet string
						miChildCount++;
						if (mbtConstructed == 0) {
							if (length == 4) {
								for (int i = 1; i <= length; i++) {
									if (structSGSN.sgsnAddress.length() > 0)
										structSGSN.sgsnAddress += ".";
									structSGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
								}
							} else {
								for (int i = 1; i <= length; i++) {
									structSGSN.sgsnAddress += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
								}

							}
						} else {
							int byteN = 0;
							int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							int tagClass = (byte) ((bt & 0xc0) >>> 6);
							bt &= 0x3f;
							byte constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							mByteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}

							// length
							int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							if (len == 4)
								for (int i = 1; i <= len; i++) {
									if (structSGSN.sgsnAddress.length() > 0)
										structSGSN.sgsnAddress += ".";
									structSGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
								}
							else {
								for (int i = 1; i <= len; i++) {
									structSGSN.sgsnAddress += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
								}
							}
						}
						break;
					case 2:// ggsnAddressUsed
						miChildCount++;
						if (length == 4) {
							for (int i = 1; i <= length; i++) {
								if (structSGSN.ggsnAddressUsed.length() > 0)
									structSGSN.ggsnAddressUsed += ".";
								structSGSN.ggsnAddressUsed += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						} else {
							for (int i = 1; i <= length; i++) {
								structSGSN.ggsnAddressUsed += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
							}

						}
						break;
					case 3:// servedPDPAddress
						miChildCount++;
						if (mbtConstructed == 0) {
							if (length == 4) {
								for (int i = 1; i <= length; i++) {
									if (structSGSN.servedPDPAddress.length() > 0)
										structSGSN.servedPDPAddress += ".";
									structSGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
								}

							} else {
								for (int i = 1; i <= length; i++) {

									structSGSN.servedPDPAddress += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
								}

							}
						} else {
							int len;
							byte constructed = 1;
							do {

								int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								int tagClass = (byte) ((bt & 0xc0) >>> 6);
								bt &= 0x3f;
								constructed = (byte) ((bt & 0xe0) >>> 5);
								bt &= 0x1f;
								miTagID = bt;

								mByteN++;
								if (miTagID >= 31) {
									miTagID = 0;
									boolean bfound = false;
									while (!bfound) {
										int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										bfound = tmp >>> 7 == 0;
										tmp &= 0x7f;
										miTagID |= tmp;
									}
								}
								// length
								len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;

							} while (constructed == 1);
							if (len == 4) {
								for (int i = 1; i <= len; i++) {
									if (structSGSN.servedPDPAddress.length() > 0)
										structSGSN.servedPDPAddress += ".";
									structSGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
								}
							} else {
								for (int i = 1; i <= len; i++) {
									structSGSN.servedPDPAddress += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
									mByteN++;
								}

							}
						}
						break;
					}
					break;
				case 1: // networkInitiation
					for (int i = 1; i <= length; i++) {
						structSGSN.networkInitiation += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 3: // servedIMSI
					for (int i = 1; i <= length; i++) {
						structSGSN.servedIMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 4: // servedIMEI
					for (int i = 1; i <= length; i++) {
						structSGSN.servedIMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 6:// msNetworkCapability- octet string
					for (int i = 1; i <= length; i++) {
						structSGSN.msNetworkCapability += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 7:
					mByteN = +length;
					break;
				case 8:// routingAreaCode
					for (int i = 1; i <= length; i++) {
						structSGSN.routingAreaCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 9:// locationAreaCode
					for (int i = 1; i <= length; i++) {
						structSGSN.locationAreaCode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 10:// cellIdentifier

					for (int i = 1; i <= length; i++) {
						structSGSN.cellIdentifier += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 11:// chargingID
					for (int i = 1; i <= length; i++) {
						structSGSN.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 13:// accessPointNameNI
					for (int i = 1; i <= length; i++) {
						structSGSN.accessPointNameNI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}
					break;
				case 14:// pDPType
					for (int i = 1; i <= length; i++) {
						structSGSN.pDPType += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 16:// listOfTrafficVolumes
					int byteN = 0;
					int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					int tagClass = (byte) ((bt & 0xc0) >>> 6);
					bt &= 0x3f;
					byte constructed = (byte) ((bt & 0xe0) >>> 5);
					bt &= 0x1f;
					miTagID = bt;

					mByteN++;
					if (miTagID >= 31) {
						miTagID = 0;
						boolean bfound = false;
						while (!bfound) {
							int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							bfound = tmp >>> 7 == 0;
							tmp &= 0x7f;
							miTagID |= tmp;
						}
					}

					// length
					int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					while (byteN < len) {
						bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						tagClass = (byte) ((bt & 0xc0) >>> 6);
						bt &= 0x3f;
						constructed = (byte) ((bt & 0xe0) >>> 5);
						bt &= 0x1f;
						miTagID = bt;

						byteN++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						// length
						int lngth = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						switch (miTagID) {
						case 1:
							for (int i = 1; i <= lngth; i++) {
								// qosRequested
								structSGSN.qosRequested += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;
							}
							break;
						case 2:
							for (int i = 1; i <= lngth; i++) {
								// qosNegotiated
								structSGSN.qosNegotiated += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;
							}
							break;
						case 3:// dataVolumeGPRSUplink
							for (int i = 1; i <= lngth; i++) {
								structSGSN.dataVolumeGPRSUplink += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
								byteN++;
							}

							break;
						case 4:// dataVolumeGPRSDownlink
							for (int i = 1; i <= lngth; i++) {
								structSGSN.dataVolumeGPRSDownlink += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
								byteN++;
							}

							break;
						default:
							byteN += lngth;
							break;
						}
					}
					if (len + 2 < length)
						mByteN += length - 2;
					else
						mByteN += len;
					// if (len+2 <len)
					break;
				case 17:// recordOpeningTime
					for (int i = 1; i <= length; i++) {
						if (i == 7)
							structSGSN.recordOpeningTime += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						else
							structSGSN.recordOpeningTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 18:// duration
					for (int i = 1; i <= length; i++) {
						structSGSN.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 19:// sGSNChange
					for (int i = 1; i <= length; i++) {
						structSGSN.sGSNChange += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 20:// causeForRecClosing
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.causeForRecClosing +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.causeForRecClosing += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 21:// diagnostics
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.diagnostics +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */

					for (int i = 1; i <= length; i++) {
						structSGSN.diagnostics += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 22:// recordSequenceNumber
					for (int i = 1; i <= length; i++) {
						structSGSN.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						// structSGSN.recordSequenceNumber +=
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
						// + mByteN]));
						mByteN++;
					}

					break;
				case 23:// nodeId
					for (int i = 1; i <= length; i++) {
						structSGSN.nodeId += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 24:// recordExtensions
					for (int i = 1; i <= length; i++) {
						// structSGSN.recordExtensions +=
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
						// + mByteN]));
						mByteN++;
					}

					break;
				case 25:// localSequenceNumber
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.localSequenceNumber +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 26:// aPNSelectionMode
					for (int i = 1; i <= length; i++) {
						structSGSN.aPNSelectionMode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 27:// accessPointNameOI
					for (int i = 1; i <= length; i++) {
						structSGSN.accessPointNameOI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}

					break;
				case 28:// servedMSISDN
					for (int i = 1; i <= length; i++) {
						structSGSN.servedMSISDN += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 29:// chargingCharacteristics
					for (int i = 1; i <= length; i++) {
						structSGSN.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 30:// rATType
					for (int i = 1; i <= length; i++) {
						structSGSN.rATType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 31:// cAMELInformationPDP
					for (int i = 1; i <= length; i++) {
						structSGSN.cAMELInformationPDP += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 32:// rNCUnsentDownlinkVolume
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.rNCUnsentDownlinkVolume +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.rNCUnsentDownlinkVolume += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 34:// chChSelectionMode
					for (int i = 1; i <= length; i++) {
						structSGSN.chChSelectionMode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 35:// dynamicAddressFlag
					for (int i = 1; i <= length; i++) {
						structSGSN.dynamicAddressFlag += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				}
				// context
			}
			mFileByte += mByteN;
		}

		private void AnalyseSGSNPDPRecord() {
			if (structSGSN.recordOpeningTime.length() >= 5) {

				structSGSN.recordOpeningTime = structSGSN.recordOpeningTime.substring(0,
						structSGSN.recordOpeningTime.length() - 5);
				structSGSN.recordOpeningTime = Global.Format(structSGSN.recordOpeningTime, "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSGSN.servedIMSI.endsWith("f")) {
				structSGSN.servedIMSI = structSGSN.servedIMSI.substring(0, structSGSN.servedIMSI.length() - 1);
			}
			if (structSGSN.servedIMEI.endsWith("f")) {
				structSGSN.servedIMEI = structSGSN.servedIMEI.substring(0, structSGSN.servedIMEI.length() - 1);
			}
			if (structSGSN.servedMSISDN.length() > 0) {
				if (structSGSN.servedMSISDN.substring(0, 2).compareTo("19") == 0) {
					structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(2);
					if (structSGSN.servedMSISDN.substring(0, 2).compareTo("84") == 0) {
						structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(2);
					}
				}
				if (structSGSN.servedMSISDN.endsWith("f")) {
					structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(0,
							structSGSN.servedMSISDN.length() - 1);
				}

			}
			if (structSGSN.pDPType.contains("f")) {
				structSGSN.pDPType = structSGSN.pDPType.replace("f", "");
			}
		}

		private void convertSGSNSG7CD8PDPRecord() {
			int mByteN = 0;
			mRecConvert++;
			boolean fRecordType = false;
			while (mByteN < mRecLength) {
				int btTemp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				int miTagClass = (byte) ((btTemp & 0xc0) >>> 6);
				btTemp &= 0x3f;
				byte mbtConstructed = (byte) ((btTemp & 0xe0) >>> 5);
				btTemp &= 0x1f;
				int miTagID = btTemp;

				mByteN++;
				if (miTagID >= 31) {
					miTagID = 0;
					boolean bfound = false;
					int tmp;
					while (!bfound) {
						tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						bfound = tmp >>> 7 == 0;
						tmp &= 0x7f;
						miTagID |= tmp;
					}
				}

				int length = 0;
				int bOfLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				// int bytesOfLength = Global.fixSignedByte(mBuffer[mFileByte]);
				mByteN++;
				if (bOfLength > 128) {
					bOfLength = bOfLength - 128;
					for (int i = 1; i <= bOfLength; i++) {
						length += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (bOfLength - i));
						mByteN++;
					}

				} else {
					length = bOfLength;
				}

				// mByteN++;
				// boolean fRecordType = false;
				switch (miTagID) {
				case 0: // recordType
					if (fRecordType) {
						mByteN += length;
						break;
					}
					fRecordType = true;
					for (int i = 1; i <= length; i++) {
						structSGSN.recordType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 1: // networkInitiation
					for (int i = 1; i <= length; i++) {
						structSGSN.networkInitiation += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 3: // servedIMSI
					for (int i = 1; i <= length; i++) {
						structSGSN.servedIMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 4: // servedIMEI
					for (int i = 1; i <= length; i++) {
						structSGSN.servedIMEI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 5: // sgsnAddress - octet string
					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structSGSN.sgsnAddress += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int byteN = 0;
						int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						int tagClass = (byte) ((bt & 0xc0) >>> 6);
						bt &= 0x3f;
						byte constructed = (byte) ((bt & 0xe0) >>> 5);
						bt &= 0x1f;
						miTagID = bt;

						mByteN++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						// length
						int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						if (len == 4)
							for (int i = 1; i <= len; i++) {
								if (structSGSN.sgsnAddress.length() > 0)
									structSGSN.sgsnAddress += ".";
								structSGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						else {
							for (int i = 1; i <= len; i++) {
								structSGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}

						}

					}
					break;
				case 6:// msNetworkCapability- octet string
					for (int i = 1; i <= length; i++) {
						structSGSN.msNetworkCapability += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 7:// routingAreaCode
					for (int i = 1; i <= length; i++) {
						structSGSN.routingAreaCode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 8:// locationAreaCode
					for (int i = 1; i <= length; i++) {
						structSGSN.locationAreaCode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 9:// cellIdentifier

					for (int i = 1; i <= length; i++) {
						structSGSN.cellIdentifier += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 10:// chargingID
					for (int i = 1; i <= length; i++) {
						structSGSN.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 11:// ggsnAddressUsed
					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structSGSN.ggsnAddressUsed += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int len;
						byte constructed = 1;
						do {

							int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							int tagClass = (byte) ((bt & 0xc0) >>> 6);
							bt &= 0x3f;
							constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							mByteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}
							// length
							len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;

						} while (constructed == 1);
						if (len == 4) {
							for (int i = 1; i <= len; i++) {
								if (structSGSN.ggsnAddressUsed.length() > 0)
									structSGSN.ggsnAddressUsed += ".";
								structSGSN.ggsnAddressUsed += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						} else {
							for (int i = 1; i <= len; i++) {
								structSGSN.ggsnAddressUsed += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}

						}
					}

					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.ggsnAddressUsed +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					break;
				case 12:// accessPointNameNI
					for (int i = 1; i <= length; i++) {
						structSGSN.accessPointNameNI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}

					break;
				case 13:// pDPType
					for (int i = 1; i <= length; i++) {
						structSGSN.pDPType += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					break;
				case 14:// servedPDPAddress
					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structSGSN.servedPDPAddress += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int len;
						byte constructed = 1;
						do {

							int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							int tagClass = (byte) ((bt & 0xc0) >>> 6);
							bt &= 0x3f;
							constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							mByteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}
							// length
							len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;

						} while (constructed == 1);
						if (len == 4) {
							for (int i = 1; i <= len; i++) {
								if (structSGSN.servedPDPAddress.length() > 0)
									structSGSN.servedPDPAddress += ".";
								structSGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						} else {
							for (int i = 1; i <= len; i++) {
								structSGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}

						}
					}
					break;
				case 15:// listOfTrafficVolumes
					int taglength = 0;
					int dup = 0;
					while (taglength < length) {
						dup++;
						int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						int tagClass = (byte) ((bt & 0xc0) >>> 6);
						bt &= 0x3f;
						byte constructed = (byte) ((bt & 0xe0) >>> 5);
						bt &= 0x1f;
						miTagID = bt;
						mByteN++;
						taglength++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								taglength++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						// length
						int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						taglength++;
						int byteN = 0;
						taglength += len;
						while (byteN < len) {
							bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							tagClass = (byte) ((bt & 0xc0) >>> 6);
							bt &= 0x3f;
							constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							byteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}

							// length
							int lngth = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							switch (miTagID) {
							case 1:
								if (dup == 1)
									for (int i = 1; i <= lngth; i++) {
										// qosRequested
										structSGSN.qosRequested += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
										byteN++;
									}
								else
									byteN += lngth;
								break;
							case 2:
								if (dup == 1)
									for (int i = 1; i <= lngth; i++) {
										// qosNegotiated
										structSGSN.qosNegotiated += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
										byteN++;
									}
								else
									byteN += lngth;
								break;
							case 3: // dataVolumeGPRSUplink
								for (int i = 1; i <= lngth; i++) {
									structSGSN.dataVolumeGPRSUplink += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 4: // dataVolumeGPRSDownlink
								for (int i = 1; i <= lngth; i++) {
									structSGSN.dataVolumeGPRSDownlink += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							default:
								byteN += lngth;
								break;
							}
						}
						mByteN += len;
					}

					// number of numberOfSequence := number of tag record
					structSGSN.numberOfSequence = dup;

					/*
					 * if (len+2< length) mByteN +=length-2; else mByteN +=len;
					 */
					break;
				case 16:// recordOpeningTime
					for (int i = 1; i <= length; i++) {
						if (i == 7)
							structSGSN.recordOpeningTime += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						else
							structSGSN.recordOpeningTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 17:// duration
					for (int i = 1; i <= length; i++) {
						structSGSN.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 18:// sGSNChange
					for (int i = 1; i <= length; i++) {
						structSGSN.sGSNChange += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 19:// causeForRecClosing
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.causeForRecClosing +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.causeForRecClosing += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 20:// diagnostics
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.diagnostics +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */

					for (int i = 1; i <= length; i++) {
						structSGSN.diagnostics += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 21:// recordSequenceNumber
					for (int i = 1; i <= length; i++) {
						structSGSN.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 22:// nodeId
					for (int i = 1; i <= length; i++) {
						structSGSN.nodeId += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 23:// recordExtensions
					for (int i = 1; i <= length; i++) {
						structSGSN.recordExtensions += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 24:// localSequenceNumber
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.localSequenceNumber +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 25:// aPNSelectionMode
					for (int i = 1; i <= length; i++) {
						structSGSN.aPNSelectionMode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 26:// accessPointNameOI
					for (int i = 1; i <= length; i++) {
						structSGSN.accessPointNameOI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}

					break;
				case 27:// servedMSISDN
					for (int i = 1; i <= length; i++) {
						structSGSN.servedMSISDN += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 28:// chargingCharacteristics
					for (int i = 1; i <= length; i++) {
						structSGSN.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 29:// rATType
					/*
					 * for (int i = 1; i <= length; i++) { structSGSN.rATType +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.rATType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 30:// cAMELInformationPDP
					for (int i = 1; i <= length; i++) {
						structSGSN.cAMELInformationPDP += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 31:// rNCUnsentDownlinkVolume
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structSGSN.rNCUnsentDownlinkVolume +=
					 * Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					for (int i = 1; i <= length; i++) {
						structSGSN.rNCUnsentDownlinkVolume += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}
					break;
				case 32:// chChSelectionMode
					for (int i = 1; i <= length; i++) {
						structSGSN.chChSelectionMode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 33:// dynamicAddressFlag
					for (int i = 1; i <= length; i++) {
						structSGSN.dynamicAddressFlag += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				}
				// context
			}
			mFileByte += mByteN;
		}

		private void AnalyseSGSNSG7CD8PDPRecord() {
			if (structSGSN.recordOpeningTime.length() >= 5) {

				structSGSN.recordOpeningTime = structSGSN.recordOpeningTime.substring(0,
						structSGSN.recordOpeningTime.length() - 5);
				structSGSN.recordOpeningTime = Global.Format(structSGSN.recordOpeningTime, "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSGSN.servedIMSI.endsWith("f")) {
				structSGSN.servedIMSI = structSGSN.servedIMSI.substring(0, structSGSN.servedIMSI.length() - 1);
			}
			if (structSGSN.servedIMEI.endsWith("f")) {
				structSGSN.servedIMEI = structSGSN.servedIMEI.substring(0, structSGSN.servedIMEI.length() - 1);
			}
			if (structSGSN.servedMSISDN.length() > 0) {
				if (structSGSN.servedMSISDN.substring(0, 2).compareTo("19") == 0) {
					structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(2);
					if (structSGSN.servedMSISDN.substring(0, 2).compareTo("84") == 0) {
						structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(2);
					}
				}
				if (structSGSN.servedMSISDN.endsWith("f")) {
					structSGSN.servedMSISDN = structSGSN.servedMSISDN.substring(0,
							structSGSN.servedMSISDN.length() - 1);
				}

			}
			if (structSGSN.pDPType.contains("f")) {
				structSGSN.pDPType = structSGSN.pDPType.replace("f", "");
			}

		}

		private void convertSGSNMMRecord() {
			mFileByte += mRecLength;
		}

		private void convertSGSNSMORecord() {
			mFileByte += mRecLength;
		}

		private void convertSGSNSMTRecord() {
			mFileByte += mRecLength;
		}

		private void convertSGSNMBMSRecord() {
			mFileByte += mRecLength;
		}
	}

	class ConvertICCNEIF {

		protected StructICCNEIF ICC_NEIFCDR = new StructICCNEIF();

		protected int mFeature = 0;
		protected int mSubFeature = 0;
		protected int mType = 0;
		protected int mSubType = 0;
		protected int mStktVarParLength = 0;
		protected int mEleLength = 0;
		protected String mEleValue = "";
		protected int mRet = 0;
		protected int mValueLength = 0;
		protected String mTmp = "";

		private void convertICCNEIF() {
			int mByteN = 0;

			mRecConvert++;
			while (mByteN < mRecLength) {
				// header
				ICC_NEIFCDR.Header = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;
				mStktVarParLength = 0;
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if (mLength > 128) {
					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mStktVarParLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {
					mStktVarParLength = mLength;
				}
				for (int mEn = 1; mEn <= mStktVarParLength; mEn++) {
					mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					if ("a0".compareTo(mValue) == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}
					} else if ("a1".compareTo(mValue) == 0) {

						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						for (int k = 1; k <= mLength; k++) {
							mByteN++;
							mEn++;
						}
					} else { // Stkt-element data
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						mEn++;
						if (mLength > 128) {
							mRet = mLength - 128;
							mEleLength = 0;
							for (int i = 1; i <= mRet; i++) {
								mEleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
										* Math.pow(256, (mRet - i));
								mByteN++;
								mEn++;
							}
						} else {
							mEleLength = mLength;
						}
						// Content Stkt-Ele
						for (int mEle = 1; mEle <= mEleLength; mEle++) {
							mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
							mEn++;

							mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
							mEn++;
							mEle++;
							if ("a0".compareTo(mValue) == 0) { // Call data
								mValue = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
								mEn++;
								mEle++;
								if (mValue.substring(1).compareTo("0") == 0) { // Stkt-tag
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;

									// content Feature
									// Type
									mFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 1; i <= mLength; i++) {
										mFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
												* Math.pow(256, (mLength - i));
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubFeature
									// Type
									mSubFeature = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubFeature += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content Type
									// Type
									mType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}
									// content SubType
									// Type
									mSubType = 0;

									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									// Content
									for (int i = 0; i < mLength; i++) {
										mSubType += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
										mByteN++;
										mEn++;
										mEle++;
									}

									// octet string DUMP
									mByteN++;
									mEn++;
									mEle++;
									// Length
									mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									mEn++;
									mEle++;
									mValue = "";
									/*
									 * String eventVal = ""; String strLocation
									 * = ""; String strCell = "";
									 */

									for (int i = 0; i < mLength; i++) {
										mValue += (char) (mBuffer[mFileByte + mByteN]);

										mByteN++;
										mEn++;
										mEle++;
									}

									mEleValue = mFeature + "." + mSubFeature + "." + mType + "." + mSubType;

									if (mEleValue.compareTo("3130.1.100.1") == 0) { // #6740715,452013106747745,1208156725,10,QT2,24/04/2014
																					// 06:03:03,39,50000,0,643097563960,050,28/04/2011#
										mTmp = mValue.substring(1, mValue.length() - 1);

										String[] data = mTmp.split(",");

										try {
											ICC_NEIFCDR.sequence = data[0];
											ICC_NEIFCDR.imsi = data[1];
											ICC_NEIFCDR.isdn = data[2];
											ICC_NEIFCDR.neifInfo = data[3];
											ICC_NEIFCDR.profile = data[4];
											ICC_NEIFCDR.timestamp = data[5];
											ICC_NEIFCDR.mainValue = data[7];
											ICC_NEIFCDR.bonusValue = data[8];
											ICC_NEIFCDR.transactionId = data[9];
											ICC_NEIFCDR.topupProfile = data[10];
										} catch (Exception e) {
											// System.out.println(mTmp);
										}
									}

								}
							} else if ("a1".compareTo(mValue) == 0) { // Call
																		// event
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;

							} else if ("a2".compareTo(mValue) == 0) { // Stkt-obj
								mByteN += mLength;
								mEn += mLength;
								mEle += mLength;
							}
						} // end for element
					} // end if Stkt-element data
				} // End for mStktVarParLength
			} // End while record length
			mFileByte += mByteN;
		}

		protected int ICC_NEIF(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			TextFile fileConvert = new TextFile();
			RandomAccessFile fileCDR = null;
			IOUtils IOUtil = new IOUtils();
			String mSource = null;
			int mFileLength = 0;
			int mRecN = 0;
			String lastCallingTime = "";
			String firstCallingTime = "";

			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				fileCDR = new RandomAccessFile(mSource, "r");

				// Initialize output text file
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource);
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				IOUtil.deleteFile(mSource);
				fileConvert.openFile(mSource, 5242880);
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mICCNEIFHeaderCharge);
				} else {
					fileConvert.addText(Global.mICCNEIFHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mStrValues = "";
				mValueLength = 0;
				mValue = "";
				// mEncapsulationLength = 0;
				mSQL = null;
				mRecLength = 0;
				mLength = 0;

				mRecConvert = 0;
				mFeature = 0;
				mSubFeature = 0;
				mType = 0;
				mSubType = 0;
				mStktVarParLength = 0;
				mEleLength = 0;
				mEleValue = "";
				mRet = 0;

				mFileLength = (int) fileCDR.length();
				mBuffer = new byte[mFileLength];
				mLength = fileCDR.read(mBuffer);
				if (mLength != mFileLength) {
					mConnection.rollback();
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}
				mFileByte = 0;
				mRecN = 0;

				while (mFileByte < mFileLength) {

					ICC_NEIFCDR.sequence = "";
					ICC_NEIFCDR.imsi = "";
					ICC_NEIFCDR.isdn = "";
					ICC_NEIFCDR.neifInfo = "";
					ICC_NEIFCDR.profile = "";
					ICC_NEIFCDR.timestamp = "";
					ICC_NEIFCDR.mainValue = "";
					ICC_NEIFCDR.bonusValue = "";
					ICC_NEIFCDR.transactionId = "";
					ICC_NEIFCDR.topupProfile = "";

					mRecLength = (Global.fixSignedByte(mBuffer[mFileByte]) * 16777216)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 1]) * 65536)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 2]) * 256)
							+ (Global.fixSignedByte(mBuffer[mFileByte + 3]));
					mFileByte += 4;
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);
						return (Global.ErrFileConverted);
					}

					convertICCNEIF();

					// Kiem tra CDR
					if (!ICC_NEIFCDR.isdn.equals("")) {

						if (cdrfileParam.ChargeCDRFile) {
							appendValue(ICC_NEIFCDR.sequence);
							appendValue(ICC_NEIFCDR.imsi);
							appendValue(ICC_NEIFCDR.isdn);
							appendValue(ICC_NEIFCDR.neifInfo);
							appendValue(ICC_NEIFCDR.profile);
							appendValue(ICC_NEIFCDR.timestamp);
							appendValue(ICC_NEIFCDR.mainValue);
							appendValue(ICC_NEIFCDR.bonusValue);
							appendValue(ICC_NEIFCDR.transactionId);
							appendValue(ICC_NEIFCDR.topupProfile);

							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = ICC_NEIFCDR.timestamp;
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}
								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						} else {
							mRecN++;
							mStrValues = mRecN + "|" + ICC_NEIFCDR.sequence + "|" + ICC_NEIFCDR.imsi + "|"
									+ ICC_NEIFCDR.isdn + "|" + ICC_NEIFCDR.neifInfo + "|" + ICC_NEIFCDR.profile + "|"
									+ ICC_NEIFCDR.timestamp + "|" + ICC_NEIFCDR.mainValue + "|" + ICC_NEIFCDR.bonusValue
									+ "|" + ICC_NEIFCDR.transactionId + "|" + ICC_NEIFCDR.topupProfile;

							// --End--
							fileConvert.addText(mStrValues);
							mStrValues = "";
							try {
								String dateCallTime = ICC_NEIFCDR.timestamp;
								if (lastCallingTime.equals("")) {
									lastCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, lastCallingTime) == 2) {
									lastCallingTime = lastCallingTime;
								}
								// get first calling time.(18/02/2011)
								if (firstCallingTime.equals("")) {
									firstCallingTime = dateCallTime;
								} else if (Global.compareTo(dateCallTime, firstCallingTime) == 2) {
									firstCallingTime = dateCallTime;
								}

							} catch (Exception ex) {
							}
						}
					}
				}

				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecN), 10, " "));
				writeLogFile("      -------------------------------");

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecConvert + ",rec_convert=" + mRecN + ",min_calling_time='"
							+ lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = "
							+ pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecConvert + ",rec_convert=" + mRecN + ",min_calling_time='"
							+ lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = "
							+ pFileID;
				}
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}

			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception e) {
				}
			}
			return (Global.OKFileConverted);
		}

	}

	/**
	 * Convert GGSN file
	 * 
	 * @author VHC
	 * 
	 */
	class ConvertGGSN {

		/**
		 * Struct GGSN
		 */
		protected StructGGSN structGGSN = new StructGGSN();
		protected int mRecPDP = 0;

		/**
		 * Convert eG format
		 * 
		 * @param pSourceConvert
		 *            : Thu muc file nguon
		 * @param pFileName
		 *            : Ten file
		 * @param pFileID
		 *            : fileId
		 * @param pDestinationConvert
		 *            : Thu muc file da convert
		 * @param pCurrent_dir
		 * @param pLocalSplitFilebyDay
		 * @param pCenterID
		 * @return
		 * @throws Exception
		 */
		protected int eGSN(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {

			/**
			 * Text file io tool
			 */
			TextFile fileConvert = new TextFile();

			/**
			 * Read source file
			 */
			RandomAccessFile fileCDR = null;

			/**
			 * IO tool
			 */
			IOUtils IOUtil = new IOUtils();

			/**
			 * source file's path
			 */
			String mSource = null;

			/**
			 * source file's length
			 */
			int mFileLength = 0;

			/**
			 * Number of record CDR
			 */
			int mRecN = 0;

			/**
			 * Time
			 */
			String firstCallingTime = "";
			String lastCallingTime = "";

			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");

				// get path
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;

				// open file to read
				fileCDR = new RandomAccessFile(mSource, "r");

				// split by day
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource); // maker folder
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				// delete exists file
				IOUtil.deleteFile(mSource);

				fileConvert.openFile(mSource, 5242880);

				/**
				 * Add header file convert
				 */
				/*
				 * if (cdrfileParam.ChargeCDRFile) {
				 * fileConvert.addText(Global.mGGSNHeaderCharge); } else {
				 * fileConvert.addText(Global.mGGSNHeaderNoCharge); }
				 */

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;

				Global.ExecuteSQL(mConnection, mSQL);

				mFileLength = (int) fileCDR.length();

				// khai bao buffer
				mBuffer = new byte[mFileLength];

				mLength = fileCDR.read(mBuffer);

				mFileByte = 0;

				// Total length of the CDR file in octets (header + CDR payload)
				int fileLength = 0;

				int numOfCDRs = 0; // number of CDRs
				int fileSequenceNumber = 0;
				int fileClosure = 0;
				String nodeIpAddress = "";
				int lostCDRIndicator = 0;
				int lengthOfCDRRoutingFilter = 0;

				// File length: 0 - 4
				while (mFileByte <= 3) {
					fileLength += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (3 - mFileByte));
					mFileByte++;
				}

				// Header length: 5 - 8
				// while (mFileByte <= 7) {
				// headerLength += Global.fixSignedByte(mBuffer[mFileByte])
				// * Math.pow(256, (7 - mFileByte));
				// mFileByte++;
				// }

				// number of CDRs
				mFileByte = 18;
				while (mFileByte <= 21) {
					numOfCDRs += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (21 - mFileByte));
					mFileByte++;
				}

				// System.out.println(numOfCDRs);

				// File sequence number: 23 - 26
				while (mFileByte <= 25) {
					fileSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (25 - mFileByte));
					mFileByte++;
				}

				// File closure: 27
				fileClosure = Global.fixSignedByte(mBuffer[mFileByte]);
				mFileByte++;

				// Node Ip address: 28 - 47
				while (mFileByte <= 46) {
					nodeIpAddress += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte]));
					mFileByte++;
				}

				// lostCDR indicator: 48
				lostCDRIndicator = Global.fixSignedByte(mBuffer[mFileByte]);
				mFileByte++;

				// lengthOfCDRRoutingFilter: 49 - 50
				for (int i = 1; i <= 2; i++) {
					lengthOfCDRRoutingFilter += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (2 - i));
					mFileByte++;
				}

				// Loi doc file
				if ((mLength != mFileLength) || (mLength != fileLength)) {

					mConnection.rollback(); // rollback
					mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
							+ ",note='Error read buffer at position: " + mFileLength + "'  WHERE file_id = " + pFileID;
					Global.ExecuteSQL(mConnection, mSQL);
					mConnection.commit();
					writeLogFile("    - Error read buffer at position: " + mFileLength);
					return (Global.ErrFileConverted);
				}

				// int num = 1;
				// while (num <= numOfCDRs) {
				while (mFileByte < mFileLength) {

					structGGSN.recordType = 0;
					structGGSN.servedIMSI = "";
					structGGSN.ggsnAddress = "";
					structGGSN.chargingID = 0;
					structGGSN.sgsnAddress = "";
					structGGSN.accessPointNameNI = "";
					structGGSN.pdpType = "";
					structGGSN.servedPDPAddress = "";
					structGGSN.dynamicAddressFlag = "";
					structGGSN.recordOpeningTime = "";
					structGGSN.duration = 0;
					structGGSN.causeForRecClosing = 0;
					structGGSN.diagnostics = "";
					structGGSN.recordSequenceNumber = 0;
					structGGSN.nodeID = "";
					// structGGSN.recordExtensions = "";
					structGGSN.localSequenceNumber = 0;
					structGGSN.apnSelectionMode = "";
					structGGSN.servedMSISDN = "";
					structGGSN.chargingCharacteristics = "";
					structGGSN.chChSelectionMode = "";
					structGGSN.sgsnPLMNIdentifier = "";
					// structGGSN.pSFurnishChargingInformation = "";
					structGGSN.servedIMEISV = "";
					structGGSN.rATType = 0;
					structGGSN.mSTimeZone = "";
					structGGSN.userLocationInformation = "";
					// structGGSN.datavolumeFBCUplink = 0;
					// structGGSN.datavolumeFBCDownlink = 0;

					structGGSN.sdRatingGroup = 0;
					structGGSN.sdChargingRuleBaseName = "";
					structGGSN.sdResultCode = 0;
					structGGSN.sdLocalSequenceNumber = 0;
					structGGSN.sdTimeOfFirstUsage = "";
					structGGSN.sdTimeOfLastUsage = "";
					structGGSN.sdTimeUsage = 0;
					structGGSN.sdServiceConditionChange = "";
					structGGSN.sdQoSInformationNeg = "";
					structGGSN.sdSgsnAddress = "";
					structGGSN.sdSgsnPLMNIdentifier = "";
					structGGSN.sdDatavolumeFBCUplink = 0;
					structGGSN.sdDatavolumeFBCDownlink = 0;
					structGGSN.sdTimeOfReport = "";
					structGGSN.sdRATType = 0;
					structGGSN.sdFailureHandlingContinue = 0;
					structGGSN.sdServiceIdentifier = 0;
					structGGSN.sdUserLocationInformation = "";

					structGGSN.causeForRecClosingValue = "";
					structGGSN.rATTypeValue = "";
					structGGSN.sdFailureHandlingContinueValue = "";
					structGGSN.diagnosticsValue = "";

					// Tag record length
					mRecLength = 0;
					for (int i = 1; i <= 2; i++) {
						mRecLength += Global.fixSignedByte(mBuffer[mFileByte]) * Math.pow(256, (2 - i));
						mFileByte++;
					}

					// Version
					mFileByte += 2;

					// check tag length
					if (mFileByte + mRecLength > mFileLength) {
						mConnection.rollback();
						mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError
								+ ",note='Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert
								+ "'  WHERE file_id = " + pFileID;
						Global.ExecuteSQL(mConnection, mSQL);
						mConnection.commit();
						writeLogFile("    - Error read buffer at position: " + mFileByte + " - rec:" + mRecConvert);

						fileCDR.close();
						fileCDR = null;

						return (Global.ErrFileConverted);
					}

					// Tag record value
					int btTemp = Global.fixSignedByte(mBuffer[(mFileByte)]);
					btTemp &= 0x3f;
					btTemp &= 0x1f;

					mFileByte++;
					int miTagID = btTemp;

					switch (miTagID) {
					case 17: // eG-CDR format
						convertEGSNPDPRecord(fileConvert);
						analyseEGSNPDPRecord();
						// num++;
						mRecPDP++;
						mRecN++;
						break;

					default:
						break;
					}

					// analyse record
					// analyseEGSNPDPRecord();

					// write to text file
					if (cdrfileParam.ChargeCDRFile) {
						appendValue("" + structGGSN.recordType);
						appendValue(structGGSN.servedIMSI);
						appendValue(structGGSN.ggsnAddress);
						appendValue("" + structGGSN.chargingID);
						appendValue(structGGSN.sgsnAddress);
						appendValue(structGGSN.accessPointNameNI);
						appendValue(structGGSN.pdpType);
						appendValue(structGGSN.servedPDPAddress);
						appendValue(structGGSN.dynamicAddressFlag);
						appendValue(structGGSN.recordOpeningTime);
						appendValue("" + structGGSN.duration);
						appendValue(structGGSN.causeForRecClosingValue);
						appendValue(structGGSN.diagnosticsValue);
						appendValue("" + structGGSN.recordSequenceNumber);
						appendValue(structGGSN.nodeID);
						// appendValue(structGGSN.recordExtensions);
						appendValue("" + structGGSN.localSequenceNumber);
						appendValue(structGGSN.apnSelectionMode);
						appendValue(structGGSN.servedMSISDN);
						appendValue(structGGSN.chargingCharacteristics);
						appendValue(structGGSN.chChSelectionMode);
						appendValue(structGGSN.sgsnPLMNIdentifier);
						// appendValue(structGGSN.pSFurnishChargingInformation);
						appendValue(structGGSN.servedIMEISV);
						appendValue(structGGSN.rATTypeValue);
						appendValue(structGGSN.mSTimeZone);
						appendValue(structGGSN.userLocationInformation);
						// appendValue("" + structGGSN.datavolumeFBCUplink);
						// appendValue("" + structGGSN.datavolumeFBCDownlink);
						appendValue("" + structGGSN.sdRatingGroup);
						appendValue(structGGSN.sdChargingRuleBaseName);
						appendValue("" + structGGSN.sdResultCode);
						appendValue("" + structGGSN.sdLocalSequenceNumber);
						appendValue(structGGSN.sdTimeOfFirstUsage);
						appendValue(structGGSN.sdTimeOfLastUsage);
						appendValue("" + structGGSN.sdTimeUsage);
						appendValue(structGGSN.sdServiceConditionChange);
						appendValue(structGGSN.sdQoSInformationNeg);
						appendValue(structGGSN.sdSgsnAddress);
						appendValue(structGGSN.sdSgsnPLMNIdentifier);
						appendValue("" + structGGSN.sdDatavolumeFBCUplink);
						appendValue("" + structGGSN.sdDatavolumeFBCDownlink);
						appendValue(structGGSN.sdTimeOfReport);
						appendValue("" + structGGSN.sdRATType);
						appendValue(structGGSN.sdFailureHandlingContinueValue);
						appendValue("" + structGGSN.sdServiceIdentifier);
						appendValue(structGGSN.sdUserLocationInformation);

						fileConvert.addText(mStrValues);

						mStrValues = "";
					} else {
						mStrValues = "EGSNPDPRecord" + ";" + structGGSN.recordType + ";" + structGGSN.servedIMSI + ";"
								+ structGGSN.ggsnAddress + ";" + structGGSN.chargingID + ";" + structGGSN.sgsnAddress
								+ ";" + structGGSN.accessPointNameNI + ";" + structGGSN.pdpType + ";"
								+ structGGSN.servedPDPAddress + ";" + structGGSN.dynamicAddressFlag + ";"
								+ structGGSN.recordOpeningTime + ";" + structGGSN.duration + ";"
								+ structGGSN.causeForRecClosingValue + ";" + structGGSN.diagnosticsValue + ";"
								+ structGGSN.recordSequenceNumber + ";" + structGGSN.nodeID + ";"
								// + structGGSN.recordExtensions + ";"
								+ structGGSN.localSequenceNumber + ";" + structGGSN.apnSelectionMode + ";"
								+ structGGSN.servedMSISDN + ";" + structGGSN.chargingCharacteristics + ";"
								+ structGGSN.chChSelectionMode + ";" + structGGSN.sgsnPLMNIdentifier + ";"
								// + structGGSN.pSFurnishChargingInformation +
								// ";"
								+ structGGSN.servedIMEISV + ";" + structGGSN.rATTypeValue + ";" + structGGSN.mSTimeZone
								+ ";" + structGGSN.userLocationInformation + ";"
								// + structGGSN.datavolumeFBCUplink + ";"
								// + structGGSN.datavolumeFBCDownlink;
								+ structGGSN.sdRatingGroup + ";" + structGGSN.sdChargingRuleBaseName + ";"
								+ structGGSN.sdResultCode + ";" + structGGSN.sdLocalSequenceNumber + ";"
								+ structGGSN.sdTimeOfFirstUsage + ";" + structGGSN.sdTimeOfLastUsage + ";"
								+ structGGSN.sdTimeUsage + ";" + structGGSN.sdServiceConditionChange + ";"
								+ structGGSN.sdQoSInformationNeg + ";" + structGGSN.sdSgsnAddress + ";"
								+ structGGSN.sdSgsnPLMNIdentifier + ";" + structGGSN.sdDatavolumeFBCUplink + ";"
								+ structGGSN.sdDatavolumeFBCDownlink + ";" + structGGSN.sdTimeOfReport + ";"
								+ structGGSN.sdRATType + ";" + structGGSN.sdFailureHandlingContinueValue + ";"
								+ structGGSN.sdServiceIdentifier + ";" + structGGSN.sdUserLocationInformation
								+ ";;;;;;;;";

						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}

				// System.out.println("mRecN: " + mRecN);

				writeLogFile("         - PDP               : " + Global.rpad(Integer.toString(mRecPDP), 6, " "));
				// writeLogFile(" - MM : " +
				// Global.rpad(Integer.toString(mRecMM), 6, " "));

				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				mRecN = mRecPDP;

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecN + ",min_calling_time='" + lastCallingTime + "',max_calling_time='"
							+ firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecN + ",min_calling_time='" + lastCallingTime + "',max_calling_time='"
							+ firstCallingTime + "' WHERE file_id = " + pFileID;
				}

				Global.ExecuteSQL(mConnection, mSQL);
				mConnection.commit();

			} catch (FileNotFoundException e) {
				e.printStackTrace();

				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL); // update file error
														// converted
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					// mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception ex) {
				}
			}

			return Global.OKFileConverted;
		}

		/**
		 * eG-CDR format
		 * 
		 * @throws Exception
		 */
		private int convertEGSNPDPRecord(TextFile fileConvert) throws Exception {
			int mRecN = 0;
			int mRet = 0;

			int mByteN = 0;
			while (mByteN < mRecLength - 1) {

				int btTemp = Global.fixSignedByte(mBuffer[(mFileByte + mByteN)]);
				btTemp &= 0x3f;
				byte mbtConstructed = (byte) ((btTemp & 0xe0) >>> 5);
				btTemp &= 0x1f;

				mByteN++;
				int miTagID = btTemp;

				if (miTagID >= 31) {
					miTagID = 0;
					boolean bfound = false;
					int tmp;
					while (!bfound) {
						tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						bfound = tmp >>> 7 == 0;
						tmp &= 0x7f;
						miTagID |= tmp;
					}
				}

				// length of tag
				int length = 0;
				int bOfLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);

				mByteN++;
				if (bOfLength > 128) {
					bOfLength = bOfLength - 128;
					for (int i = 1; i <= bOfLength; i++) {
						length += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (bOfLength - i));
						mByteN++;
					}

				} else {
					length = bOfLength;
				}

				switch (miTagID) {
				case 0: // recordType
					for (int i = 1; i <= length; i++) {
						structGGSN.recordType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 3: // servedIMSI
					for (int i = 1; i <= length; i++) {
						structGGSN.servedIMSI += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 4: // ggsnAddress
					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structGGSN.ggsnAddress += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						bt &= 0x3f;
						bt &= 0x1f;
						miTagID = bt;

						mByteN++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						// length
						int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						if (len == 4)
							for (int i = 1; i <= len; i++) {
								if (structGGSN.ggsnAddress.length() > 0)
									structGGSN.ggsnAddress += ".";
								structGGSN.ggsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						else {
							for (int i = 1; i <= len; i++) {
								structGGSN.ggsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						}
					}

					break;
				case 5: // chargingID
					for (int i = 1; i <= length; i++) {
						structGGSN.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 6: // sgsnAddress
					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structGGSN.sgsnAddress += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						bt &= 0x3f;
						bt &= 0x1f;
						miTagID = bt;

						mByteN++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						// length
						int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						if (len == 4)
							for (int i = 1; i <= len; i++) {
								if (structGGSN.sgsnAddress.length() > 0)
									structGGSN.sgsnAddress += ".";
								structGGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						else {
							for (int i = 1; i <= len; i++) {
								structGGSN.sgsnAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						}
					}

					break;
				case 7: // accessPointNameNI

					for (int i = 1; i <= length; i++) {
						structGGSN.accessPointNameNI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 8: // pdpType

					for (int i = 1; i <= length; i++) {
						structGGSN.pdpType += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 9: // servedPDPAddress

					if (mbtConstructed == 0) {
						for (int i = 1; i <= length; i++) {
							structGGSN.servedPDPAddress += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						int len;
						byte constructed = 1;
						do {
							int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							bt &= 0x3f;
							constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							mByteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
									mByteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}
							// length
							len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						} while (constructed == 1);

						if (len == 4) {
							for (int i = 1; i <= len; i++) {
								if (structGGSN.servedPDPAddress.length() > 0)
									structGGSN.servedPDPAddress += ".";
								structGGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						} else {
							for (int i = 1; i <= len; i++) {
								structGGSN.servedPDPAddress += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
							}
						}
					}

					break;
				case 11:// dynamicAddressFlag
					for (int i = 1; i <= length; i++) {
						structGGSN.dynamicAddressFlag += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 13: // recordOpeningTime
					for (int i = 1; i <= length; i++) {
						if (i == 7)
							structGGSN.recordOpeningTime += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
						else
							structGGSN.recordOpeningTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 14: // duration
					for (int i = 1; i <= length; i++) {
						structGGSN.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 15: // causeForRecClosing
					for (int i = 1; i <= length; i++) {
						structGGSN.causeForRecClosing += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 16:// diagnostics
					for (int i = 1; i <= length; i++) {
						// structGGSN.diagnostics +=
						// Global.fixSignedByte(mBuffer[mFileByte + mByteN])*
						// Math.pow(256, (length - i));
						structGGSN.diagnostics += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
					}

					break;
				case 17:// recordSequenceNumber
					for (int i = 1; i <= length; i++) {
						structGGSN.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 18:// nodeId
					for (int i = 1; i <= length; i++) {
						// structGGSN.nodeID += Global.HexToBCD(Global
						// .fixSignedByte(mBuffer[mFileByte + mByteN]));
						structGGSN.nodeID += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				/*
				 * case 19:// recordExtensions for (int i = 1; i <= length; i++)
				 * { structGGSN.recordExtensions += Global.HexToBCD(Global
				 * .fixSignedByte(mBuffer[mFileByte + mByteN])); mByteN++; }
				 * 
				 * break;
				 */
				case 19:// recordExtensions
					mByteN += length;

					break;
				case 20:// localSequenceNumber
					for (int i = 1; i <= length; i++) {
						structGGSN.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 21:// apnSelectionMode
					for (int i = 1; i <= length; i++) {
						structGGSN.apnSelectionMode += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 22:// servedMSISDN
					for (int i = 1; i <= length; i++) {
						structGGSN.servedMSISDN += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 23:// chargingCharacteristics
					for (int i = 1; i <= length; i++) {
						structGGSN.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 24:// chChSelectionMode
					for (int i = 1; i <= length; i++) {
						structGGSN.chChSelectionMode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 27: // sgsnPLMNIdentifier
					for (int i = 1; i <= length; i++) {
						// structGGSN.sgsnPLMNIdentifier +=
						// Global.fixSignedByte(mBuffer[mFileByte
						// + mByteN])
						// * Math.pow(256, (length - i));
						structGGSN.sgsnPLMNIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				/*
				 * case 28: // pSFurnishChargingInformation for (int i = 1; i <=
				 * length; i++) { structGGSN.pSFurnishChargingInformation +=
				 * Global.HexToBCD(Global .fixSignedByte(mBuffer[mFileByte +
				 * mByteN])); mByteN++; }
				 * 
				 * break;
				 */
				case 28:// pSFurnishChargingInformation
					mByteN += length;

					break;
				case 29: // servedIMEISV
					for (int i = 1; i <= length; i++) {
						structGGSN.servedIMEISV += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					break;
				case 30:// rATType
					for (int i = 1; i <= length; i++) {
						structGGSN.rATType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (length - i));
						mByteN++;
					}

					break;
				case 31: // mSTimeZone
					for (int i = 1; i <= length; i++) {
						// structGGSN.mSTimeZone +=
						// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
						// + mByteN]));

						structGGSN.mSTimeZone += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) + " ";

						mByteN++;
					}

					break;
				case 32: // userLocationInformation
					/*
					 * for (int i = 1; i <= length; i++) {
					 * structGGSN.userLocationInformation +=
					 * Global.HexToBCD(Global .fixSignedByte(mBuffer[mFileByte +
					 * mByteN])); mByteN++; }
					 */
					mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mRet == 1) {
						structGGSN.userLocationInformation = "SAI ";
					} else {
						structGGSN.userLocationInformation = "CGI ";
					}

					mByteN++;

					for (int i = 1; i <= 3; i++) {
						structGGSN.userLocationInformation += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					mRet = 0;
					for (int i = 1; i <= 2; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (2 - i));
						mByteN++;

					}
					structGGSN.userLocationInformation += " " + mRet;

					mRet = 0;
					for (int i = 1; i <= 2; i++) {
						mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (2 - i));
						mByteN++;

					}
					structGGSN.userLocationInformation += " " + mRet;

					break;
				case 34: // listOfServiceData
					int mRecServiceData = 0;
					int tagLength = 0;
					int dup = 0;
					while (tagLength < (length - mRecServiceData * 3)) {

						dup++;
						// structGGSN.sdRatingGroup = 0;

						/*
						 * String chargingRuleBaseName = ""; int resultCode = 0;
						 * long localSequenceNumber = 0; String timeOfFirstUsage
						 * = ""; String timeOfLastUsage = ""; long timeUsage =
						 * 0; String serviceConditionChange = ""; String
						 * qoSInformationNeg = ""; String sgsnAddress = ""; int
						 * sGSNPLMNIdentifier = 0; String timeOfReport = ""; int
						 * rATType = 0; int serviceIdentifier = 0; String
						 * userLocationInformation = ""; int
						 * failureHandlingContinue = 0;
						 */

						int bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						// int tagClass = (byte) ((bt & 0xc0) >>> 6);
						bt &= 0x3f;
						// byte constructed = (byte) ((bt & 0xe0) >>> 5);
						bt &= 0x1f;
						miTagID = bt;

						mByteN++;
						if (miTagID >= 31) {
							miTagID = 0;
							boolean bfound = false;
							while (!bfound) {
								int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
								mByteN++;
								bfound = tmp >>> 7 == 0;
								tmp &= 0x7f;
								miTagID |= tmp;
							}
						}

						int bOfLen = 0;
						int len = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						if (len > 128) {
							len = len - 128;
							for (int i = 1; i <= len; i++) {
								bOfLen += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (len - i));
								mByteN++;
							}

						} else {
							bOfLen = len;
						}

						int byteN = 0;
						while (byteN < bOfLen) {
							bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							// tagClass = (byte) ((bt & 0xc0) >>> 6);
							bt &= 0x3f;
							int constructed = (byte) ((bt & 0xe0) >>> 5);
							bt &= 0x1f;
							miTagID = bt;

							byteN++;
							if (miTagID >= 31) {
								miTagID = 0;
								boolean bfound = false;
								while (!bfound) {
									int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
									bfound = tmp >>> 7 == 0;
									tmp &= 0x7f;
									miTagID |= tmp;
								}
							}

							int lngth = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							switch (miTagID) {
							case 1: // ratingGroup
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdRatingGroup += Global.fixSignedByte(
												mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 2: // chargingRuleBaseName
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdChargingRuleBaseName += Global.fixSignedCharByte(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}

								break;
							case 3: // resultCode
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdResultCode += Global.fixSignedByte(
												mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 4: // localSequenceNumber
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdLocalSequenceNumber += Global.fixSignedByte(
												mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 5: // timeOfFirstUsage
								for (int i = 1; i <= lngth; i++) {
									if (i == 7)
										structGGSN.sdTimeOfFirstUsage += Global
												.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
									else
										structGGSN.sdTimeOfFirstUsage += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}

								break;
							case 6: // timeOfLastUsage
								for (int i = 1; i <= lngth; i++) {
									if (i == 7)
										structGGSN.sdTimeOfLastUsage += Global
												.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
									else
										structGGSN.sdTimeOfLastUsage += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}

								break;
							case 7: // timeUsage
								for (int i = 1; i <= lngth; i++) {
									structGGSN.sdTimeUsage += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 8: // serviceConditionChange
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdServiceConditionChange += Global
												.HexToBINARY(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}

								break;
							case 9: // qoSInformationNeg
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1 && i <= 8)
										// structGGSN.sdQoSInformationNeg +=
										// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
										// + mByteN + byteN]));
										structGGSN.sdQoSInformationNeg += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]) + " ";
									byteN++;
								}

								break;
							case 10: // sgsnAddress
								if (constructed == 0) {
									for (int i = 1; i <= lngth; i++) {
										if (dup == 1)
											structGGSN.sdSgsnAddress += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
										byteN++;
									}
								} else {
									bt = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									bt &= 0x3f;
									bt &= 0x1f;
									miTagID = bt;

									byteN++;
									if (miTagID >= 31) {
										miTagID = 0;
										boolean bfound = false;
										while (!bfound) {
											int tmp = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
											byteN++;
											bfound = tmp >>> 7 == 0;
											tmp &= 0x7f;
											miTagID |= tmp;
										}
									}

									// length
									int lenSsgn = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
									if (lenSsgn == 4)
										for (int i = 1; i <= lenSsgn; i++) {
											if (dup == 1) {
												if (structGGSN.sdSgsnAddress.length() > 0)
													structGGSN.sdSgsnAddress += ".";
												structGGSN.sdSgsnAddress += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
											}
											byteN++;
										}
									else {
										for (int i = 1; i <= lenSsgn; i++) {
											if (dup == 1)
												structGGSN.sdSgsnAddress += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
											byteN++;
										}
									}
								}

								break;
							case 11: // sdSgsnPLMNIdentifier
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdSgsnPLMNIdentifier += Global
												.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));

									// structGGSN.sdSgsnPLMNIdentifier +=
									// Global.fixSignedByte(mBuffer[mFileByte +
									// mByteN + byteN]) * Math.pow(256, (lngth -
									// i));
									byteN++;
								}

								break;
							case 12: // datavolumeFBCUplink
								for (int i = 1; i <= lngth; i++) {
									structGGSN.sdDatavolumeFBCUplink += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 13: // datavolumeFBCDownlink
								for (int i = 1; i <= lngth; i++) {
									structGGSN.sdDatavolumeFBCDownlink += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							/*
							 * case 12: //datavolumeFBCUplink if (ratingGroup ==
							 * 0) { for (int i = 1; i <= lngth; i++) {
							 * structGGSN.datavolumeFBCUplink +=
							 * Global.fixSignedByte(mBuffer[mFileByte + mByteN +
							 * byteN]) * Math.pow(256, (lngth - i)); byteN++; }
							 * } else { byteN += lngth; }
							 * 
							 * //System.out.println("[datavolumeFBCUplink] = " +
							 * structGGSN.datavolumeFBCUplink);
							 * 
							 * break; case 13: //datavolumeFBCDownlink if
							 * (ratingGroup == 0) { for (int i = 1; i <= lngth;
							 * i++) { structGGSN.datavolumeFBCDownlink +=
							 * Global.fixSignedByte(mBuffer[mFileByte + mByteN +
							 * byteN]) * Math.pow(256, (lngth - i)); byteN++; }
							 * } else { byteN += lngth; }
							 * 
							 * //System.out.println("[datavolumeFBCDownlink] = "
							 * + structGGSN.datavolumeFBCDownlink);
							 * 
							 * break;
							 */
							case 14: // timeOfReport
								for (int i = 1; i <= lngth; i++) {
									if (i == 7)
										structGGSN.sdTimeOfReport += Global
												.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
									else
										structGGSN.sdTimeOfReport += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}

								break;
							case 15: // rATType
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdRATType += Global.fixSignedByte(
												mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 16: // failureHandlingContinue
								for (int i = 1; i <= lngth; i++) {
									structGGSN.sdFailureHandlingContinue += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 17: // serviceIdentifier
								for (int i = 1; i <= lngth; i++) {
									if (dup == 1)
										structGGSN.sdServiceIdentifier += Global.fixSignedByte(
												mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (lngth - i));
									byteN++;
								}

								break;
							case 20: // userLocationInformation
								if (dup == 1) {
									mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									if (mRet == 1) {
										structGGSN.sdUserLocationInformation = "SAI ";
									} else {
										structGGSN.sdUserLocationInformation = "CGI ";
									}

									byteN++;

									for (int i = 1; i <= 3; i++) {
										structGGSN.sdUserLocationInformation += Global
												.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
										byteN++;
									}
									mRet = 0;
									for (int i = 1; i <= 2; i++) {
										mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
												* Math.pow(256, (2 - i));
										byteN++;

									}
									structGGSN.sdUserLocationInformation += " " + mRet;

									mRet = 0;
									for (int i = 1; i <= 2; i++) {
										mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
												* Math.pow(256, (2 - i));
										byteN++;

									}
									structGGSN.sdUserLocationInformation += " " + mRet;
								} else {
									byteN += lngth;
								}

								break;
							default:
								/*
								 * int value = 0; for (int i = 1; i <= lngth;
								 * i++) { value +=
								 * Global.fixSignedByte(mBuffer[mFileByte +
								 * mByteN + byteN]) * Math.pow(256, (lngth -
								 * i)); byteN++; }
								 * 
								 * //System.out.println("[" + miTagID + "] = " +
								 * value);
								 */
								byteN += lngth;

								break;
							}
						}

						tagLength += bOfLen;
						mByteN += bOfLen;

						mRecServiceData++;
					}
					// mByteN += length;

					break;
				default: // default
					mByteN++;
				}
			}

			mFileByte += mByteN;

			return mRecN;
		}

		/**
		 * 
		 */
		private void analyseEGSNPDPRecord() {

			// recordOpeningTime
			if (!structGGSN.recordOpeningTime.trim().contains(" ")) {
				if (structGGSN.recordOpeningTime.length() >= 5) {
					structGGSN.recordOpeningTime = structGGSN.recordOpeningTime.substring(0,
							structGGSN.recordOpeningTime.length() - 5);
					structGGSN.recordOpeningTime = Global.Format(structGGSN.recordOpeningTime, "yyMMddHHmmss",
							"E MMM dd HH:mm:ss yyyy");
				}
			}

			// sdTimeOfFirstUsage
			if (structGGSN.sdTimeOfFirstUsage.length() >= 5) {
				structGGSN.sdTimeOfFirstUsage = structGGSN.sdTimeOfFirstUsage.substring(0,
						structGGSN.sdTimeOfFirstUsage.length() - 5);
				structGGSN.sdTimeOfFirstUsage = Global.Format(structGGSN.sdTimeOfFirstUsage, "yyMMddHHmmss",
						"E MMM dd HH:mm:ss yyyy");
			}

			// sdTimeOfLastUsage
			if (structGGSN.sdTimeOfLastUsage.length() >= 5) {
				structGGSN.sdTimeOfLastUsage = structGGSN.sdTimeOfLastUsage.substring(0,
						structGGSN.sdTimeOfLastUsage.length() - 5);
				structGGSN.sdTimeOfLastUsage = Global.Format(structGGSN.sdTimeOfLastUsage, "yyMMddHHmmss",
						"E MMM dd HH:mm:ss yyyy");
			}

			// sdTimeOfReport
			if (structGGSN.sdTimeOfReport.length() >= 5) {
				structGGSN.sdTimeOfReport = structGGSN.sdTimeOfReport.substring(0,
						structGGSN.sdTimeOfReport.length() - 5);
				structGGSN.sdTimeOfReport = Global.Format(structGGSN.sdTimeOfReport, "yyMMddHHmmss",
						"E MMM dd HH:mm:ss yyyy");
			}

			if (structGGSN.servedIMSI.endsWith("f")) {
				structGGSN.servedIMSI = structGGSN.servedIMSI.substring(0, structGGSN.servedIMSI.length() - 1);
			}

			if (structGGSN.servedIMSI.length() >= 5) {
				structGGSN.servedIMSI = structGGSN.servedIMSI.substring(0, 3) + " "
						+ structGGSN.servedIMSI.substring(3, 5) + " " + structGGSN.servedIMSI.substring(5);
			}

			// sdSGSNPLMNIdentifier
			if (structGGSN.sdSgsnPLMNIdentifier.contains("f")) {
				structGGSN.sdSgsnPLMNIdentifier = structGGSN.sdSgsnPLMNIdentifier.replace("f", " ");
			}

			// sGSNPLMNIdentifier
			if (structGGSN.sgsnPLMNIdentifier.contains("f")) {
				structGGSN.sgsnPLMNIdentifier = structGGSN.sgsnPLMNIdentifier.replace("f", " ");
			}

			if (structGGSN.userLocationInformation.contains("f")) {
				structGGSN.userLocationInformation = structGGSN.userLocationInformation.replace("f", " ");
			}

			if (structGGSN.sdUserLocationInformation.contains("f")) {
				structGGSN.sdUserLocationInformation = structGGSN.sdUserLocationInformation.replace("f", " ");
			}

			/*
			 * if (structGGSN.servedIMEISV.endsWith("f")) {
			 * structGGSN.servedIMEISV = structGGSN.servedIMEISV.substring(0,
			 * structGGSN.servedIMEISV.length() - 1); }
			 */

			if (structGGSN.servedMSISDN.length() > 0) {
				if (structGGSN.servedMSISDN.substring(0, 2).compareTo("19") == 0) {
					structGGSN.servedMSISDN = structGGSN.servedMSISDN.substring(2);

					/*
					 * if (structGGSN.servedMSISDN.substring(0,
					 * 2).compareTo("84") == 0) { structGGSN.servedMSISDN =
					 * structGGSN.servedMSISDN.substring(2); }
					 */
				}

				if (structGGSN.servedMSISDN.endsWith("f")) {
					structGGSN.servedMSISDN = structGGSN.servedMSISDN.substring(0,
							structGGSN.servedMSISDN.length() - 1);
				}
			}

			if (structGGSN.pdpType.contains("f")) {
				structGGSN.pdpType = structGGSN.pdpType.replace("f", "");
			}

			if (structGGSN.pdpType.equals("1012")) {
				structGGSN.pdpType = "IETF";
			}

			if (structGGSN.dynamicAddressFlag.equals("ff")) {
				structGGSN.dynamicAddressFlag = "TRUE";
			}

			// causeForRecClosing
			switch (structGGSN.causeForRecClosing) {
			case 0:
				structGGSN.causeForRecClosingValue = "Normal release";
				break;
			case 4:
				structGGSN.causeForRecClosingValue = "Abnormal release";
				break;
			case 16:
				structGGSN.causeForRecClosingValue = "Volume limit";
				break;
			case 17:
				structGGSN.causeForRecClosingValue = "Time limit";
				break;
			case 18:
				structGGSN.causeForRecClosingValue = "SGSN change";
				break;
			case 19:
				structGGSN.causeForRecClosingValue = "Max change condition";
				break;
			case 22:
				structGGSN.causeForRecClosingValue = "RAT change";
				break;
			case 23:
				structGGSN.causeForRecClosingValue = "MS time zone change";
				break;
			case 24:
				structGGSN.causeForRecClosingValue = "SGSN PLMN ID change";
				break;
			default:
				break;
			}

			// chargingCharacteristics
			if (structGGSN.chargingCharacteristics.equals("0400")) {
				structGGSN.chargingCharacteristics = "PREPAID";
			} else if (structGGSN.chargingCharacteristics.equals("0800")) {
				structGGSN.chargingCharacteristics = "POSTPAID";
			}

			// chChSelectionMode
			if (structGGSN.chChSelectionMode.equals("00")) {
				structGGSN.chChSelectionMode = "SGSN-supplied";
			} else if (structGGSN.chChSelectionMode.equals("03")) {
				structGGSN.chChSelectionMode = "home default";
			}

			// rATType
			/*
			 * 1: UTRAN 2: GERAN 3: WLAN 4: GAN 5: HSPA evolution
			 */
			switch (structGGSN.rATType) {
			case 1:
				structGGSN.rATTypeValue = "UTRAN";
				break;
			case 2:
				structGGSN.rATTypeValue = "GERAN";
				break;
			case 3:
				structGGSN.rATTypeValue = "WLAN";
				break;
			case 4:
				structGGSN.rATTypeValue = "GAN";
				break;
			case 5:
				structGGSN.rATTypeValue = "HSPA evolution";
				break;
			default:
				break;
			}

			// sdFailureHandlingContinue
			switch (structGGSN.sdFailureHandlingContinue) {
			case 255:
				structGGSN.sdFailureHandlingContinueValue = "TRUE";
				break;
			default:
				break;
			}

			// apnSelectionMode
			if (structGGSN.apnSelectionMode.length() == 2 && structGGSN.apnSelectionMode.endsWith("0")) {
				structGGSN.apnSelectionMode = structGGSN.apnSelectionMode.substring(0, 1);
			}

			/*
			 * Õ 8: Normal bearer release (deletion requested) Õ 36: Session timer
			 * expired Õ 37: Idle session timer expired Õ 57: RADIUS disconnect
			 * Õ 70: OCS disconnected Supported abnormal bearer release values:
			 * Õ 11: SGSN unreachable Õ 30: Error Indication received from SGSN
			 * Õ 35: Flexi NG configuration changed Õ 42: Update PDP Context
			 * Request to SGSN failed Õ 56: PDP context not found Õ 71: TEID
			 * conflict: SGSN assigned the bearerÓ³ user plane TEID to another
			 * bearer Õ 100: OCS was unreachable due to lack of transport
			 * connec-tion Õ 101: OCS did not respond within time allowed Õ 102:
			 * OCS sent a result code in the CCA indicating an error Õ 103: OCS
			 * sent an incomprehensible CCA Õ 105: OCS failure handling -
			 * continue action timeout
			 */
			if (structGGSN.diagnostics.length() >= 4) {
				int tmp = Integer.parseInt(structGGSN.diagnostics.substring(4));

				switch (tmp) {
				case 8:
					structGGSN.diagnosticsValue = "Normal bearer release";
					break;
				case 36:
					structGGSN.diagnosticsValue = "Session timer expired";
					break;
				case 37:
					structGGSN.diagnosticsValue = "Idle session timer expired";
					break;
				case 57:
					structGGSN.diagnosticsValue = "RADIUS disconnect";
					break;
				case 70:
					structGGSN.diagnosticsValue = "OCS disconnected";
					break;
				case 11:
					structGGSN.diagnosticsValue = "SGSN unreachable";
					break;
				case 30:
					structGGSN.diagnosticsValue = "Error Indication received from SGSN";
					break;
				case 35:
					structGGSN.diagnosticsValue = "Flexi NG configuration changed";
					break;
				case 42:
					structGGSN.diagnosticsValue = "Update PDP Context Request to SGSN failed";
					break;
				case 56:
					structGGSN.diagnosticsValue = "PDP context not found";
					break;
				case 71:
					structGGSN.diagnosticsValue = "TEID conflict";
					break;
				case 100:
					structGGSN.diagnosticsValue = "OCS was unreachable due to lack of transport connection";
					break;
				case 101:
					structGGSN.diagnosticsValue = "OCS did not respond within time allowed";
					break;
				case 102:
					structGGSN.diagnosticsValue = "OCS sent a result code in the CCA indicating an error";
					break;
				case 103:
					structGGSN.diagnosticsValue = "OCS sent an incomprehensible CCA";
					break;
				case 105:
					structGGSN.diagnosticsValue = "OCS failure handling - continue action timeout";
					break;
				default:
					break;
				}
			}

			// servedIMEISV
			try {
				structGGSN.servedIMEISV = structGGSN.servedIMEISV.substring(0, 6) + " "
						+ structGGSN.servedIMEISV.substring(6, 8) + " " + structGGSN.servedIMEISV.substring(8, 14) + " "
						+ structGGSN.servedIMEISV.substring(14);
			} catch (Exception e) {
				// System.out.println(e.toString());
			}

			structGGSN.mSTimeZone = structGGSN.mSTimeZone.trim();
			structGGSN.sdQoSInformationNeg = structGGSN.sdQoSInformationNeg.trim();
		}
	}

	class ConvertSamSungLTE {

		protected StructSamSung structSamSung = new StructSamSung();

		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;
		protected int mLength = 0;
		protected int mByteN = 0;
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;

		private int convertSamSung(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {

			/**
			 * Text file io tool
			 */
			TextFile fileConvert = new TextFile();

			/**
			 * Read source file
			 */
			RandomAccessFile fileCDR = null;

			/**
			 * IO tool
			 */
			IOUtils IOUtil = new IOUtils();

			/**
			 * source file's path
			 */
			String mSource = null;

			/**
			 * source file's length
			 */
			int mFileLength = 0;

			/**
			 * Number of record CDR
			 */
			int mRecS = 0;
			int mRecP = 0;

			/**
			 * Time
			 */
			String firstCallingTime = "";
			String lastCallingTime = "";

			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");

				// get path
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;

				// open file to read
				fileCDR = new RandomAccessFile(mSource, "r");

				// split by day
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource); // maker folder
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				// delete exists file
				IOUtil.deleteFile(mSource);

				fileConvert.openFile(mSource, 5242880);

				/**
				 * Add header file convert
				 */
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mSamSungHeaderCharge);
				} else {
					fileConvert.addText(Global.mSamSungHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;

				Global.ExecuteSQL(mConnection, mSQL);

				mFileLength = (int) fileCDR.length();

				// khai bao buffer
				mBuffer = new byte[mFileLength];

				mLength = fileCDR.read(mBuffer);

				mFileByte = 0;

				// Total length of the CDR file in octets (header + CDR payload)
				// int cdrDataLength = 0;

				mFileByte = 16;
				while (mFileByte < mFileLength) {

					mFileByte = mFileByte + 18;

					mRecLength = 0;
					mByteN = 0;
					mTagModuleCode = "";
					mTagModuleLength = 0;

					// mRecLength
					for (int i = 1; i <= 2; i++) {
						// System.out.println(Global.fixSignedByte(mBuffer[mFileByte
						// + mByteN]));
						mRecLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (2 - i));
						mByteN++;
					}

					// mTagModuleCode
					for (int i = 1; i <= 2; i++) {

						mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					structSamSung.RecordType = 0;
					structSamSung.ServedIMSI = "";
					structSamSung.IMSIUnauthenticatedFlag = "";
					structSamSung.ServedIMEISV = "";
					structSamSung.SGWAddressUsed = "";
					structSamSung.PGWAddressUsed = "";
					structSamSung.ChargingID = 0;
					structSamSung.ServingNodeAddress = "";
					structSamSung.ServingNodeType = "";
					structSamSung.SGWChange = "";
					structSamSung.AccessPointNameNI = "";
					structSamSung.PGWPLMNIdentifier = "";
					structSamSung.PDNConnectionID = 0;
					structSamSung.PDPPDNType = "";
					structSamSung.ServedPDPPDNAddress = "";
					structSamSung.ServedPDPPDNAddressExtension = "";
					structSamSung.DynamicAddressFlag = "";
					structSamSung.RecordOpeningTime = "";
					structSamSung.MSTimeZone = "";
					structSamSung.StartTime = "";
					structSamSung.StopTime = "";
					structSamSung.Duration = 0;
					structSamSung.CauseforRecordClosing = 0;
					structSamSung.Diagnostics = 0;
					structSamSung.RecordSequenceNumber = "";
					structSamSung.NodeID = "";
					structSamSung.RecordExtensions = "";
					structSamSung.LocalRecordSequenceNumber = 0;
					structSamSung.APNSelectionMode = 0;
					structSamSung.ServedMSISDN = "";
					structSamSung.UserCSGInformation = "";
					structSamSung.UserLocationInformation = "";
					structSamSung.ChargingCharacteristics = "";
					structSamSung.chChSelectionMode = 0;
					structSamSung.IMSSignallingContext = "";
					structSamSung.ExternalChargingIdentifier = "";
					structSamSung.ServingNodePLMNIdentifier = "";
					structSamSung.PSFurnishChargingInformation = "";
					structSamSung.CAMELInformation = "";
					structSamSung.RATType = 0;
					structSamSung.QoSRequested = "";
					structSamSung.QoSNegotiated = "";
					structSamSung.DataVolumeUplink = 0;
					structSamSung.DataVolumeDownlink = 0;
					structSamSung.ChangeCondition = "";
					structSamSung.ChangeTime = "";
					structSamSung.sdRatingGroup = 0;
					structSamSung.sdChargingRuleBaseName = "";
					structSamSung.sdResultCode = "";
					structSamSung.sdLocalSequenceNumber = 0;
					structSamSung.sdTimeofFirstUsage = "";
					structSamSung.sdTimeofLastUsage = "";
					structSamSung.sdTimeUsage = 0;
					structSamSung.sdServiceConditionChange = "";
					structSamSung.sdQosInformation = "";
					structSamSung.sdServingNodeAddress = "";
					structSamSung.sdReportTime = "";
					structSamSung.sdRATtype = "";
					structSamSung.sdFailureHandlingContinue = "";
					structSamSung.sdServiceIdentifier = 0;
					structSamSung.sdUserLocationInformation = "";
					structSamSung.sdPSFreeFormatData = "";
					structSamSung.sdPSFFDAppendIndicator = "";
					structSamSung.sdAFCharingIdentifier = "";
					structSamSung.sdMediaComponentNumber = "";
					structSamSung.sdFlowNumber = "";
					structSamSung.sdNumberofEvents = "";
					structSamSung.sdEventTimeStamps = "";
					structSamSung.sdTimeQuotaType = "";
					structSamSung.sdBaseTimeInterval = "";
					structSamSung.sdServiceSpecificData = "";
					structSamSung.sdServiceSpecificType = "";
					structSamSung.MCCMNC = "";

					if (mTagModuleCode.compareTo("bf4f") == 0) {
						pGWRecord();
						mRecP++;
					} else if (mTagModuleCode.compareTo("bf4e") == 0) {
						sGWRecord();
						mRecS++;
					} else {
						mByteN = (mByteN - 1) + mRecLength;
						mFileByte += mByteN;
					}

					AnalyseGWRecord();

					// write to text file
					if (cdrfileParam.ChargeCDRFile) {
						fileConvert.addText(mStrValues);
						mStrValues = "";
					} else {
						mStrValues = structSamSung.RecordType + "|" + structSamSung.ServedIMSI + "|"
								+ structSamSung.IMSIUnauthenticatedFlag + "|" + structSamSung.ServedIMEISV + "|"
								+ structSamSung.SGWAddressUsed + "|" + structSamSung.PGWAddressUsed + "|"
								+ structSamSung.ChargingID + "|" + structSamSung.ServingNodeAddress + "|"
								+ structSamSung.ServingNodeType + "|" + structSamSung.SGWChange + "|"
								+ structSamSung.AccessPointNameNI + "|" + structSamSung.PGWPLMNIdentifier + "|"
								+ structSamSung.PDNConnectionID + "|" + structSamSung.PDPPDNType + "|"
								+ structSamSung.ServedPDPPDNAddress + "|" + structSamSung.ServedPDPPDNAddressExtension
								+ "|" + structSamSung.DynamicAddressFlag + "|" + structSamSung.RecordOpeningTime + "|"
								+ structSamSung.MSTimeZone + "|" + structSamSung.StartTime + "|"
								+ structSamSung.StopTime + "|" + structSamSung.Duration + "|"
								+ structSamSung.CauseforRecordClosing + "|" + structSamSung.Diagnostics + "|"
								+ structSamSung.RecordSequenceNumber + "|" + structSamSung.NodeID + "|"
								+ structSamSung.RecordExtensions + "|" + structSamSung.LocalRecordSequenceNumber + "|"
								+ structSamSung.APNSelectionMode + "|" + structSamSung.ServedMSISDN + "|"
								+ structSamSung.UserCSGInformation + "|" + structSamSung.UserLocationInformation + "|"
								+ structSamSung.ChargingCharacteristics + "|" + structSamSung.chChSelectionMode + "|"
								+ structSamSung.IMSSignallingContext + "|" + structSamSung.ExternalChargingIdentifier
								+ "|" + structSamSung.ServingNodePLMNIdentifier + "|"
								+ structSamSung.PSFurnishChargingInformation + "|" + structSamSung.CAMELInformation
								+ "|" + structSamSung.RATType + "|" + structSamSung.QoSRequested + "|"
								+ structSamSung.QoSNegotiated + "|" + structSamSung.DataVolumeUplink + "|"
								+ structSamSung.DataVolumeDownlink + "|" + structSamSung.ChangeCondition + "|"
								+ structSamSung.ChangeTime + "|" + structSamSung.sdRatingGroup + "|"
								+ structSamSung.sdChargingRuleBaseName + "|" + structSamSung.sdResultCode + "|"
								+ structSamSung.sdLocalSequenceNumber + "|" + structSamSung.sdTimeofFirstUsage + "|"
								+ structSamSung.sdTimeofLastUsage + "|" + structSamSung.sdTimeUsage + "|"
								+ structSamSung.sdServiceConditionChange + "|" + structSamSung.sdQosInformation + "|"
								+ structSamSung.sdServingNodeAddress + "|" + structSamSung.sdReportTime + "|"
								+ structSamSung.sdRATtype + "|" + structSamSung.sdFailureHandlingContinue + "|"
								+ structSamSung.sdServiceIdentifier + "|" + structSamSung.sdUserLocationInformation
								+ "|" + structSamSung.sdPSFreeFormatData + "|" + structSamSung.sdPSFFDAppendIndicator
								+ "|" + structSamSung.sdAFCharingIdentifier + "|" + structSamSung.sdMediaComponentNumber
								+ "|" + structSamSung.sdFlowNumber + "|" + structSamSung.sdNumberofEvents + "|"
								+ structSamSung.sdEventTimeStamps + "|" + structSamSung.sdTimeQuotaType + "|"
								+ structSamSung.sdBaseTimeInterval + "|" + structSamSung.sdServiceSpecificData + "|"
								+ structSamSung.sdServiceSpecificType;

						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}

				mRecConvert = mRecS + mRecP;

				// System.out.println("mRecN: " + mRecConvert);

				writeLogFile("         - sGW               : " + Global.rpad(Integer.toString(mRecS), 6, " "));
				writeLogFile("         - pGW               : " + Global.rpad(Integer.toString(mRecP), 6, " "));

				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}

				Global.ExecuteSQL(mConnection, mSQL);

				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();

				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL); // update file error
														// converted
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception ex) {
				}
			}

			return Global.OKFileConverted;
		}

		private void AnalyseGWRecord() {

			if (structSamSung.ServedIMSI.endsWith("f")) {
				structSamSung.ServedIMSI = structSamSung.ServedIMSI.substring(0, structSamSung.ServedIMSI.length() - 1);
			}

			if (structSamSung.ServedMSISDN.length() > 0) {
				if (structSamSung.ServedMSISDN.substring(0, 2).compareTo("19") == 0) {
					structSamSung.ServedMSISDN = structSamSung.ServedMSISDN.substring(2);
					if (structSamSung.ServedMSISDN.substring(0, 2).compareTo("84") == 0) {
						structSamSung.ServedMSISDN = structSamSung.ServedMSISDN.substring(2);
					}
				}
				if (structSamSung.ServedMSISDN.endsWith("f")) {
					structSamSung.ServedMSISDN = structSamSung.ServedMSISDN.substring(0,
							structSamSung.ServedMSISDN.length() - 1);
				}
			}

			if (structSamSung.PGWPLMNIdentifier.contains("f")) {
				structSamSung.PGWPLMNIdentifier = structSamSung.PGWPLMNIdentifier.replace("f", "");
			}

			if (structSamSung.ServingNodePLMNIdentifier.contains("f")) {
				structSamSung.ServingNodePLMNIdentifier = structSamSung.ServingNodePLMNIdentifier.replace("f", "");
			}

			if (structSamSung.RecordOpeningTime.length() > 12) {
				structSamSung.RecordOpeningTime = Global.Format(structSamSung.RecordOpeningTime.substring(0, 12),
						"yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			if (structSamSung.StartTime.length() > 12) {
				structSamSung.StartTime = Global.Format(structSamSung.StartTime.substring(0, 12), "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSamSung.StopTime.length() > 12) {
				structSamSung.StopTime = Global.Format(structSamSung.StopTime.substring(0, 12), "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSamSung.sdReportTime.length() > 12) {
				structSamSung.sdReportTime = Global.Format(structSamSung.sdReportTime.substring(0, 12), "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSamSung.ChangeTime.length() > 12) {
				structSamSung.ChangeTime = Global.Format(structSamSung.ChangeTime.substring(0, 12), "yyMMddHHmmss",
						"dd/MM/yyyy HH:mm:ss");
			}

			if (structSamSung.PDPPDNType.length() > 4) {
				structSamSung.PDPPDNType = structSamSung.PDPPDNType.substring(0, 4);
			}

			if (structSamSung.UserLocationInformation.contains("f")) {
				structSamSung.UserLocationInformation = structSamSung.UserLocationInformation.replace("f", "");
			}

			if (structSamSung.sdUserLocationInformation.contains("f")) {
				structSamSung.sdUserLocationInformation = structSamSung.sdUserLocationInformation.replace("f", "");
			}
		}

		private void pGWRecord() {

			int mRet = 0;
			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;
			String sdTagFieldCode;
			int sdTagFieldLength;
			int sdByteN = 0;

			while (mByteN < mRecLength) {
				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);

				mByteN++;
				if (mLength > 128) {

					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {

					mTagModuleLength = mLength;
				}

				mTagModuleLength += mByteN;
				while (mByteN < mTagModuleLength) {

					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;

					if (mTagFieldCode.compareTo("9f") == 0 || mTagFieldCode.compareTo("bf") == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						if (mLength > 128) {
							mByteN++;
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}

					mTagFieldLength = 0;
                    int bOfLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
            
                    mByteN++;
                    if (bOfLength > 128) {
                        bOfLength = bOfLength - 128;
                        for (int i = 1; i <= bOfLength; i++) {
                            mTagFieldLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
                                    * Math.pow(256, (bOfLength - i));
                            mByteN++;
                        }
            
                    } else {
                        mTagFieldLength = bOfLength;
                    } 

					// RecordType
					if (mTagFieldCode.compareTo("80") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServedIMSI
					else if (mTagFieldCode.compareTo("83") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedIMSI += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// PGWAddressUsed
					else if (mTagFieldCode.compareTo("a4") == 0) {
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							for (int i = 1; i <= miTagFieldLength; i++) {
								structSamSung.PGWAddressUsed += Global
										.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
							}
						}

						mByteN += mTagFieldLength;
					}
					// ChargingID
					else if (mTagFieldCode.compareTo("85") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ChargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServingNodeAddress
					else if (mTagFieldCode.compareTo("a6") == 0) {

						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							for (int i = 1; i <= miTagFieldLength; i++) {
								structSamSung.ServingNodeAddress += Global
										.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
							}
						}

						mByteN += mTagFieldLength;
					}
					// AccessPointNameNI
					else if (mTagFieldCode.compareTo("87") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.AccessPointNameNI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// PDPPDNType
					else if (mTagFieldCode.compareTo("88") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.PDPPDNType += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ServedPDPPDNAddress
					else if (mTagFieldCode.compareTo("a9") == 0) {
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							// ServedPDPPDNAddress
							if (miTagFieldCode.compareTo("a0") == 0) {

								miTagFieldCode = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;

								miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;

								// IPAddress Data
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.ServedPDPPDNAddress += Global
											.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// ff - TRUE
					else if (mTagFieldCode.compareTo("8b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.DynamicAddressFlag += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// RecordOpeningTime
					else if (mTagFieldCode.compareTo("8d") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordOpeningTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// Duration
					else if (mTagFieldCode.compareTo("8e") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.Duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// CauseforRecordClosing
					else if (mTagFieldCode.compareTo("8f") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.CauseforRecordClosing += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// Diagnostics
					else if (mTagFieldCode.compareTo("b0") == 0) {

						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							// Diagnostics Data
							if (miTagFieldCode.compareTo("80") == 0) {

								// IPAddress Data
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.Diagnostics += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (miTagFieldLength - i));
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// RecordSequenceNumber - no value
					else if (mTagFieldCode.compareTo("91") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// NodeID
					else if (mTagFieldCode.compareTo("92") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.NodeID += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// LocalRecordSequenceNumber
					else if (mTagFieldCode.compareTo("94") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.LocalRecordSequenceNumber += Global
									.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// APNSelectionMode value
					else if (mTagFieldCode.compareTo("95") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.APNSelectionMode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServedMSISDN
					else if (mTagFieldCode.compareTo("96") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedMSISDN += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ChargingCharacteristics
					else if (mTagFieldCode.compareTo("97") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ChargingCharacteristics += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// chChSelectionMode value
					else if (mTagFieldCode.compareTo("98") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.chChSelectionMode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServingNodePLMNIdentifier
					else if (mTagFieldCode.compareTo("9b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServingNodePLMNIdentifier += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ServedIMEISV no value
					else if (mTagFieldCode.compareTo("9d") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedIMEISV += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// RATType
					else if (mTagFieldCode.compareTo("9e") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RATType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// MSTimeZone - value ""
					else if (mTagFieldCode.compareTo("9f1f") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.MSTimeZone += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// UserLocationInformation - value ""
					else if (mTagFieldCode.compareTo("9f20") == 0) {

						byteN = 0;
						mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;

						if (mRet != 191) {
							if (structSamSung.MCCMNC.compareTo("") == 0) {
								for (int i = 1; i <= 3; i++) {
									structSamSung.UserLocationInformation += Global
											.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
							}

							String tmp = Global.rpad(Global.HexToBINARY(mRet), 8, "0");

							// System.out.println("---" + mRet + "(" + tmp +
							// ")");

							// CGI
							if (tmp.charAt(7) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// SAI
							if (tmp.charAt(6) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// RAI
							if (tmp.charAt(5) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// TAI
							if (tmp.charAt(4) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// ECGI
							if (tmp.charAt(3) == '1') {
								mRet = 0;
								for (int i = 1; i <= 1; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 3; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							mByteN += mTagFieldLength;
							/*
							 * for (int i = 1; i <= mTagFieldLength; i++) {
							 * structSamSung.UserLocationInformation +=
							 * Global.HexToTBCD(Global.fixSignedByte(mBuffer[
							 * mFileByte + mByteN])); mByteN++; }
							 */

							// System.out.println(structSamSung.UserLocationInformation);
						} else {
							mByteN += mTagFieldLength;
						}
					}
					// listOfServiceData - sequence
					else if (mTagFieldCode.compareTo("bf22") == 0) {

						int dup = 0;
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							if (miTagFieldCode.compareTo("30") == 0) {

								dup++;
								sdByteN = 0;
								while (sdByteN < miTagFieldLength) {
									sdTagFieldCode = Global.HexToBCD(
											Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
									sdByteN++;

									sdTagFieldLength = Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]);
									byteN++;

									if (sdTagFieldCode.compareTo("81") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdRatingGroup += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
														* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("82") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdChargingRuleBaseName += Global.fixSignedCharByte(
														mBuffer[mFileByte + mByteN + byteN + sdByteN]);
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("84") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdLocalSequenceNumber += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
														* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("85") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdTimeofFirstUsage += Global.HexToBCD(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("86") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdTimeofLastUsage += Global.HexToBCD(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("87") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdTimeUsage += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
														* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("88") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdServiceConditionChange += Global.HexToBINARY(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("8c") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											structSamSung.DataVolumeUplink += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
													* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("8d") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											structSamSung.DataVolumeDownlink += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
													* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("8e") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdReportTime += Global.HexToBCD(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("91") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.sdServiceIdentifier += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
														* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									} else if (sdTagFieldCode.compareTo("94") == 0) {
										mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]);

										if (mRet != 191 && dup == 1) {

											sdByteN++;

											if (structSamSung.MCCMNC.compareTo("") == 0) {
												for (int i = 1; i <= 3; i++) {
													structSamSung.sdUserLocationInformation += Global
															.HexToTBCD(Global.fixSignedByte(
																	mBuffer[mFileByte + mByteN + byteN + sdByteN]));
													sdByteN++;
												}
											}

											String tmp = Global.rpad(Global.HexToBINARY(mRet), 8, "0");

											// CGI
											if (tmp.charAt(7) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// SAI
											if (tmp.charAt(6) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// RAI
											if (tmp.charAt(5) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// TAI
											if (tmp.charAt(4) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// ECGI
											if (tmp.charAt(3) == '1') {
												mRet = 0;
												for (int i = 1; i <= 1; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 3; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}
										} else {
											sdByteN += sdTagFieldLength;
										}
									} else {
										sdByteN += sdTagFieldLength;
									}
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// ServingNodeType - sequence 0a
					else if (mTagFieldCode.compareTo("bf23") == 0) {

						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							if (miTagFieldCode.compareTo("0a") == 0) {
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.ServingNodeType += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// PGWPLMNIdentifier
					else if (mTagFieldCode.compareTo("9f25") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.PGWPLMNIdentifier += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// StartTime
					else if (mTagFieldCode.compareTo("9f26") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.StartTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// StopTime
					else if (mTagFieldCode.compareTo("9f27") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.StopTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// PDNConnectionID
					else if (mTagFieldCode.compareTo("9f29") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.PDNConnectionID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// UserCSGInformation - sequence
					else if (mTagFieldCode.compareTo("bf2b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							// structSamSung.UserCSGInformation +=
							// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
							// + mByteN]));
							mByteN++;
						}
					}
					// threeGPP2UserLocationInformation
					else if (mTagFieldCode.compareTo("bf2c") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {

							mByteN++;
						}
					}
					// ServedPDPPDNAddressExtension - no value
					else if (mTagFieldCode.compareTo("bf2d") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedPDPPDNAddressExtension += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// DynamicAddressFlag - no value
					else if (mTagFieldCode.compareTo("9f2f") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.DynamicAddressFlag += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mByteN += mTagFieldLength;
					}
				}
			}

			// mFileByte += mByteN;
			mFileByte += mRecLength + 2;
		}

		/**
		 * sGW Record
		 */
		private void sGWRecord() {

			int mRet = 0;
			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;
			String sdTagFieldCode;
			int sdTagFieldLength;
			int sdByteN = 0;

			while (mByteN < mRecLength) {

				mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);

				mByteN++;
				if (mLength > 128) {

					mRet = mLength - 128;
					for (int i = 1; i <= mRet; i++) {
						mTagModuleLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				} else {

					mTagModuleLength = mLength;
				}

				mTagModuleLength += mByteN;
				while (mByteN < mTagModuleLength) {

					mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;

					if (mTagFieldCode.compareTo("9f") == 0 || mTagFieldCode.compareTo("bf") == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						if (mLength > 128) {
							mByteN++;
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
							}
						} else {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}

					mTagFieldLength = 0;
                    int bOfLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
            
                    mByteN++;
                    if (bOfLength > 128) {
                        bOfLength = bOfLength - 128;
                        for (int i = 1; i <= bOfLength; i++) {
                            mTagFieldLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
                                    * Math.pow(256, (bOfLength - i));
                            mByteN++;
                        }
            
                    } else {
                        mTagFieldLength = bOfLength;
                    }

					// RecordType
					if (mTagFieldCode.compareTo("80") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}

					// ServedIMSI
					else if (mTagFieldCode.compareTo("83") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedIMSI += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}

					// s-GWAddress - SGWAddressUsed
					else if (mTagFieldCode.compareTo("a4") == 0) {
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							for (int i = 1; i <= miTagFieldLength; i++) {
								structSamSung.SGWAddressUsed += Global
										.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
							}
						}

						mByteN += mTagFieldLength;
					}
					// ChargingID
					else if (mTagFieldCode.compareTo("85") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ChargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServingNodeAddress
					else if (mTagFieldCode.compareTo("a6") == 0) {
						/*
						 * for (int i = 1; i <= mTagFieldLength; i++) {
						 * structSamSung.ServingNodeAddress +=
						 * Global.HexToTBCD(Global.fixSignedByte(mBuffer[
						 * mFileByte + mByteN])); mByteN++; }
						 */
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							for (int i = 1; i <= miTagFieldLength; i++) {
								structSamSung.ServingNodeAddress += Global
										.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
							}
						}

						mByteN += mTagFieldLength;
					}
					// AccessPointNameNI
					else if (mTagFieldCode.compareTo("87") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.AccessPointNameNI += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// PDPPDNType
					else if (mTagFieldCode.compareTo("88") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.PDPPDNType += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ServedPDPPDNAddress
					else if (mTagFieldCode.compareTo("a9") == 0) {
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							// ServedPDPPDNAddress
							if (miTagFieldCode.compareTo("a0") == 0) {

								miTagFieldCode = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;

								miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;

								// IPAddress Data
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.ServedPDPPDNAddress += Global
											.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// ff - TRUE
					else if (mTagFieldCode.compareTo("8b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.DynamicAddressFlag += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else if (mTagFieldCode.compareTo("ac") == 0) {

						int dup = 0;
						byteN = 0;
						while (byteN < mTagFieldLength) {

							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							if (miTagFieldCode.compareTo("30") == 0) {

								dup++;
								sdByteN = 0;
								while (sdByteN < miTagFieldLength) {

									sdTagFieldCode = Global.HexToBCD(
											Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
									sdByteN++;

									sdTagFieldLength = Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]);
									byteN++;

									// DataVolumeUplink
									if (sdTagFieldCode.compareTo("83") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											structSamSung.DataVolumeUplink += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
													* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									}
									// DataVolumeDownlink
									else if (sdTagFieldCode.compareTo("84") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											structSamSung.DataVolumeDownlink += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN])
													* Math.pow(256, (sdTagFieldLength - i));
											sdByteN++;
										}
									}
									// ChangeCondition
									else if (sdTagFieldCode.compareTo("85") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.ChangeCondition += Global.HexToBCD(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									}
									// ChangeTime
									else if (sdTagFieldCode.compareTo("86") == 0) {
										for (int i = 1; i <= sdTagFieldLength; i++) {
											if (dup == 1)
												structSamSung.ChangeTime += Global.HexToBCD(Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]));
											sdByteN++;
										}
									}
									// sdUserLocationInformation
									else if (sdTagFieldCode.compareTo("88") == 0) {
										mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + sdByteN]);

										if (mRet != 191 && dup == 1) {

											sdByteN++;
											if (structSamSung.MCCMNC.compareTo("") == 0) {
												for (int i = 1; i <= 3; i++) {
													structSamSung.sdUserLocationInformation += Global
															.HexToTBCD(Global.fixSignedByte(
																	mBuffer[mFileByte + mByteN + byteN + sdByteN]));
													sdByteN++;
												}
											}

											String tmp = Global.rpad(Global.HexToBINARY(mRet), 8, "0");

											// CGI
											if (tmp.charAt(7) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// SAI
											if (tmp.charAt(6) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// RAI
											if (tmp.charAt(5) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// TAI
											if (tmp.charAt(4) == '1') {
												mRet = 0;
												for (int i = 1; i <= 2; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}

											// ECGI
											if (tmp.charAt(3) == '1') {
												mRet = 0;
												for (int i = 1; i <= 1; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;

												mRet = 0;
												for (int i = 1; i <= 3; i++) {
													mRet += Global.fixSignedByte(
															mBuffer[mFileByte + mByteN + byteN + sdByteN])
															* Math.pow(256, (2 - i));
													sdByteN++;

												}
												structSamSung.sdUserLocationInformation += " " + mRet;
											}
										} else {
											sdByteN += sdTagFieldLength;
										}
									} else {
										sdByteN += sdTagFieldLength;
									}
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// RecordOpeningTime
					else if (mTagFieldCode.compareTo("8d") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordOpeningTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// Duration
					else if (mTagFieldCode.compareTo("8e") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.Duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// CauseforRecordClosing
					else if (mTagFieldCode.compareTo("8f") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.CauseforRecordClosing += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// Diagnostics
					else if (mTagFieldCode.compareTo("b0") == 0) {

						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							// Diagnostics Data
							if (miTagFieldCode.compareTo("80") == 0) {

								// IPAddress Data
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.Diagnostics += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (miTagFieldLength - i));
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// RecordSequenceNumber - no value
					else if (mTagFieldCode.compareTo("91") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RecordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// NodeID
					else if (mTagFieldCode.compareTo("92") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.NodeID += Global.fixSignedCharByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// LocalRecordSequenceNumber
					else if (mTagFieldCode.compareTo("94") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.LocalRecordSequenceNumber += Global
									.fixSignedByte(mBuffer[mFileByte + mByteN]);
							mByteN++;
						}
					}
					// APNSelectionMode value
					else if (mTagFieldCode.compareTo("95") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.APNSelectionMode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServedMSISDN
					else if (mTagFieldCode.compareTo("96") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedMSISDN += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ChargingCharacteristics
					else if (mTagFieldCode.compareTo("97") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ChargingCharacteristics += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// chChSelectionMode value
					else if (mTagFieldCode.compareTo("98") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.chChSelectionMode += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// ServingNodePLMNIdentifier
					else if (mTagFieldCode.compareTo("9b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServingNodePLMNIdentifier += Global
									.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// ServedIMEISV no value
					else if (mTagFieldCode.compareTo("9d") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedIMEISV += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// RATType
					else if (mTagFieldCode.compareTo("9e") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.RATType += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// MSTimeZone - value ""
					else if (mTagFieldCode.compareTo("9f1f") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.MSTimeZone += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// UserLocationInformation - value ""
					else if (mTagFieldCode.compareTo("9f20") == 0) {

						byteN = 0;
						mRet = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;

						if (mRet != 191) {

							if (structSamSung.MCCMNC.compareTo("") == 0) {
								for (int i = 1; i <= 3; i++) {
									structSamSung.UserLocationInformation += Global
											.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
							}

							String tmp = Global.rpad(Global.HexToBINARY(mRet), 8, "0");

							// System.out.println("---" + mRet + "(" + tmp +
							// ")");

							// CGI
							if (tmp.charAt(7) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// SAI
							if (tmp.charAt(6) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// RAI
							if (tmp.charAt(5) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// TAI
							if (tmp.charAt(4) == '1') {
								mRet = 0;
								for (int i = 1; i <= 2; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							// ECGI
							if (tmp.charAt(3) == '1') {
								mRet = 0;
								for (int i = 1; i <= 1; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;

								}
								structSamSung.UserLocationInformation += " " + mRet;

								mRet = 0;
								for (int i = 1; i <= 3; i++) {
									mRet += Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN])
											* Math.pow(256, (2 - i));
									byteN++;
								}
								structSamSung.UserLocationInformation += " " + mRet;
							}

							mByteN += mTagFieldLength;
						} else {
							mByteN += mTagFieldLength;
						}
					}
					// ServingNodeType - sequence 0a
					else if (mTagFieldCode.compareTo("bf23") == 0) {

						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							if (miTagFieldCode.compareTo("0a") == 0) {
								for (int i = 1; i <= miTagFieldLength; i++) {
									structSamSung.ServingNodeType += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
							} else {
								byteN += miTagFieldLength;
							}
						}

						mByteN += mTagFieldLength;
					}
					// PGWAddressUsed
					else if (mTagFieldCode.compareTo("9f24") == 0) {
						byteN = 0;
						while (byteN < mTagFieldLength) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							for (int i = 1; i <= miTagFieldLength; i++) {
								structSamSung.PGWAddressUsed += Global
										.fixSignedCharByte(mBuffer[mFileByte + mByteN + byteN]);
								byteN++;
							}
						}

						mByteN += mTagFieldLength;
					}
					// StartTime
					else if (mTagFieldCode.compareTo("9f26") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.StartTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// StopTime
					else if (mTagFieldCode.compareTo("9f27") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.StopTime += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					// PDNConnectionID
					else if (mTagFieldCode.compareTo("9f28") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.PDNConnectionID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
									* Math.pow(256, (mTagFieldLength - i));
							mByteN++;
						}
					}
					// UserCSGInformation - sequence
					else if (mTagFieldCode.compareTo("bf2a") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							// structSamSung.UserCSGInformation +=
							// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
							// + mByteN]));
							mByteN++;
						}
					}
					// ServedPDPPDNAddressExtension - no value
					else if (mTagFieldCode.compareTo("bf2b") == 0) {
						for (int i = 1; i <= mTagFieldLength; i++) {
							structSamSung.ServedPDPPDNAddressExtension += Global
									.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mByteN += mTagFieldLength;
					}

					// System.out.println("mByteN = "+mByteN);
				}
			}

			// mFileByte += mByteN;
			mFileByte += mRecLength + 2;
		}
	}

	class ConvertEricssonLTE {

		protected StructEricssonLTE structEricssonLTE = new StructEricssonLTE();

		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;
		protected int mLength = 0;
		protected int mByteN = 0;
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;

		private int convertEricssonLTE(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {

			/**
			 * Text file io tool
			 */
			TextFile fileConvert = new TextFile();

			/**
			 * Read source file
			 */
			RandomAccessFile fileCDR = null;

			/**
			 * IO tool
			 */
			IOUtils IOUtil = new IOUtils();

			/**
			 * source file's path
			 */
			String mSource = null;

			/**
			 * source file's length
			 */
			int mFileLength = 0;

			/**
			 * Number of record CDR
			 */
			int mRecS = 0;
			int mRecP = 0;

			/**
			 * Time
			 */
			String firstCallingTime = "";
			String lastCallingTime = "";

			try {
				Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");

				// get path
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;

				// open file to read
				fileCDR = new RandomAccessFile(mSource, "r");

				// split by day
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource); // maker folder
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				// delete exists file
				IOUtil.deleteFile(mSource);

				fileConvert.openFile(mSource, 5242880);

				/**
				 * Add header file convert
				 */
				if (cdrfileParam.ChargeCDRFile) {
					fileConvert.addText(Global.mEricssonHeaderCharge);
				} else {
					fileConvert.addText(Global.mEricssonHeaderNoCharge);
				}

				mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;

				Global.ExecuteSQL(mConnection, mSQL);

				mFileLength = (int) fileCDR.length();

				// khai bao buffer
				mBuffer = new byte[mFileLength];

				mLength = fileCDR.read(mBuffer);

				mFileByte = 0;

				// Total length of the CDR file in octets (header + CDR payload)
				// int cdrDataLength = 0;

				mFileByte = 0;
				while (mFileByte < mFileLength) {
					mRecLength = 0;
					mByteN = 0;
					mTagModuleCode = "";
					mTagModuleLength = 0;

					// mTagModuleCode
					mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;

					if (mTagModuleCode.compareTo("bf") == 0 || mTagModuleCode.compareTo("9f") == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						if (mLength > 128) {
							mByteN++;
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
							}
						} else {
							mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}

					mRecLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN++;

					if (mRecLength > 128) {
						mRet = mRecLength - 128;
						mRecLength = 0;
						for (int i = 1; i <= mRet; i++) {
							mRecLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
						mRecLength += mByteN;
					} else {
						mRecLength = mFileLength;
					}

					// System.out.println("mTagModuleCode = "+mTagModuleCode);
					// System.out.println("mRecLength = "+mRecLength);

					structEricssonLTE.recordTypeNum = 0;
					structEricssonLTE.recordTypeStr = "";
					structEricssonLTE.servedIMSI = "";
					structEricssonLTE.sGWiPBinV4Address = "";
					structEricssonLTE.chargingID = 0;
					structEricssonLTE.servingNodeiPBinV4Address = "";
					structEricssonLTE.accessPointNameNI = "";
					structEricssonLTE.pdpPDNType = "";
					structEricssonLTE.servedPDPPDNiPBinV4Address = "";
					structEricssonLTE.servedPDPPDNiPBinV6Address = "";
					structEricssonLTE.dataVolumeGPRSUplink = 0;
					structEricssonLTE.dataVolumeGPRSDownlink = 0;
					structEricssonLTE.changeConditionStr = "";
					structEricssonLTE.changeConditionNum = 0;
					structEricssonLTE.changeTime = "";
					structEricssonLTE.userLocationInformation = "";
					structEricssonLTE.ePCQoSqCI = 0;
					structEricssonLTE.ePCQoSmaxRequestedBandwithUL = 0;
					structEricssonLTE.ePCQoSmaxRequestedBandwithDL = 0;
					structEricssonLTE.ePCQoSguaranteedBitrateUL = 0;
					structEricssonLTE.ePCQoSguaranteedBitrateDL = 0;
					structEricssonLTE.ePCQoSaRP = 0;
					structEricssonLTE.recordOpeningTime = "";
					structEricssonLTE.duration = 0;
					structEricssonLTE.causeForRecClosingNum = 0;
					structEricssonLTE.causeForRecClosingStr = "";
					structEricssonLTE.recordSequenceNumber = 0;
					structEricssonLTE.nodeID = "";
					structEricssonLTE.localSequenceNumber = 0;
					structEricssonLTE.servedMSISDN = "";
					structEricssonLTE.chargingCharacteristics = "";
					structEricssonLTE.servingNodePLMNIdentifier = "";
					structEricssonLTE.servedIMEISV = "";
					structEricssonLTE.rATTypeNum = 0;
					structEricssonLTE.rATTypeStr = "";
					structEricssonLTE.mSTimeZone = "";
					structEricssonLTE.sGWChangeStr = "";
					structEricssonLTE.sGWChangeNum = 0;
					structEricssonLTE.servingNodeTypeStr = "";
					structEricssonLTE.servingNodeTypeNum = 0;
					structEricssonLTE.pGWiPBinV4Address = "";
					structEricssonLTE.pGWiPBinV6Address = "";
					structEricssonLTE.pGWPLMNIdentifier = "";
					structEricssonLTE.pDNConnectionID = 0;
					structEricssonLTE.iMSIunauthenticatedFlag = "";
					structEricssonLTE.servedPDPPDNiPBinV4AddressExt = "";
					structEricssonLTE.servedPDPPDNiPBinV6AddressExt = "";
					structEricssonLTE.sGWiPv6Address = "";
					structEricssonLTE.servingNodeiPv6Address = "";
					structEricssonLTE.pGWiPv6AddressUsed = "";

					structEricssonLTE.networkInitiation = "";
					structEricssonLTE.servedIMEI = "";
					structEricssonLTE.sgsniPBinV4Address = "";
					structEricssonLTE.msNetworkCapability = "";
					structEricssonLTE.routingArea = "";
					structEricssonLTE.locationAreaCode = "";
					structEricssonLTE.cellIdentifier = "";
					structEricssonLTE.ggsniPBinV4Address = "";
					structEricssonLTE.pdpType = "";
					structEricssonLTE.servedPDPiPBinV4Address = "";
					structEricssonLTE.servedPDPiPBinV6Address = "";
					structEricssonLTE.qosRequested = "";
					structEricssonLTE.qosNegotiated = "";
					structEricssonLTE.sgsnChange = "";
					structEricssonLTE.gsm0408Cause = 0;
					structEricssonLTE.gsm0902MapErrorValue = 0;
					structEricssonLTE.identifier = "";
					structEricssonLTE.significance = "";
					structEricssonLTE.ts48018BssgpCause = "";
					structEricssonLTE.ts25413RanapCause = "";
					structEricssonLTE.bssgpExttsBssgpRanapCauseBssgp = "";
					structEricssonLTE.bssgpExttsBssgpRanapMessageType = "";
					structEricssonLTE.bssgpExttsBssgpRanapMessageSource = "";
					structEricssonLTE.bssgpExttsBssgpRanapCauseTimeStamp = "";
					structEricssonLTE.ranapExttsBssgpRanapCause = "";
					structEricssonLTE.ranapExttsBssgpRanapMessageType = "";
					structEricssonLTE.ranapExttsBssgpRanapMessageSource = "";
					structEricssonLTE.ranapExttsBssgpRanapCauseTimeStamp = "";
					structEricssonLTE.apnSelectionModeNum = 0;
					structEricssonLTE.apnSelectionModeStr = "";
					structEricssonLTE.accessPointNameOI = "";
					structEricssonLTE.sCFAddress = "";
					structEricssonLTE.serviceKey = 0;
					structEricssonLTE.defaultTransactionHandling = "";
					structEricssonLTE.cAMELAccessPointNameNI = "";
					structEricssonLTE.cAMELAccessPointNameOI = "";
					structEricssonLTE.numberOfDPEncountered = 0;
					structEricssonLTE.levelOfCAMELServiceNum = 0;
					structEricssonLTE.levelOfCAMELServiceStr = "";
					structEricssonLTE.freeFormatData = "";
					structEricssonLTE.FDAppendIndicator = "";
					structEricssonLTE.chChSelectionModeStr = "";
					structEricssonLTE.chChSelectionModeNum = 0;
					structEricssonLTE.dynamicAddressFlag = "";
					structEricssonLTE.pLMNIdentifier = "";
					structEricssonLTE.serviceCentre = "";
					structEricssonLTE.recordingEntity = "";
					structEricssonLTE.locationArea = "";
					structEricssonLTE.messageReference = "";
					structEricssonLTE.eventTimeStamp = "";
					structEricssonLTE.destinationNumber = "";
					structEricssonLTE.defaultSMSHandlingStr = "";
					structEricssonLTE.defaultSMSHandlingNum = 0;
					structEricssonLTE.cAMELCallingPartyNumber = "";
					structEricssonLTE.cAMELDestinationSubscriberNumber = "";
					structEricssonLTE.cAMELSMSCAddress = "";
					structEricssonLTE.smsReferenceNumber = "";
					structEricssonLTE.numberOfSM = "";
					structEricssonLTE.locationAreaLastSM = "";
					structEricssonLTE.routingAreaLastSM = "";
					structEricssonLTE.cellIdentifierLastSM = "";
					structEricssonLTE.pLMNIdentifierLastSM = "";
					structEricssonLTE.accessPointName = "";
					structEricssonLTE.reliability = "";
					structEricssonLTE.delay = "";
					structEricssonLTE.precedence = "";
					structEricssonLTE.peakThroughput = "";
					structEricssonLTE.meanThroughput = "";
					structEricssonLTE.changeCondition = "";
					structEricssonLTE.causeForRecClosing = "";
					structEricssonLTE.sgsnPLMNIdentifier = "";
					structEricssonLTE.apnSelectionMode = "";
					structEricssonLTE.umtsQosInformation = "";
					structEricssonLTE.qoSNegotiated = "";
					structEricssonLTE.iMSsignalingContext = "";
					structEricssonLTE.pSFreeFormatDataBC = "";
					structEricssonLTE.pSFFDAppendIndicatorBC = "";
					structEricssonLTE.ratingGroup = 0;
					structEricssonLTE.resultCode = 0;
					structEricssonLTE.timeOfFirstUsage = "";
					structEricssonLTE.timeOfLastUsage = "";
					structEricssonLTE.timeUsage = 0;
					structEricssonLTE.serviceConditionChange = "";
					structEricssonLTE.qoSInformationNeg = "";
					structEricssonLTE.sgsniPBinV4AddressServiceData = "";
					structEricssonLTE.sgsniPBinV6AddressServiceData = "";
					structEricssonLTE.sGSNPLMNIdentifier = "";
					structEricssonLTE.datavolumeFBCUplink = "";
					structEricssonLTE.datavolumeFBCDownlink = "";
					structEricssonLTE.timeOfReport = "";
					structEricssonLTE.failureHandlingContinue = "";
					structEricssonLTE.serviceIdentifier = "";
					structEricssonLTE.pSFreeFormatDataB2 = "";
					structEricssonLTE.pSFFDAppendIndicatorB2 = "";
					structEricssonLTE.aFRecordInformation = "";
					structEricssonLTE.userLocationInformationServiceData = "";
					structEricssonLTE.numberOfEvents = "";
					structEricssonLTE.eventTimeStamps = "";
					structEricssonLTE.requestTypeCreditControl = "";
					structEricssonLTE.requestStatusCreditControl = "";
					structEricssonLTE.resultCodeCreditControl = "";
					structEricssonLTE.ccRequestNumberCreditControl = "";
					structEricssonLTE.creditControlSessionId = "";
					structEricssonLTE.ccsRealm = "";
					structEricssonLTE.requestTypePolicyControl = "";
					structEricssonLTE.requestStatusPolicyControl = "";
					structEricssonLTE.resultCodePolicyControl = "";
					structEricssonLTE.stopTimePolicyControl = "";
					structEricssonLTE.pcsRealm = "";
					structEricssonLTE.policyControlSessionId = "";
					structEricssonLTE.userCategory = "";
					structEricssonLTE.ruleSpaceId = "";
					structEricssonLTE.ratingGroupServiceContainer = "";
					structEricssonLTE.method = "";
					structEricssonLTE.inactivity = "";
					structEricssonLTE.resolution = "";
					structEricssonLTE.ccRequestNumber = "";
					structEricssonLTE.serviceSpecificUnits = "";
					structEricssonLTE.count = "";
					structEricssonLTE.uri = "";
					structEricssonLTE.uriIdentifier = "";
					structEricssonLTE.uriDataVolumeUplink = "";
					structEricssonLTE.uriDataVolumeDownlink = "";
					structEricssonLTE.listOfUriTimeStamps = "";
					structEricssonLTE.uriTimeStamp = "";
					structEricssonLTE.ratingGroupTimeReport = "";
					structEricssonLTE.startTimeReport = "";
					structEricssonLTE.endTime = "";
					structEricssonLTE.dataVolumeUplink = "";
					structEricssonLTE.dataVolumeDownlink = "";
					structEricssonLTE.userLocationInformation3GPP2 = "";
					structEricssonLTE.pSFreeFormatDataServiceData = "";
					structEricssonLTE.pSFFDAppendIndicatorServiceData = "";
					structEricssonLTE.afChargingIdentifier = "";
					structEricssonLTE.userLocationInformationServiceData3GPP2 = "";
					structEricssonLTE.servingNodeType = "";
					structEricssonLTE.startTime = "";
					structEricssonLTE.stopTime = "";
					structEricssonLTE.localSequenceNumberServiceData = "";
					structEricssonLTE.userLocationInformationTrafficVolumes = "";

					if (mTagModuleCode.compareTo("b4") == 0) {
						sgsnPDPRecord();
						AnalyseSgsnPDPRecord();
						mRecP++;
					} else if (mTagModuleCode.compareTo("b7") == 0) {
						sgsnSMORecord();
						AnalyseSgsnSMORecord();
					} else if (mTagModuleCode.compareTo("b8") == 0) {
						sgsnSMTRecord();
						AnalyseSgsnSMORecord();
					} else if (mTagModuleCode.compareTo("bf4e") == 0) {
						sGWRecord();
						AnalyseSGWRecord();
						mRecS++;
					} else if (mTagModuleCode.compareTo("bf4f") == 0) {
						pgwRecord();
						AnalyseGGSNRecord();
						mRecP++;
					} else if (mTagModuleCode.compareTo("bf46") == 0) {
						egsnPDPRecord();
						AnalyseGGSNRecord();
						mRecP++;
					} else {
						mByteN = (mByteN - 1) + mRecLength;
						mFileByte += mByteN;
					}

					// write to text file
					if (cdrfileParam.ChargeCDRFile) {
						fileConvert.addText(mStrValues);
						mStrValues = "";
					} else {
						mStrValues = structEricssonLTE.recordTypeStr + "|" + structEricssonLTE.servedIMSI + "|"
								+ structEricssonLTE.sGWiPBinV4Address + "|" + structEricssonLTE.chargingID + "|"
								+ structEricssonLTE.servingNodeiPBinV4Address + "|"
								+ structEricssonLTE.accessPointNameNI + "|" + structEricssonLTE.pdpPDNType + "|"
								+ structEricssonLTE.servedPDPPDNiPBinV4Address + "|"
								+ structEricssonLTE.servedPDPPDNiPBinV6Address + "|"
								+ structEricssonLTE.dataVolumeGPRSUplink + "|"
								+ structEricssonLTE.dataVolumeGPRSDownlink + "|" + structEricssonLTE.changeConditionStr
								+ "|" + structEricssonLTE.changeTime + "|" + structEricssonLTE.userLocationInformation
								+ "|" + structEricssonLTE.ePCQoSqCI + "|"
								+ structEricssonLTE.ePCQoSmaxRequestedBandwithUL + "|"
								+ structEricssonLTE.ePCQoSmaxRequestedBandwithDL + "|"
								+ structEricssonLTE.ePCQoSguaranteedBitrateUL + "|"
								+ structEricssonLTE.ePCQoSguaranteedBitrateDL + "|" + structEricssonLTE.ePCQoSaRP + "|"
								+ structEricssonLTE.recordOpeningTime + "|" + structEricssonLTE.duration + "|"
								+ structEricssonLTE.causeForRecClosingStr + "|" + structEricssonLTE.recordSequenceNumber
								+ "|" + structEricssonLTE.nodeID + "|" + structEricssonLTE.localSequenceNumber + "|"
								+ structEricssonLTE.servedMSISDN + "|" + structEricssonLTE.chargingCharacteristics + "|"
								+ structEricssonLTE.servingNodePLMNIdentifier + "|" + structEricssonLTE.servedIMEISV
								+ "|" + structEricssonLTE.rATTypeStr + "|" + structEricssonLTE.mSTimeZone + "|"
								+ structEricssonLTE.sGWChangeStr + "|" + structEricssonLTE.servingNodeTypeStr + "|"
								+ structEricssonLTE.pGWiPBinV4Address + "|" + structEricssonLTE.pGWiPBinV6Address + "|"
								+ structEricssonLTE.pGWPLMNIdentifier + "|" + structEricssonLTE.pDNConnectionID + "|"
								+ structEricssonLTE.iMSIunauthenticatedFlag + "|"
								+ structEricssonLTE.servedPDPPDNiPBinV4AddressExt + "|"
								+ structEricssonLTE.servedPDPPDNiPBinV6AddressExt + "|"
								+ structEricssonLTE.sGWiPv6Address + "|" + structEricssonLTE.servingNodeiPv6Address
								+ "|" + structEricssonLTE.pGWiPv6AddressUsed + "|" +

						structEricssonLTE.networkInitiation + "|" + structEricssonLTE.servedIMEI + "|"
								+ structEricssonLTE.sgsniPBinV4Address + "|" + structEricssonLTE.msNetworkCapability
								+ "|" + structEricssonLTE.routingArea + "|" + structEricssonLTE.locationAreaCode + "|"
								+ structEricssonLTE.cellIdentifier + "|" + structEricssonLTE.ggsniPBinV4Address + "|"
								+ structEricssonLTE.pdpType + "|" + structEricssonLTE.servedPDPiPBinV4Address + "|"
								+ structEricssonLTE.servedPDPiPBinV6Address + "|" + structEricssonLTE.qosRequested + "|"
								+ structEricssonLTE.qosNegotiated + "|" + structEricssonLTE.sgsnChange + "|"
								+ structEricssonLTE.gsm0408Cause + "|" + structEricssonLTE.gsm0902MapErrorValue + "|"
								+ structEricssonLTE.identifier + "|" + structEricssonLTE.significance + "|"
								+ structEricssonLTE.ts48018BssgpCause + "|" + structEricssonLTE.ts25413RanapCause + "|"
								+ structEricssonLTE.bssgpExttsBssgpRanapCauseBssgp + "|"
								+ structEricssonLTE.bssgpExttsBssgpRanapMessageType + "|"
								+ structEricssonLTE.bssgpExttsBssgpRanapMessageSource + "|"
								+ structEricssonLTE.bssgpExttsBssgpRanapCauseTimeStamp + "|"
								+ structEricssonLTE.ranapExttsBssgpRanapCause + "|"
								+ structEricssonLTE.ranapExttsBssgpRanapMessageType + "|"
								+ structEricssonLTE.ranapExttsBssgpRanapMessageSource + "|"
								+ structEricssonLTE.ranapExttsBssgpRanapCauseTimeStamp + "|"
								+ structEricssonLTE.apnSelectionModeStr + "|" + structEricssonLTE.accessPointNameOI
								+ "|" + structEricssonLTE.sCFAddress + "|" + structEricssonLTE.serviceKey + "|"
								+ structEricssonLTE.defaultTransactionHandling + "|"
								+ structEricssonLTE.cAMELAccessPointNameNI + "|"
								+ structEricssonLTE.cAMELAccessPointNameOI + "|"
								+ structEricssonLTE.numberOfDPEncountered + "|"
								+ structEricssonLTE.levelOfCAMELServiceStr + "|" + structEricssonLTE.freeFormatData
								+ "|" + structEricssonLTE.FDAppendIndicator + "|"
								+ structEricssonLTE.chChSelectionModeStr + "|" + structEricssonLTE.dynamicAddressFlag
								+ "|" + structEricssonLTE.pLMNIdentifier + "|" + structEricssonLTE.serviceCentre + "|"
								+ structEricssonLTE.recordingEntity + "|" + structEricssonLTE.locationArea + "|"
								+ structEricssonLTE.messageReference + "|" + structEricssonLTE.eventTimeStamp + "|"
								+ structEricssonLTE.destinationNumber + "|" + structEricssonLTE.defaultSMSHandlingStr
								+ "|" + structEricssonLTE.defaultSMSHandlingNum + "|"
								+ structEricssonLTE.cAMELCallingPartyNumber + "|"
								+ structEricssonLTE.cAMELDestinationSubscriberNumber + "|"
								+ structEricssonLTE.cAMELSMSCAddress + "|" + structEricssonLTE.smsReferenceNumber + "|"
								+ structEricssonLTE.numberOfSM + "|" + structEricssonLTE.locationAreaLastSM + "|"
								+ structEricssonLTE.routingAreaLastSM + "|" + structEricssonLTE.cellIdentifierLastSM
								+ "|" + structEricssonLTE.pLMNIdentifierLastSM + "|" + structEricssonLTE.accessPointName
								+ "|" + structEricssonLTE.reliability + "|" + structEricssonLTE.delay + "|"
								+ structEricssonLTE.precedence + "|" + structEricssonLTE.peakThroughput + "|"
								+ structEricssonLTE.meanThroughput + "|" + structEricssonLTE.changeCondition + "|"
								+ structEricssonLTE.causeForRecClosing + "|" + structEricssonLTE.sgsnPLMNIdentifier
								+ "|" + structEricssonLTE.apnSelectionMode + "|" + structEricssonLTE.umtsQosInformation
								+ "|" + structEricssonLTE.qoSNegotiated + "|" + structEricssonLTE.iMSsignalingContext
								+ "|" + structEricssonLTE.pSFreeFormatDataBC + "|"
								+ structEricssonLTE.pSFFDAppendIndicatorBC + "|" + structEricssonLTE.ratingGroup + "|"
								+ structEricssonLTE.resultCode + "|" + structEricssonLTE.timeOfFirstUsage + "|"
								+ structEricssonLTE.timeOfLastUsage + "|" + structEricssonLTE.timeUsage + "|"
								+ structEricssonLTE.serviceConditionChange + "|" + structEricssonLTE.qoSInformationNeg
								+ "|" + structEricssonLTE.sgsniPBinV4AddressServiceData + "|"
								+ structEricssonLTE.sgsniPBinV6AddressServiceData + "|"
								+ structEricssonLTE.sGSNPLMNIdentifier + "|" + structEricssonLTE.datavolumeFBCUplink
								+ "|" + structEricssonLTE.datavolumeFBCDownlink + "|" + structEricssonLTE.timeOfReport
								+ "|" + structEricssonLTE.failureHandlingContinue + "|"
								+ structEricssonLTE.serviceIdentifier + "|" + structEricssonLTE.pSFreeFormatDataB2 + "|"
								+ structEricssonLTE.pSFFDAppendIndicatorB2 + "|" + structEricssonLTE.aFRecordInformation
								+ "|" + structEricssonLTE.userLocationInformationServiceData + "|"
								+ structEricssonLTE.numberOfEvents + "|" + structEricssonLTE.eventTimeStamps + "|"
								+ structEricssonLTE.requestTypeCreditControl + "|"
								+ structEricssonLTE.requestStatusCreditControl + "|"
								+ structEricssonLTE.resultCodeCreditControl + "|"
								+ structEricssonLTE.ccRequestNumberCreditControl + "|"
								+ structEricssonLTE.creditControlSessionId + "|" + structEricssonLTE.ccsRealm + "|"
								+ structEricssonLTE.requestTypePolicyControl + "|"
								+ structEricssonLTE.requestStatusPolicyControl + "|"
								+ structEricssonLTE.resultCodePolicyControl + "|"
								+ structEricssonLTE.stopTimePolicyControl + "|" + structEricssonLTE.pcsRealm + "|"
								+ structEricssonLTE.policyControlSessionId + "|" + structEricssonLTE.userCategory + "|"
								+ structEricssonLTE.ruleSpaceId + "|" + structEricssonLTE.ratingGroupServiceContainer
								+ "|" + structEricssonLTE.method + "|" + structEricssonLTE.inactivity + "|"
								+ structEricssonLTE.resolution + "|" + structEricssonLTE.ccRequestNumber + "|"
								+ structEricssonLTE.serviceSpecificUnits + "|" + structEricssonLTE.count + "|"
								+ structEricssonLTE.uri + "|" + structEricssonLTE.uriIdentifier + "|"
								+ structEricssonLTE.uriDataVolumeUplink + "|" + structEricssonLTE.uriDataVolumeDownlink
								+ "|" + structEricssonLTE.listOfUriTimeStamps + "|" + structEricssonLTE.uriTimeStamp
								+ "|" + structEricssonLTE.ratingGroupTimeReport + "|"
								+ structEricssonLTE.startTimeReport + "|" + structEricssonLTE.endTime + "|"
								+ structEricssonLTE.dataVolumeUplink + "|" + structEricssonLTE.dataVolumeDownlink + "|"
								+ structEricssonLTE.userLocationInformation3GPP2 + "|"
								+ structEricssonLTE.pSFreeFormatDataServiceData + "|"
								+ structEricssonLTE.pSFFDAppendIndicatorServiceData + "|"
								+ structEricssonLTE.afChargingIdentifier + "|"
								+ structEricssonLTE.userLocationInformationServiceData3GPP2 + "|"
								+ structEricssonLTE.servingNodeType + "|" + structEricssonLTE.startTime + "|"
								+ structEricssonLTE.stopTime;

						fileConvert.addText(mStrValues);
						mStrValues = "";
					}
				}

				mRecConvert = mRecS + mRecP;

				// System.out.println("mRecN: " + mRecConvert);

				writeLogFile("         - sGW               : " + Global.rpad(Integer.toString(mRecS), 6, " "));
				writeLogFile("         - pGW               : " + Global.rpad(Integer.toString(mRecP), 6, " "));

				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted
							+ ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated
							+ ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime
							+ "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}

				Global.ExecuteSQL(mConnection, mSQL);

				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();

				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status=" + Global.StateConvertedError + ",note='" + ex.toString()
						+ " at rec:" + mRecConvert + "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL); // update file error
														// converted
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
					writeLogFile(" - " + ex.toString() + " - at record:" + mRecConvert);
					return Global.ErrFileConverted;
				} else {
					System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception ex) {
				}
			}

			return Global.OKFileConverted;
		}

		private void AnalyseSgsnSMORecord() {
			try {
				switch (structEricssonLTE.recordTypeNum) {
				case 84:
					structEricssonLTE.recordTypeStr = "sGWRecord";
					break;
				case 85:
					structEricssonLTE.recordTypeStr = "pGWRecord";
					break;
				case 18:
					structEricssonLTE.recordTypeStr = "sgsnPDPRecord";
					break;
				case 21:
					structEricssonLTE.recordTypeStr = "sgsnSMORecord";
					break;
				case 22:
					structEricssonLTE.recordTypeStr = "sgsnSMTRecord";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			if (structEricssonLTE.servedIMSI.endsWith("f")) {
				structEricssonLTE.servedIMSI = structEricssonLTE.servedIMSI.substring(0,
						structEricssonLTE.servedIMSI.length() - 1);
			}

			if (structEricssonLTE.recordOpeningTime.length() > 12) {
				structEricssonLTE.recordOpeningTime = Global.Format(
						structEricssonLTE.recordOpeningTime.substring(0, 12), "yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			if (structEricssonLTE.changeTime.length() > 12) {
				structEricssonLTE.changeTime = Global.Format(structEricssonLTE.changeTime.substring(0, 12),
						"yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			try {
				switch (structEricssonLTE.levelOfCAMELServiceNum) {
				case 0:
					structEricssonLTE.levelOfCAMELServiceStr = "basic";
					break;
				case 1:
					structEricssonLTE.levelOfCAMELServiceStr = "callDurationSupervision";
					break;
				case 2:
					structEricssonLTE.levelOfCAMELServiceStr = "onlineCharging";
					break;

				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.defaultSMSHandlingNum) {
				case 0:
					structEricssonLTE.defaultSMSHandlingStr = "continueTransaction";
					break;
				case 1:
					structEricssonLTE.defaultSMSHandlingStr = "releaseTransaction";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.chChSelectionModeNum) {
				case 1:
					structEricssonLTE.chChSelectionModeStr = "subscriptionSpecific";
					break;
				case 3:
					structEricssonLTE.chChSelectionModeStr = "homeDefault";
					break;
				case 4:
					structEricssonLTE.chChSelectionModeStr = "roamingDefault";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.rATTypeNum) {
				case 0:
					structEricssonLTE.rATTypeStr = "reserved";
					break;
				case 1:
					structEricssonLTE.rATTypeStr = "UTRAN";
					break;
				case 2:
					structEricssonLTE.rATTypeStr = "GERAN";
					break;
				case 4:
					structEricssonLTE.rATTypeStr = "GAN";
					break;
				case 5:
					structEricssonLTE.rATTypeStr = "HSPA Evolution";
					break;
				case 6:
					structEricssonLTE.rATTypeStr = "E-UTRAN";
					break;

				default:
					structEricssonLTE.rATTypeStr = "spare";
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

		}

		private void AnalyseSgsnPDPRecord() {
			try {
				switch (structEricssonLTE.recordTypeNum) {
				case 84:
					structEricssonLTE.recordTypeStr = "sGWRecord";
					break;
				case 85:
					structEricssonLTE.recordTypeStr = "pGWRecord";
					break;
				case 18:
					structEricssonLTE.recordTypeStr = "sgsnPDPRecord";
					break;
				case 21:
					structEricssonLTE.recordTypeStr = "sgsnSMORecord";
					break;
				case 22:
					structEricssonLTE.recordTypeStr = "sgsnSMTRecord";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.rATTypeNum) {
				case 0:
					structEricssonLTE.rATTypeStr = "reserved";
					break;
				case 1:
					structEricssonLTE.rATTypeStr = "UTRAN";
					break;
				case 2:
					structEricssonLTE.rATTypeStr = "GERAN";
					break;
				case 4:
					structEricssonLTE.rATTypeStr = "GAN";
					break;
				case 5:
					structEricssonLTE.rATTypeStr = "HSPA Evolution";
					break;
				case 6:
					structEricssonLTE.rATTypeStr = "E-UTRAN";
					break;

				default:
					structEricssonLTE.rATTypeStr = "spare";
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			if (structEricssonLTE.servedIMSI.endsWith("f")) {
				structEricssonLTE.servedIMSI = structEricssonLTE.servedIMSI.substring(0,
						structEricssonLTE.servedIMSI.length() - 1);
			}

			if (structEricssonLTE.recordOpeningTime.length() > 12) {
				structEricssonLTE.recordOpeningTime = Global.Format(
						structEricssonLTE.recordOpeningTime.substring(0, 12), "yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			if (structEricssonLTE.changeTime.length() > 12) {
				structEricssonLTE.changeTime = Global.Format(structEricssonLTE.changeTime.substring(0, 12),
						"yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			try {
				switch (structEricssonLTE.apnSelectionModeNum) {
				case 0:
					structEricssonLTE.apnSelectionModeStr = "mSorNetworkProvidedSubscriptionVerified";
					break;
				case 1:
					structEricssonLTE.apnSelectionModeStr = "mSProvidedSubscriptionNotVerified";
					break;
				case 2:
					structEricssonLTE.apnSelectionModeStr = "networkProvidedSubscriptionNotVerified";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.causeForRecClosingNum) {
				case 0:
					structEricssonLTE.causeForRecClosingStr = "normalRelease";
					break;
				case 4:
					structEricssonLTE.causeForRecClosingStr = "abnormalRelease";
					break;
				case 5:
					structEricssonLTE.causeForRecClosingStr = "cAMELInitCallRelease";
					break;
				case 16:
					structEricssonLTE.causeForRecClosingStr = "volumeLimit";
					break;
				case 17:
					structEricssonLTE.causeForRecClosingStr = "timeLimit";
					break;
				case 18:
					structEricssonLTE.causeForRecClosingStr = "sGSNChange";
					break;
				case 19:
					structEricssonLTE.causeForRecClosingStr = "maxChangeCond";
					break;
				case 20:
					structEricssonLTE.causeForRecClosingStr = "managementIntervention";
					break;
				case 23:
					structEricssonLTE.causeForRecClosingStr = "mSTimeZoneChange";
					break;
				case 101:
					structEricssonLTE.causeForRecClosingStr = "pLMNChange";
					break;
				case 107:
					structEricssonLTE.causeForRecClosingStr = "hZBoundaryCrossing";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.changeConditionNum) {
				case 0:
					structEricssonLTE.changeConditionStr = "qoSChange";
					break;
				case 1:
					structEricssonLTE.changeConditionStr = "tariffTime";
					break;
				case 2:
					structEricssonLTE.changeConditionStr = "recordClosure";
					break;
				case 7:
					structEricssonLTE.changeConditionStr = "rAIChange";
					break;

				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.chChSelectionModeNum) {
				case 1:
					structEricssonLTE.chChSelectionModeStr = "subscriptionSpecific";
					break;
				case 2:
					structEricssonLTE.chChSelectionModeStr = "aPNSpecific";
					break;
				case 3:
					structEricssonLTE.chChSelectionModeStr = "homeDefault";
					break;
				case 4:
					structEricssonLTE.chChSelectionModeStr = "roamingDefault";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

		}

		public void AnalyseGGSNRecord() {
			try {
				switch (structEricssonLTE.recordTypeNum) {
				case 84:
					structEricssonLTE.recordTypeStr = "sGWRecord";
					break;
				case 85:
					structEricssonLTE.recordTypeStr = "pGWRecord";
					break;
				case 18:
					structEricssonLTE.recordTypeStr = "sgsnPDPRecord";
					break;
				case 21:
					structEricssonLTE.recordTypeStr = "sgsnSMORecord";
					break;
				case 22:
					structEricssonLTE.recordTypeStr = "sgsnSMTRecord";
					break;
				case 70:
					structEricssonLTE.recordTypeStr = "egsnPDPRecord";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			if (structEricssonLTE.servedIMSI.endsWith("f")) {
				structEricssonLTE.servedIMSI = structEricssonLTE.servedIMSI.replace("f", "");
			}

			if (structEricssonLTE.recordOpeningTime.contains("2b")) {
				structEricssonLTE.recordOpeningTime = structEricssonLTE.recordOpeningTime.replace("2b", " +");
			}

			if (structEricssonLTE.startTime.contains("2b")) {
				structEricssonLTE.startTime = structEricssonLTE.startTime.replace("2b", " +");
			}

			if (structEricssonLTE.timeOfFirstUsage.contains("2b")) {
				structEricssonLTE.timeOfFirstUsage = structEricssonLTE.timeOfFirstUsage.replace("2b", " +");
			}

			if (structEricssonLTE.timeOfLastUsage.contains("2b")) {
				structEricssonLTE.timeOfLastUsage = structEricssonLTE.timeOfLastUsage.replace("2b", " +");
			}

			if (structEricssonLTE.stopTime.contains("2b")) {
				structEricssonLTE.stopTime = structEricssonLTE.stopTime.replace("2b", " +");
			}

			if (structEricssonLTE.changeTime.contains("2b")) {
				structEricssonLTE.changeTime = structEricssonLTE.changeTime.replace("2b", " +");
			}
		}

		private void AnalyseSGWRecord() {
			if (structEricssonLTE.servedIMSI.endsWith("f")) {
				structEricssonLTE.servedIMSI = structEricssonLTE.servedIMSI.substring(0,
						structEricssonLTE.servedIMSI.length() - 1);
			}

			if (structEricssonLTE.recordOpeningTime.length() > 12) {
				structEricssonLTE.recordOpeningTime = Global.Format(
						structEricssonLTE.recordOpeningTime.substring(0, 12), "yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			if (structEricssonLTE.changeTime.length() > 12) {
				structEricssonLTE.changeTime = Global.Format(structEricssonLTE.changeTime.substring(0, 12),
						"yyMMddHHmmss", "dd/MM/yyyy HH:mm:ss");
			}

			try {
				switch (structEricssonLTE.rATTypeNum) {
				case 0:
					structEricssonLTE.rATTypeStr = "reserved";
					break;
				case 1:
					structEricssonLTE.rATTypeStr = "UTRAN";
					break;
				case 2:
					structEricssonLTE.rATTypeStr = "GERAN";
					break;
				case 4:
					structEricssonLTE.rATTypeStr = "GAN";
					break;
				case 5:
					structEricssonLTE.rATTypeStr = "HSPA Evolution";
					break;
				case 6:
					structEricssonLTE.rATTypeStr = "E-UTRAN";
					break;

				default:
					structEricssonLTE.rATTypeStr = "spare";
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.recordTypeNum) {
				case 84:
					structEricssonLTE.recordTypeStr = "sGWRecord";
					break;
				case 85:
					structEricssonLTE.recordTypeStr = "pGWRecord";
					break;
				case 18:
					structEricssonLTE.recordTypeStr = "sgsnPDPRecord";
					break;
				case 21:
					structEricssonLTE.recordTypeStr = "sgsnSMORecord";
					break;
				case 22:
					structEricssonLTE.recordTypeStr = "sgsnSMTRecord";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.changeConditionNum) {
				case 2:
					structEricssonLTE.changeConditionStr = "recordClosure";
					break;

				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.sGWChangeNum) {
				case 0:
					structEricssonLTE.sGWChangeStr = "FALSE";
					break;
				case 1:
					structEricssonLTE.sGWChangeStr = "TRUE";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.servingNodeTypeNum) {
				case 0:
					structEricssonLTE.servingNodeTypeStr = "sGSN";
					break;
				case 5:
					structEricssonLTE.servingNodeTypeStr = "mME";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			try {
				switch (structEricssonLTE.causeForRecClosingNum) {
				case 0:
					structEricssonLTE.causeForRecClosingStr = "normalRelease";
					break;
				case 4:
					structEricssonLTE.causeForRecClosingStr = "abnormalRelease";
					break;
				case 16:
					structEricssonLTE.causeForRecClosingStr = "volumeLimit";
					break;
				case 17:
					structEricssonLTE.causeForRecClosingStr = "timeLimit";
					break;
				case 18:
					structEricssonLTE.causeForRecClosingStr = "servingNodeChange";
					break;
				case 22:
					structEricssonLTE.causeForRecClosingStr = "rATChange";
					break;
				case 24:
					structEricssonLTE.causeForRecClosingStr = "sGSNPLMNIDChange";
					break;
				default:
					break;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
		}

		private void sGWRecord() {
			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			String miTagFieldCode1;
			int miTagFieldLength1;
			int byteN1 = 0;

			String miTagFieldCode2;
			int miTagFieldLength2;
			int byteN2 = 0;

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0 || mTagFieldCode.compareTo("bf") == 0) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				// System.out.println("mTagFieldCode = "+mTagFieldCode);
				// System.out.println("mTagFieldLength = "+mTagFieldLength);

				// RecordType
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordType =
					// "+structEricssonLTE.recordTypeNum);
				}

				// servedIMSI
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMSI =
					// "+structEricssonLTE.servedIMSI);
				}

				// s-GWAddress
				else if (mTagFieldCode.compareTo("a4") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							try {
								// iPBinV4Address
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.sGWiPBinV4Address != null
											&& !structEricssonLTE.sGWiPBinV4Address.equals("")) {
										structEricssonLTE.sGWiPBinV4Address += ".";
									}
									structEricssonLTE.sGWiPBinV4Address += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
								}
								// System.out.println("sGWAddress =
								// "+structEricssonLTE.sGWiPBinV4Address);
							} catch (Exception e) {
								// TODO: handle exception
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// chargingID-- sai
				// (00e833ca85)16 = (3895708293)10
				else if (mTagFieldCode.compareTo("85") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("chargingID =
					// "+structEricssonLTE.chargingID);
				}

				// servingNodeAddress
				else if (mTagFieldCode.compareTo("a6") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							try {
								// iPBinV4Address
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.servingNodeiPBinV4Address != null
											&& !structEricssonLTE.servingNodeiPBinV4Address.equals("")) {
										structEricssonLTE.servingNodeiPBinV4Address += ".";
									}
									structEricssonLTE.servingNodeiPBinV4Address += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
								}
								// System.out.println("servingNodeAddress =
								// "+structEricssonLTE.servingNodeiPBinV4Address);
							} catch (Exception e) {
								// TODO: handle exception
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// accessPointNameNI
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.accessPointNameNI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("accessPointNameNI =
					// "+structEricssonLTE.accessPointNameNI);
				}

				// pdpPDNType --sai
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pdpPDNType += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					structEricssonLTE.pdpPDNType = "0x" + structEricssonLTE.pdpPDNType;
					// System.out.println("pdpPDNType =
					// "+structEricssonLTE.pdpPDNType);
				}

				// servedPDPPDNAddress
				else if (mTagFieldCode.compareTo("a9") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {
							byteN1 = 0;

							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// iPBinV4Address
								if (miTagFieldCode1.compareTo("80") == 0) {
									try {
										for (int i = 1; i <= miTagFieldLength1; i++) {
											if (structEricssonLTE.servedPDPPDNiPBinV4Address != null
													&& !structEricssonLTE.servedPDPPDNiPBinV4Address.equals("")) {
												structEricssonLTE.servedPDPPDNiPBinV4Address += ".";
											}
											structEricssonLTE.servedPDPPDNiPBinV4Address += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);

											byteN1++;
										}

										// System.out.println("servedPDPPDNAddress.iPBinV4Address
										// =
										// "+structEricssonLTE.servedPDPPDNiPBinV4Address);
									} catch (Exception e) {
										// TODO: handle exception
									}
								}

								// iPBinV6Address
								else if (miTagFieldCode1.compareTo("81") == 0) {
									try {
										for (int i = 1; i <= miTagFieldLength1; i++) {
											if (structEricssonLTE.servedPDPPDNiPBinV6Address != null
													&& !structEricssonLTE.servedPDPPDNiPBinV6Address.equals("")) {
												if (i % 2 == 1) {
													structEricssonLTE.servedPDPPDNiPBinV6Address += ":";
												}
											}
											structEricssonLTE.servedPDPPDNiPBinV6Address += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
											byteN1++;
										}
										// System.out.println("servedPDPPDNAddress.iPBinV6Address
										// =
										// "+structEricssonLTE.servedPDPPDNiPBinV6Address);
									} catch (Exception e) {
										// TODO: handle exception
									}
								} else {
									byteN1 += miTagFieldLength1;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// listOfTrafficVolumes
				else if (mTagFieldCode.compareTo("ac") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// dataVolumeGPRSUplink
								if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}

									// System.out.println("dataVolumeGPRSUplink
									// =
									// "+structEricssonLTE.dataVolumeGPRSUplink);
								}

								// dataVolumeGPRSDownlink
								else if (miTagFieldCode1.compareTo("84") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("dataVolumeGPRSDownlink
									// =
									// "+structEricssonLTE.dataVolumeGPRSDownlink);
								}

								// changeCondition
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeConditionNum += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("changeCondition="+structEricssonLTE.changeConditionNum);
								}

								// changeTime
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeTime += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("changeTime="+structEricssonLTE.changeTime);
								}

								// userLocationInformation
								else if (miTagFieldCode1.compareTo("88") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.userLocationInformation += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									structEricssonLTE.userLocationInformation = "0x"
											+ structEricssonLTE.userLocationInformation;
									// System.out.println("userLocationInformation="+structEricssonLTE.userLocationInformation);
								}

								// ePCQoSInformation
								else if (miTagFieldCode1.compareTo("a9") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// qCI
										if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSqCI += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.qCI
											// = "+structEricssonLTE.ePCQoSqCI);
										}

										// maxRequestedBandwithUL
										else if (miTagFieldCode2.compareTo("82") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.maxRequestedBandwithUL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithUL);
										}

										// maxRequestedBandwithDL
										else if (miTagFieldCode2.compareTo("83") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.maxRequestedBandwithDL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithDL);
										}

										// guaranteedBitrateUL
										else if (miTagFieldCode2.compareTo("84") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.guaranteedBitrateUL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateUL);
										}

										// guaranteedBitrateDL
										else if (miTagFieldCode2.compareTo("85") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.guaranteedBitrateDL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateDL);
										}

										// aRP
										else if (miTagFieldCode2.compareTo("86") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSaRP += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.aRP
											// = "+structEricssonLTE.ePCQoSaRP);
										} else {
											byteN2 += miTagFieldLength1;
										}
									}
								} else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// recordOpeningTime
				else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordOpeningTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordOpeningTime="+structEricssonLTE.recordOpeningTime);
				}

				// duration
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("duration="+structEricssonLTE.duration);
				}

				// causeForRecClosing
				/*
				 * normalRelease (0), abnormalRelease (4), volumeLimit (16),
				 * timeLimit (17), servingNodeChange (18), rATChange (22),
				 * sGSNPLMNIDChange (24)
				 */
				else if (mTagFieldCode.compareTo("8f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.causeForRecClosingNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("causeForRecClosing="+structEricssonLTE.causeForRecClosingNum);
				}

				// recordSequenceNumber
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordSequenceNumber="+structEricssonLTE.recordSequenceNumber);
				}

				// nodeID
				else if (mTagFieldCode.compareTo("92") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.nodeID += Global.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("nodeID="+structEricssonLTE.nodeID);
				}

				// localSequenceNumber
				else if (mTagFieldCode.compareTo("94") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("localSequenceNumber="+structEricssonLTE.localSequenceNumber);
				}

				// servedMSISDN
				else if (mTagFieldCode.compareTo("96") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedMSISDN="+structEricssonLTE.servedMSISDN);
				}

				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("97") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					structEricssonLTE.chargingCharacteristics = "0x" + structEricssonLTE.chargingCharacteristics;
					// System.out.println("chargingCharacteristics="+structEricssonLTE.chargingCharacteristics);
				}

				// servingNodePLMNIdentifier
				else if (mTagFieldCode.compareTo("9b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servingNodePLMNIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("mByteN="+mByteN);
					// System.out.println("servingNodePLMNIdentifier="+structEricssonLTE.servingNodePLMNIdentifier);
				}

				// servedIMEISV
				else if (mTagFieldCode.compareTo("9d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEISV += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMEISV="+structEricssonLTE.servedIMEISV);
				}

				// rATType
				else if (mTagFieldCode.compareTo("9e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("rATType="+structEricssonLTE.rATTypeNum);
				}

				// mSTimeZone
				else if (mTagFieldCode.compareTo("9f1f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.mSTimeZone += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("mSTimeZone="+structEricssonLTE.mSTimeZone);
				}

				// sGWChange
				/*
				 * 00: FALSE 01:TRUE
				 */
				else if (mTagFieldCode.compareTo("9f22") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.sGWChangeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("sGWChange="+structEricssonLTE.sGWChangeNum);
				}

				// servingNodeType
				/*
				 * sGSN (0), mME (5)
				 */
				else if (mTagFieldCode.compareTo("bf23") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("0a") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.servingNodeTypeNum += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (miTagFieldLength - i));
								byteN++;
							}
							// System.out.println("servingNodeType="+structEricssonLTE.servingNodeTypeNum);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// p-GWAddressUsed
				else if (mTagFieldCode.compareTo("bf24") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// pGWiPBinV4Address
						if (miTagFieldCode.compareTo("80") == 0) {
							try {
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.pGWiPBinV4Address != null
											&& !structEricssonLTE.pGWiPBinV4Address.equals("")) {
										structEricssonLTE.pGWiPBinV4Address += ".";
									}
									structEricssonLTE.pGWiPBinV4Address += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
									byteN++;
								}
								// System.out.println("p-GWAddressUsed.iPBinV4Address
								// = "+structEricssonLTE.pGWiPBinV4Address);
							} catch (Exception e) {
								// TODO: handle exception
							}
						}

						// pGWiPBinV6Address
						else if (miTagFieldCode.compareTo("81") == 0) {
							try {
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.pGWiPBinV6Address != null
											&& !structEricssonLTE.pGWiPBinV6Address.equals("")) {
										if (i % 2 == 1)
											structEricssonLTE.pGWiPBinV6Address += ":";
									}
									structEricssonLTE.pGWiPBinV6Address += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
								// System.out.println("p-GWAddressUsed.pGWiPBinV6Address=
								// "+structEricssonLTE.pGWiPBinV6Address);
							} catch (Exception e) {
								// TODO: handle exception
							}
						} else {
							byteN = miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// p-GWPLMNIdentifier -- sai
				else if (mTagFieldCode.compareTo("9f25") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pGWPLMNIdentifier += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pGWPLMNIdentifier="+structEricssonLTE.pGWPLMNIdentifier);
				}

				// pDNConnectionID
				else if (mTagFieldCode.compareTo("9f28") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pDNConnectionID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("pDNConnectionID="+structEricssonLTE.pDNConnectionID);
				}

				// iMSIunauthenticatedFlag
				else if (mTagFieldCode.compareTo("9f29") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.iMSIunauthenticatedFlag += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("iMSIunauthenticatedFlag="+structEricssonLTE.iMSIunauthenticatedFlag);
				}

				// servedPDPPDNAddressExt
				else if (mTagFieldCode.compareTo("bf2b") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// servedPDPPDNiPBinV4AddressExt
								if (miTagFieldCode1.compareTo("80") == 0) {
									try {
										for (int i = 1; i <= miTagFieldLength1; i++) {
											if (structEricssonLTE.servedPDPPDNiPBinV4AddressExt != null
													&& !structEricssonLTE.servedPDPPDNiPBinV4AddressExt.equals("")) {
												structEricssonLTE.servedPDPPDNiPBinV4AddressExt += ".";
											}
											structEricssonLTE.servedPDPPDNiPBinV4AddressExt += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
											byteN1++;
										}

										// System.out.println("servedPDPPDNAddressExt.iPBinV4Address
										// =
										// "+structEricssonLTE.servedPDPPDNiPBinV4AddressExt);
									} catch (Exception e) {
										// TODO: handle exception
									}
								}

								// servedPDPPDNiPBinV6AddressExt
								else if (miTagFieldCode1.compareTo("81") == 0) {
									try {
										for (int i = 1; i <= miTagFieldLength1; i++) {
											if (structEricssonLTE.servedPDPPDNiPBinV6AddressExt != null
													&& !structEricssonLTE.servedPDPPDNiPBinV6AddressExt.equals("")) {
												if (i % 2 == 1) {
													structEricssonLTE.servedPDPPDNiPBinV6AddressExt += ":";
												}

											}
											structEricssonLTE.servedPDPPDNiPBinV6AddressExt += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
											byteN1++;
										}
										// System.out.println("servedPDPPDNAddressExt.iPBinV6Address
										// =
										// "+structEricssonLTE.servedPDPPDNiPBinV6AddressExt);
									} catch (Exception e) {
										// TODO: handle exception
									}
								} else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// sGWiPv6Address
				else if (mTagFieldCode.compareTo("bf30") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("81") == 0) {
							try {
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.sGWiPv6Address != null
											&& !structEricssonLTE.sGWiPv6Address.equals("")) {
										if (i % 2 == 1) {
											structEricssonLTE.sGWiPv6Address += ":";
										}
									}
									structEricssonLTE.sGWiPv6Address += Global.fixSignedByte(
											mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
									byteN++;
								}
								// System.out.println("sGWiPv6Address="+structEricssonLTE.sGWiPv6Address);
							} catch (Exception e) {
								// TODO: handle exception
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// servingNodeiPv6Address
				else if (mTagFieldCode.compareTo("bf31") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								if (miTagFieldCode.compareTo("81") == 0) {
									try {
										for (int i = 1; i <= miTagFieldLength; i++) {
											if (structEricssonLTE.servingNodeiPv6Address != null
													&& !structEricssonLTE.servingNodeiPv6Address.equals("")) {
												if (i % 2 == 1) {
													structEricssonLTE.servingNodeiPv6Address += ":";
												}

											}
											structEricssonLTE.servingNodeiPv6Address += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
											byteN1++;
										}
										// System.out.println("servingNodeiPv6Address
										// =
										// "+structEricssonLTE.servingNodeiPv6Address);
									} catch (Exception e) {
										// TODO: handle exception
									}
								} else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// p-GWiPv6AddressUsed
				else if (mTagFieldCode.compareTo("bf31") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("81") == 0) {
							try {
								for (int i = 1; i <= miTagFieldLength; i++) {
									if (structEricssonLTE.pGWiPv6AddressUsed != null
											&& !structEricssonLTE.pGWiPv6AddressUsed.equals("")) {
										if (i % 2 == 1) {
											structEricssonLTE.pGWiPv6AddressUsed += ":";
										}

									}
									structEricssonLTE.pGWiPv6AddressUsed += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
								// System.out.println("pGWiPv6AddressUsed="+structEricssonLTE.pGWiPv6AddressUsed);
							} catch (Exception e) {
								// TODO: handle exception
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				} else {
					mByteN += mTagFieldLength;
				}
			}
			mFileByte += mByteN;
		}

		private void pgwRecord() {

			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			String miTagFieldCode1;
			int miTagFieldLength1;
			int byteN1 = 0;

			String miTagFieldCode2;
			int miTagFieldLength2;
			int byteN2 = 0;

			String miTagFieldCode3;
			int miTagFieldLength3;
			int byteN3 = 0;

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0 || mTagFieldCode.compareTo("bf") == 0) {

					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				// System.out.println("- miTagFieldCode: " + mTagFieldCode);
				// System.out.println("- miTagFieldLength: " + mTagFieldLength);

				// recordType
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ recordType = " +
					// structEricssonLTE.recordTypeNum);
				}
				// servedIMSI
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servedIMSI = " +
					// structEricssonLTE.servedIMSI);
				}
				// p-GWAddress
				else if (mTagFieldCode.compareTo("a4") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								if (!structEricssonLTE.pGWiPBinV4Address.equals("")) {
									structEricssonLTE.pGWiPBinV4Address += ".";
								}

								structEricssonLTE.pGWiPBinV4Address += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ pGWiPBinV4Address = " +
							// structEricssonLTE.pGWiPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// chargingID
				else if (mTagFieldCode.compareTo("85") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ chargingID = " +
					// structEricssonLTE.chargingID);
				}

				// servingNodeAddress
				else if (mTagFieldCode.compareTo("a6") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								if (!structEricssonLTE.servingNodeiPBinV4Address.equals("")) {
									structEricssonLTE.servingNodeiPBinV4Address += ".";
								}

								structEricssonLTE.servingNodeiPBinV4Address += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ servingNodeiPBinV4Address
							// = " +
							// structEricssonLTE.servingNodeiPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// accessPointNameNI
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.accessPointNameNI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ accessPointNameNI = " +
					// structEricssonLTE.accessPointNameNI);
				}

				// pdpPDNType
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pdpType += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ pdpType = " +
					// structEricssonLTE.pdpType);
				}

				// servedPDPPDNAddress
				else if (mTagFieldCode.compareTo("a9") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {

							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;
							// IPAddress Data
							if (miTagFieldCode.compareTo("80") == 0) {
								// iPBinV4Address
								for (int i = 1; i <= miTagFieldLength; i++) {

									if (!structEricssonLTE.servedPDPiPBinV4Address.equals("")) {
										structEricssonLTE.servedPDPiPBinV4Address += ".";
									}

									structEricssonLTE.servedPDPiPBinV4Address += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

									byteN++;
								}
								// System.out.println("\t+
								// servedPDPiPBinV4Address = " +
								// structEricssonLTE.servedPDPiPBinV4Address);
							} else {
								byteN += miTagFieldLength;
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// dynamicAddressFlag
				else if (mTagFieldCode.compareTo("8b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.dynamicAddressFlag += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ dynamicAddressFlag =
					// "+structEricssonLTE.dynamicAddressFlag);
				}
				// listOfTrafficVolumes
				else if (mTagFieldCode.compareTo("ac") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// dataVolumeGPRSUplink
								if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}

									// System.out.println("dataVolumeGPRSUplink
									// =
									// "+structEricssonLTE.dataVolumeGPRSUplink);
								}

								// dataVolumeGPRSDownlink
								else if (miTagFieldCode1.compareTo("84") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("dataVolumeGPRSDownlink
									// =
									// "+structEricssonLTE.dataVolumeGPRSDownlink);
								}

								// changeCondition
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeConditionNum += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("changeCondition="+structEricssonLTE.changeConditionNum);
								}

								// changeTime
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeTime += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("changeTime="+structEricssonLTE.changeTime);
								}

								// userLocationInformation
								else if (miTagFieldCode1.compareTo("88") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.userLocationInformation += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									structEricssonLTE.userLocationInformation = "0x"
											+ structEricssonLTE.userLocationInformation;
									// System.out.println("userLocationInformation="+structEricssonLTE.userLocationInformation);
								}

								// ePCQoSInformation
								else if (miTagFieldCode1.compareTo("89") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// qCI
										if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSqCI += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.qCI
											// = "+structEricssonLTE.ePCQoSqCI);
										}

										// maxRequestedBandwithUL
										else if (miTagFieldCode2.compareTo("82") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.maxRequestedBandwithUL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithUL);
										}

										// maxRequestedBandwithDL
										else if (miTagFieldCode2.compareTo("83") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.maxRequestedBandwithDL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithDL);
										}

										// guaranteedBitrateUL
										else if (miTagFieldCode2.compareTo("84") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.guaranteedBitrateUL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateUL);
										}

										// guaranteedBitrateDL
										else if (miTagFieldCode2.compareTo("85") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.guaranteedBitrateDL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateDL);
										}

										// aRP
										else if (miTagFieldCode2.compareTo("86") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSaRP += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("ePCQoSInformation.aRP
											// = "+structEricssonLTE.ePCQoSaRP);
										} else {
											byteN2 += miTagFieldLength1;
										}
									}
								} else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// recordOpeningTime
				else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordOpeningTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						if (i == 1 || i == 2) {
							structEricssonLTE.recordOpeningTime += "-";
						} else if (i == 3) {
							structEricssonLTE.recordOpeningTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.recordOpeningTime += ".";
						}
					}
					// System.out.println("\t+ recordOpeningTime =
					// "+structEricssonLTE.recordOpeningTime);
				}
				// duration
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ duration = " +
					// structEricssonLTE.duration);
				}
				// causeForRecClosing
				else if (mTagFieldCode.compareTo("8f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.causeForRecClosingNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ causeForRecClosing = " +
					// structEricssonLTE.causeForRecClosingNum);
				}
				// recordSequenceNumber
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ recordSequenceNumber =
					// "+structEricssonLTE.recordSequenceNumber);
				}
				// nodeID
				else if (mTagFieldCode.compareTo("92") == 0) {
					// TODO
					mByteN += mTagFieldLength;
				}
				// recordExtensions
				else if (mTagFieldCode.compareTo("b3") == 0) {
					// TODO
					mByteN += mTagFieldLength;
				}
				// localSequenceNumber
				else if (mTagFieldCode.compareTo("94") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ localSequenceNumber = " +
					// structEricssonLTE.localSequenceNumber);
				}
				// apnSelectionMode
				else if (mTagFieldCode.compareTo("95") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.apnSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ apnSelectionMode = " +
					// structEricssonLTE.apnSelectionModeNum);
				}
				// servedMSISDN
				else if (mTagFieldCode.compareTo("96") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servedMSISDN = " +
					// structEricssonLTE.servedMSISDN);
				}
				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("97") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ chargingCharacteristics = " +
					// structEricssonLTE.chargingCharacteristics);
				}
				// chChSelectionMode
				else if (mTagFieldCode.compareTo("98") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chChSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ chChSelectionMode = " +
					// structEricssonLTE.chChSelectionModeNum);
				}
				// servingNodePLMNIdentifier
				else if (mTagFieldCode.compareTo("9b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servingNodePLMNIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servingNodePLMNIdentifier = " +
					// structEricssonLTE.servingNodePLMNIdentifier);
				}
				// pSFurnishChargingInformation
				else if (mTagFieldCode.compareTo("9c") == 0) {
					// TODO
					mByteN += mTagFieldLength;
				}
				// servedIMEISV
				else if (mTagFieldCode.compareTo("9d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEISV += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servedIMEISV = " +
					// structEricssonLTE.servedIMEISV);
				}
				// rATType
				else if (mTagFieldCode.compareTo("9e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ rATType =
					// "+structEricssonLTE.rATTypeNum);
				}
				// mSTimeZone
				else if (mTagFieldCode.compareTo("9f1f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.mSTimeZone += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ mSTimeZone = " +
					// structEricssonLTE.mSTimeZone);
				}
				// userLocationInformation
				else if (mTagFieldCode.compareTo("9f20") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.userLocationInformation += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ userLocationInformation = " +
					// structEricssonLTE.userLocationInformation);
				}
				// listOfServiceData
				else if (mTagFieldCode.compareTo("bf22") == 0) {
					// TODO
					byteN = 0;
					int dup = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						dup++;
						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1++;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// ratingGroup
								if (miTagFieldCode1.compareTo("81") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.ratingGroup += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}

									// System.out.println("\t+ ratingGroup = " +
									// structEricssonLTE.ratingGroup);
								}

								// resultCode
								else if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.resultCode += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+ resultCode = " +
									// structEricssonLTE.resultCode);
								}

								// localSequenceNumber
								else if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 0; i < miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.localSequenceNumber += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+
									// localSequenceNumber = " +
									// structEricssonLTE.localSequenceNumber);
								}

								// timeOfFirstUsage
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeOfFirstUsage += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("\t+ timeOfFirstUsage
									// = " +
									// structEricssonLTE.timeOfFirstUsage);
								}

								// timeOfLastUsage
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeOfLastUsage += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("\t+ timeOfLastUsage =
									// " + structEricssonLTE.timeOfLastUsage);
								}

								// timeUsage
								else if (miTagFieldCode1.compareTo("87") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeUsage += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+ timeUsage = " +
									// structEricssonLTE.timeUsage);
								}

								// serviceConditionChange
								else if (miTagFieldCode1.compareTo("88") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.serviceConditionChange += Global.HexToBINARY(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("\t+
									// serviceConditionChange = " +
									// structEricssonLTE.serviceConditionChange);
								}

								// qoSInformationNeg
								else if (miTagFieldCode1.compareTo("89") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1 && i <= 8)
											structEricssonLTE.qoSInformationNeg += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
										byteN1++;
									}
								}

								// sgsn-Address
								else if (miTagFieldCode1.compareTo("aa") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// IPAddress Data
										if (miTagFieldCode2.compareTo("80") == 0) {
											// iPBinV4Address
											for (int i = 1; i <= miTagFieldLength2; i++) {
												if (dup == 1) {
													if (!structEricssonLTE.sgsniPBinV4AddressServiceData.equals("")) {
														structEricssonLTE.sgsniPBinV4AddressServiceData += ".";
													}

													structEricssonLTE.sgsniPBinV4AddressServiceData += Global
															.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1
																	+ byteN2]);
												}

												byteN2++;
											}
											// System.out.println("\t+
											// sgsniPBinV4AddressServiceData = "
											// +
											// structEricssonLTE.sgsniPBinV4AddressServiceData);
										} else {
											byteN2 += miTagFieldLength1;
										}
									}
								}

								// sGSNPLMNIdentifier
								else if (miTagFieldCode1.compareTo("8b") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1) {
											structEricssonLTE.sGSNPLMNIdentifier += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
										}

										byteN1++;
									}
								}

								// datavolumeFBCUplink
								else if (miTagFieldCode1.compareTo("8c") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.datavolumeFBCUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// datavolumeFBCDownlink
								else if (miTagFieldCode1.compareTo("8d") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.datavolumeFBCDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// timeOfReport
								else if (miTagFieldCode1.compareTo("8e") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeOfReport += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// rATType
								else if (miTagFieldCode1.compareTo("8f") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.rATTypeNum += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// failureHandlingContinue
								else if (miTagFieldCode1.compareTo("90") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.failureHandlingContinue += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// serviceIdentifier
								else if (miTagFieldCode1.compareTo("91") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.serviceIdentifier += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// pSFurnishChargingInformation
								else if (miTagFieldCode1.compareTo("b2") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// pSFreeFormatData
										if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength1; i++) {
												structEricssonLTE.pSFreeFormatDataServiceData += Global
														.HexToBCD(Global.fixSignedByte(
																mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
												byteN2++;
											}
										}

										// pSFFDAppendIndicator
										else if (miTagFieldCode2.compareTo("82") == 0) {
											for (int i = 1; i <= miTagFieldLength1; i++) {
												structEricssonLTE.pSFFDAppendIndicatorServiceData += Global
														.HexToBCD(Global.fixSignedByte(
																mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
												byteN2++;
											}
										}

										else {
											byteN2 += miTagFieldLength1;
										}

									}
								}

								// aFRecordInformation
								else if (miTagFieldCode1.compareTo("b3") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// AFRecordInformation
										if (miTagFieldCode2.compareTo("30") == 0) {
											byteN3 = 0;
											while (byteN3 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// aFChargingIdentifier
												if (miTagFieldCode3.compareTo("81") == 0) {
													for (int i = 1; i <= miTagFieldLength1; i++) {
														structEricssonLTE.afChargingIdentifier += Global
																.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																		+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
														byteN3++;
													}
												} else {
													byteN3 += miTagFieldLength2;
												}
											}
										} else {
											byteN2 += miTagFieldLength1;
										}
									}
								}

								// eventBasedChargingInformation
								else if (miTagFieldCode1.compareTo("b5") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// eventTimeStamps
										if (miTagFieldCode2.compareTo("a2") == 0) {
											byteN3 = 0;
											while (byteN3 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// aFChargingIdentifier
												if (miTagFieldCode3.compareTo("04") == 0) {
													for (int i = 1; i <= miTagFieldLength3; i++) {
														structEricssonLTE.eventTimeStamp += Global
																.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																		+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
														byteN3++;
													}
												} else {
													byteN3 += miTagFieldLength2;
												}
											}
										}

										// numberOfEvents
										else if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.numberOfEvents += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1
																+ byteN2 + byteN3])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN3++;
											}
										}

										else {
											byteN2 += miTagFieldLength1;
										}
									}
								}

								// 3GPP2UserLocationInformation
								else if (miTagFieldCode1.compareTo("98") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.userLocationInformation3GPP2 += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN3++;
									}
								}

								else {
									byteN1 += miTagFieldLength;
								}
							}

						} else {
							byteN += mTagFieldLength;
						}
					}
					mByteN += mTagFieldLength;
				}
				// servingNodeType
				else if (mTagFieldCode.compareTo("bf23") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("0a") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								structEricssonLTE.servingNodeTypeNum += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ servingNodeTypeNum = " +
							// structEricssonLTE.servingNodeTypeNum);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// startTime
				else if (mTagFieldCode.compareTo("9f26") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.startTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;

						if (i == 1 || i == 2) {
							structEricssonLTE.startTime += "-";
						} else if (i == 3) {
							structEricssonLTE.startTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.startTime += ".";
						}
					}
					// System.out.println("\t+ startTime = " +
					// structEricssonLTE.startTime);
				}
				// stopTime
				else if (mTagFieldCode.compareTo("9f27") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.stopTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;

						if (i == 1 || i == 2) {
							structEricssonLTE.stopTime += "-";
						} else if (i == 3) {
							structEricssonLTE.stopTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.stopTime += ".";
						}
					}
					// System.out.println("\t+ stopTime = " +
					// structEricssonLTE.stopTime);
				}
				// pDNConnectionID
				else if (mTagFieldCode.compareTo("9f29") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pDNConnectionID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ pDNConnectionID = " +
					// structEricssonLTE.pDNConnectionID);
				} else {
					mByteN += mTagFieldLength;
				}
			}

			mFileByte += mByteN;
		}

		private void sgsnPDPRecord() {
			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			String miTagFieldCode1;
			int miTagFieldLength1;
			int byteN1 = 0;

			String miTagFieldCode2;
			int miTagFieldLength2;
			int byteN2 = 0;

			String miTagFieldCode3;
			int miTagFieldLength3;
			int byteN3 = 0;

			String miTagFieldCode4;
			int miTagFieldLength4;
			int byteN4 = 0;

			// System.out.println("mByteN = "+mByteN);
			// System.out.println("mRecLength = "+mRecLength);

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				// System.out.println("mTagFieldCode = "+mTagFieldCode);
				// System.out.println("mTagFieldLength = "+mTagFieldLength);

				// recordType
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordType =
					// "+structEricssonLTE.recordTypeNum);
				}

				// networkInitiation
				else if (mTagFieldCode.compareTo("81") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.networkInitiation += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("networkInitiation =
					// "+structEricssonLTE.networkInitiation);
				}

				// servedIMSI
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMSI =
					// "+structEricssonLTE.servedIMSI);
				}

				// servedIMEI
				else if (mTagFieldCode.compareTo("84") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMEI =
					// "+structEricssonLTE.servedIMEI);
				}

				// sgsnAddress
				else if (mTagFieldCode.compareTo("a5") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.sgsniPBinV4Address += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;
							}
							// System.out.println("sgsniPBinV4Address =
							// "+structEricssonLTE.sgsniPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// msNetworkCapability
				else if (mTagFieldCode.compareTo("86") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.msNetworkCapability += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("msNetworkCapability =
					// "+structEricssonLTE.msNetworkCapability);
				}

				// routingArea
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.routingArea += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("routingArea =
					// "+structEricssonLTE.routingArea);
				}

				// locationAreaCode
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.locationAreaCode += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("locationAreaCode =
					// "+structEricssonLTE.locationAreaCode);
				}

				// cellIdentifier
				else if (mTagFieldCode.compareTo("89") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.cellIdentifier += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("cellIdentifier =
					// "+structEricssonLTE.cellIdentifier);
				}

				// chargingID
				else if (mTagFieldCode.compareTo("8a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("chargingID =
					// "+structEricssonLTE.chargingID);
				}

				// ggsnAddressUsed
				else if (mTagFieldCode.compareTo("ab") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.ggsniPBinV4Address += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								byteN++;
							}
							// System.out.println("ggsniPBinV4Address =
							// "+structEricssonLTE.ggsniPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// accessPointNameNI
				else if (mTagFieldCode.compareTo("8c") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.accessPointNameNI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("accessPointNameNI =
					// "+structEricssonLTE.accessPointNameNI);
				}

				// pdpType
				else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pdpType += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pdpType =
					// "+structEricssonLTE.pdpType);
				}

				// servedPDPAddress
				else if (mTagFieldCode.compareTo("ae") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {
							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;

							// IPAddress Data
							if (miTagFieldCode.compareTo("80") == 0) {

								// iPBinV4Address
								for (int i = 1; i <= miTagFieldLength; i++) {
									structEricssonLTE.servedPDPiPBinV4Address += Global
											.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
									byteN++;
								}
								// System.out.println("servedPDPiPBinV4Address =
								// "+structEricssonLTE.servedPDPiPBinV4Address);
							} else {
								byteN += miTagFieldLength;
							}
						}
					}

					mByteN += mTagFieldLength;
				}

				// listOfTrafficVolumes
				else if (mTagFieldCode.compareTo("af") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// ChangeOfCharCondition
						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {

								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// qosRequested
								if (miTagFieldCode1.compareTo("81") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.qosRequested += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("qosRequested =
									// "+structEricssonLTE.qosRequested);
								}

								// qosNegotiated
								else if (miTagFieldCode1.compareTo("82") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.qosNegotiated += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("qosNegotiated =
									// "+structEricssonLTE.qosNegotiated);
								}

								// dataVolumeGPRSUplink
								else if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("dataVolumeGPRSUplink
									// =
									// "+structEricssonLTE.dataVolumeGPRSUplink);
								}

								// dataVolumeGPRSDownlink
								else if (miTagFieldCode1.compareTo("84") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("dataVolumeGPRSDownlink
									// =
									// "+structEricssonLTE.dataVolumeGPRSDownlink);
								}

								// changeCondition
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeConditionNum += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("changeCondition =
									// "+structEricssonLTE.changeConditionNum);
								}

								// changeTime
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeTime += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("changeTime =
									// "+structEricssonLTE.changeTime);
								} else {
									byteN1 += miTagFieldLength1;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// recordOpeningTime
				else if (mTagFieldCode.compareTo("90") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordOpeningTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordOpeningTime =
					// "+structEricssonLTE.recordOpeningTime);
				}

				// duration
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("duration =
					// "+structEricssonLTE.duration);
				}

				// sgsnChange
				else if (mTagFieldCode.compareTo("92") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.sgsnChange += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("sgsnChange =
					// "+structEricssonLTE.sgsnChange);
				}

				// causeForRecClosing
				else if (mTagFieldCode.compareTo("93") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.causeForRecClosingNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("causeForRecClosing =
					// "+structEricssonLTE.causeForRecClosingNum);
				}

				// diagnostics
				else if (mTagFieldCode.compareTo("b4") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("80") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0408Cause += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("diagnostics.gsm0408Cause =
							// "+structEricssonLTE.gsm0408Cause);
						} else if (miTagFieldCode.compareTo("81") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0902MapErrorValue += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("diagnostics.gsm0902MapErrorValue
							// = "+structEricssonLTE.gsm0902MapErrorValue);
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// recordSequenceNumber
				else if (mTagFieldCode.compareTo("95") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordSequenceNumber =
					// "+structEricssonLTE.recordSequenceNumber);
				}

				// nodeID
				else if (mTagFieldCode.compareTo("96") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.nodeID += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("nodeID = "+structEricssonLTE.nodeID);
				}

				// recordExtensions
				else if (mTagFieldCode.compareTo("b7") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// ManagementExtension
						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// identifier
								if (miTagFieldCode1.compareTo("06") == 0) {
									for (int i = 1; i <= mTagFieldLength; i++) {
										structEricssonLTE.identifier += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										mByteN++;
									}
									// System.out.println("ManagementExtension.identifier
									// = "+structEricssonLTE.identifier);
								}

								// significance
								else if (miTagFieldCode1.compareTo("81") == 0) {
									for (int i = 1; i <= mTagFieldLength; i++) {
										structEricssonLTE.significance += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										mByteN++;
									}
									// System.out.println("ManagementExtension.significance
									// = "+structEricssonLTE.significance);
								}

								// information
								else if (miTagFieldCode1.compareTo("a2") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// extendedDiagnostics
										if (miTagFieldCode2.compareTo("a0") == 0) {
											byteN3 = 0;
											while (byteN2 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// ts48018BssgpCause
												if (miTagFieldCode3.compareTo("80") == 0) {
													for (int i = 1; i <= miTagFieldLength3; i++) {
														structEricssonLTE.ts48018BssgpCause += Global
																.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																		+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
														byteN3++;
													}
													// System.out.println("ManagementExtension.information.ts48018BssgpCause
													// =
													// "+structEricssonLTE.ts48018BssgpCause);
												}

												// ts25413RanapCause
												else if (miTagFieldCode3.compareTo("81") == 0) {
													for (int i = 1; i <= miTagFieldLength3; i++) {
														structEricssonLTE.ts25413RanapCause += Global
																.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																		+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
														byteN3++;
													}
													// System.out.println("ManagementExtension.information.ts25413RanapCause
													// =
													// "+structEricssonLTE.ts25413RanapCause);
												} else {
													byteN3 += miTagFieldLength2;
												}
											}
										}

										// extendedDiagnosticsBssgp
										else if (miTagFieldCode2.compareTo("a1") == 0) {
											byteN3 = 0;
											while (byteN2 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// ExtendedDiagnosticsBssgpRanap(SEQUENCE)
												if (miTagFieldCode3.compareTo("30") == 0) {
													byteN4 = 0;
													while (byteN4 < miTagFieldLength3) {
														miTagFieldCode4 = Global.HexToBCD(
																Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN
																		+ byteN1 + byteN2 + byteN3 + byteN4]));
														byteN4++;

														miTagFieldLength4 = Global.fixSignedByte(mBuffer[mFileByte
																+ mByteN + byteN + byteN1 + byteN2 + byteN3 + byteN4]);
														byteN4++;

														// bssgpExttsBssgpRanapCauseBssgp
														if (miTagFieldCode4.compareTo("80") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.bssgpExttsBssgpRanapCauseBssgp += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsBssgp.bssgpExttsBssgpRanapCauseBssgp
															// =
															// "+structEricssonLTE.bssgpExttsBssgpRanapCauseBssgp);
														}

														// bssgpExttsBssgpRanapMessageType
														else if (miTagFieldCode4.compareTo("81") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.bssgpExttsBssgpRanapMessageType += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsBssgp.bssgpExttsBssgpRanapMessageType
															// =
															// "+structEricssonLTE.bssgpExttsBssgpRanapMessageType);
														}

														// bssgpExttsBssgpRanapMessageSource
														else if (miTagFieldCode4.compareTo("82") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.bssgpExttsBssgpRanapMessageSource += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsBssgp.bssgpExttsBssgpRanapMessageSource
															// =
															// "+structEricssonLTE.bssgpExttsBssgpRanapMessageSource);
														}

														// bssgpExttsBssgpRanapCauseTimeStamp
														else if (miTagFieldCode4.compareTo("83") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.bssgpExttsBssgpRanapCauseTimeStamp += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsBssgp.bssgpExttsBssgpRanapCauseTimeStamp
															// =
															// "+structEricssonLTE.bssgpExttsBssgpRanapCauseTimeStamp);
														}

														else {
															byteN4 += miTagFieldLength3;
														}
													}
												} else {
													byteN3 += miTagFieldLength2;
												}
											}
										}

										// extendedDiagnosticsRanap
										else if (miTagFieldCode2.compareTo("a1") == 0) {
											byteN3 = 0;
											while (byteN2 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// ExtendedDiagnosticsBssgpRanap(SEQUENCE)
												if (miTagFieldCode3.compareTo("30") == 0) {
													byteN4 = 0;
													while (byteN4 < miTagFieldLength3) {
														miTagFieldCode4 = Global.HexToBCD(
																Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN
																		+ byteN1 + byteN2 + byteN3 + byteN4]));
														byteN4++;

														miTagFieldLength4 = Global.fixSignedByte(mBuffer[mFileByte
																+ mByteN + byteN + byteN1 + byteN2 + byteN3 + byteN4]);
														byteN4++;

														// ranapExttsBssgpRanapCause
														if (miTagFieldCode4.compareTo("80") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.ranapExttsBssgpRanapCause += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsRanap.ranapExttsBssgpRanapCause
															// =
															// "+structEricssonLTE.ranapExttsBssgpRanapCause);
														}

														// ranapExttsBssgpRanapMessageType
														else if (miTagFieldCode4.compareTo("81") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.ranapExttsBssgpRanapMessageType += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsRanap.ranapExttsBssgpRanapMessageType
															// =
															// "+structEricssonLTE.ranapExttsBssgpRanapMessageType);
														}

														// ranapExttsBssgpRanapMessageSource
														else if (miTagFieldCode4.compareTo("82") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.ranapExttsBssgpRanapMessageSource += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsRanap.ranapExttsBssgpRanapMessageSource
															// =
															// "+structEricssonLTE.ranapExttsBssgpRanapMessageSource);
														}

														// ranapExttsBssgpRanapCauseTimeStamp
														else if (miTagFieldCode4.compareTo("83") == 0) {
															for (int i = 1; i <= miTagFieldLength4; i++) {
																structEricssonLTE.ranapExttsBssgpRanapCauseTimeStamp += Global
																		.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																				+ mByteN + byteN + byteN1 + byteN2
																				+ byteN3 + byteN4]));
																byteN3++;
															}
															// System.out.println("extendedDiagnosticsRanap.ranapExttsBssgpRanapCauseTimeStamp
															// =
															// "+structEricssonLTE.ranapExttsBssgpRanapCauseTimeStamp);
														}

														else {
															byteN4 += miTagFieldLength3;
														}
													}
												} else {
													byteN3 += miTagFieldLength2;
												}
											}
										}

										else {
											byteN2 += miTagFieldLength1;
										}
									}
								}

								else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// localSequenceNumber
				else if (mTagFieldCode.compareTo("98") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("localSequenceNumber =
					// "+structEricssonLTE.localSequenceNumber);
				}

				// apnSelectionMode
				else if (mTagFieldCode.compareTo("99") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.apnSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("apnSelectionMode =
					// "+structEricssonLTE.apnSelectionModeNum);
				}

				// accessPointNameOI
				else if (mTagFieldCode.compareTo("9a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.accessPointNameOI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("accessPointNameOI =
					// "+structEricssonLTE.accessPointNameOI);
				}

				// servedMSISDN
				else if (mTagFieldCode.compareTo("9b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedMSISDN =
					// "+structEricssonLTE.servedMSISDN);
				}

				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("9c") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("chargingCharacteristics =
					// "+structEricssonLTE.chargingCharacteristics);
				}

				// rATType
				else if (mTagFieldCode.compareTo("9d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("rATType =
					// "+structEricssonLTE.rATTypeNum);
				}

				// cAMELInformationPDP
				else if (mTagFieldCode.compareTo("be") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// sCFAddress
						if (miTagFieldCode.compareTo("81") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.sCFAddress += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELInformationPDP.sCFAddress
							// = "+structEricssonLTE.sCFAddress);
						}

						// serviceKey
						else if (miTagFieldCode.compareTo("82") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.serviceKey += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								mByteN++;
							}
							// System.out.println("cAMELInformationPDP.serviceKey
							// = "+structEricssonLTE.serviceKey);
						}

						// defaultTransactionHandling
						/*
						 * continueTransaction (0), releaseTransaction (1)
						 */
						else if (miTagFieldCode.compareTo("83") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.defaultTransactionHandling += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("defaultTransactionHandling =
							// "+structEricssonLTE.defaultTransactionHandling);
						}

						// cAMELAccessPointNameNI
						else if (miTagFieldCode.compareTo("84") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.cAMELAccessPointNameNI += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELAccessPointNameNI =
							// "+structEricssonLTE.cAMELAccessPointNameNI);
						}

						// cAMELAccessPointNameOI
						else if (miTagFieldCode.compareTo("85") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.cAMELAccessPointNameOI += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELAccessPointNameOI =
							// "+structEricssonLTE.cAMELAccessPointNameOI);
						}

						// numberOfDPEncountered
						else if (miTagFieldCode.compareTo("86") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.numberOfDPEncountered += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								mByteN++;
							}
							// System.out.println("numberOfDPEncountered =
							// "+structEricssonLTE.numberOfDPEncountered);
						}

						// levelOfCAMELService
						/*
						 * basic (0), callDurationSupervision (1),
						 * onlineCharging (2)
						 */
						else if (miTagFieldCode.compareTo("87") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.levelOfCAMELServiceNum += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								mByteN++;
							}
							// System.out.println("levelOfCAMELService =
							// "+structEricssonLTE.levelOfCAMELServiceNum);
						}

						// freeFormatData
						else if (miTagFieldCode.compareTo("88") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.freeFormatData += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("freeFormatData =
							// "+structEricssonLTE.freeFormatData);
						}

						// FDAppendIndicator
						else if (miTagFieldCode.compareTo("89") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.FDAppendIndicator += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("FDAppendIndicator =
							// "+structEricssonLTE.FDAppendIndicator);
						}

						else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// chChSelectionMode
				else if (mTagFieldCode.compareTo("9f20") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chChSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("chChSelectionMode =
					// "+structEricssonLTE.chChSelectionModeNum);
				}

				// dynamicAddressFlag
				else if (mTagFieldCode.compareTo("9f21") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.dynamicAddressFlag += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("dynamicAddressFlag =
					// "+structEricssonLTE.dynamicAddressFlag);
				}

				// pLMNIdentifier
				else if (mTagFieldCode.compareTo("9f65") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pLMNIdentifier += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pLMNIdentifier =
					// "+structEricssonLTE.pLMNIdentifier);
				}

				// mSTimeZone
				else if (mTagFieldCode.compareTo("9f66") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.mSTimeZone += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("mSTimeZone =
					// "+structEricssonLTE.mSTimeZone);
				}

				else {
					mByteN += mTagFieldLength;
				}
			}

			mFileByte += mByteN;
		}

		private void sgsnSMORecord() {
			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			// System.out.println("mByteN = "+mByteN);
			// System.out.println("mRecLength = "+mRecLength);

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				// System.out.println("mTagFieldCode = "+mTagFieldCode);
				// System.out.println("mTagFieldLength = "+mTagFieldLength);

				// recordType 21
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordType =
					// "+structEricssonLTE.recordTypeNum);
				}

				// servedIMSI
				else if (mTagFieldCode.compareTo("81") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMSI =
					// "+structEricssonLTE.servedIMSI);
				}

				// servedIMEI
				else if (mTagFieldCode.compareTo("82") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMEI =
					// "+structEricssonLTE.servedIMEI);
				}

				// servedMSISDN
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedMSISDN =
					// "+structEricssonLTE.servedMSISDN);
				}

				// msNetworkCapability
				else if (mTagFieldCode.compareTo("84") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.msNetworkCapability += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("msNetworkCapability =
					// "+structEricssonLTE.msNetworkCapability);
				}

				// serviceCentre
				else if (mTagFieldCode.compareTo("85") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.serviceCentre += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("serviceCentre =
					// "+structEricssonLTE.serviceCentre);
				}

				// recordingEntity
				else if (mTagFieldCode.compareTo("86") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordingEntity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordingEntity =
					// "+structEricssonLTE.recordingEntity);
				}

				// locationArea
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordingEntity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordingEntity =
					// "+structEricssonLTE.recordingEntity);
				}

				// routingArea
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.routingArea += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("routingArea =
					// "+structEricssonLTE.routingArea);
				}

				// cellIdentifier
				else if (mTagFieldCode.compareTo("89") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.cellIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("cellIdentifier =
					// "+structEricssonLTE.cellIdentifier);
				}

				// messageReference
				else if (mTagFieldCode.compareTo("8a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.messageReference += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("messageReference =
					// "+structEricssonLTE.messageReference);
				}

				// eventTimeStamp
				else if (mTagFieldCode.compareTo("8b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.eventTimeStamp += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("eventTimeStamp =
					// "+structEricssonLTE.eventTimeStamp);
				}

				// smsResult
				else if (mTagFieldCode.compareTo("ac") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// gsm0408Cause
						if (miTagFieldCode.compareTo("80") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0408Cause += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("smsResult.gsm0408Cause =
							// "+structEricssonLTE.gsm0408Cause);
						}

						// gsm0902MapErrorValue
						else if (miTagFieldCode.compareTo("81") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0902MapErrorValue += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("smsResult.gsm0902MapErrorValue
							// = "+structEricssonLTE.gsm0902MapErrorValue);
						}

						else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// nodeID
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.nodeID += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("nodeID = "+structEricssonLTE.nodeID);
				}

				// localSequenceNumber
				else if (mTagFieldCode.compareTo("8f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("localSequenceNumber =
					// "+structEricssonLTE.localSequenceNumber);
				}

				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("90") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("chargingCharacteristics =
					// "+structEricssonLTE.chargingCharacteristics);
				}

				// rATType
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("rATType =
					// "+structEricssonLTE.rATTypeNum);
				}

				// destinationNumber -SMSTPDestinationNumber
				else if (mTagFieldCode.compareTo("92") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.destinationNumber += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("destinationNumber =
					// "+structEricssonLTE.destinationNumber);
				}

				// cAMELInformationSMS
				else if (mTagFieldCode.compareTo("b3") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// sCFAddress
						if (miTagFieldCode.compareTo("81") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.sCFAddress += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.sCFAddress
							// = "+structEricssonLTE.sCFAddress);
						}

						// serviceKey
						else if (miTagFieldCode.compareTo("82") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.serviceKey += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.serviceKey
							// = "+structEricssonLTE.serviceKey);
						}

						// defaultSMSHandling
						/*
						 * continueTransaction (0), releaseTransaction (1)
						 */
						else if (miTagFieldCode.compareTo("83") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.defaultSMSHandlingNum += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.defaultSMSHandling
							// = "+structEricssonLTE.defaultSMSHandlingNum);
						}

						// cAMELCallingPartyNumber
						else if (miTagFieldCode.compareTo("84") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.cAMELCallingPartyNumber += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.cAMELCallingPartyNumber
							// = "+structEricssonLTE.cAMELCallingPartyNumber);
						}

						// cAMELDestinationSubscriberNumber
						else if (miTagFieldCode.compareTo("85") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.cAMELDestinationSubscriberNumber += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.cAMELDestinationSubscriberNumber
							// =
							// "+structEricssonLTE.cAMELDestinationSubscriberNumber);
						}

						// cAMELSMSCAddress
						else if (miTagFieldCode.compareTo("86") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.cAMELSMSCAddress += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("cAMELInformationSMS.cAMELSMSCAddress
							// = "+structEricssonLTE.cAMELSMSCAddress);
						}

						// freeFormatData
						else if (miTagFieldCode.compareTo("87") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.freeFormatData += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("freeFormatData =
							// "+structEricssonLTE.freeFormatData);
						}

						// smsReferenceNumber
						else if (miTagFieldCode.compareTo("88") == 0) {
							for (int i = 1; i <= mTagFieldLength; i++) {
								structEricssonLTE.smsReferenceNumber += Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
								mByteN++;
							}
							// System.out.println("smsReferenceNumber =
							// "+structEricssonLTE.smsReferenceNumber);
						}

						else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// chChSelectionMode
				else if (mTagFieldCode.compareTo("94") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chChSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("chChSelectionMode =
					// "+structEricssonLTE.chChSelectionModeNum);
				}

				// pLMNIdentifier
				else if (mTagFieldCode.compareTo("9f65") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pLMNIdentifier += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pLMNIdentifier =
					// "+structEricssonLTE.pLMNIdentifier);
				}

				else {
					mByteN += mTagFieldLength;
				}
			}

			mFileByte += mByteN;
		}

		private void sgsnSMTRecord() {
			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			// System.out.println("mByteN = "+mByteN);
			// System.out.println("mRecLength = "+mRecLength);

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0) {
					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				// System.out.println("mTagFieldCode = "+mTagFieldCode);
				// System.out.println("mTagFieldLength = "+mTagFieldLength);

				// recordType 22
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("recordType =
					// "+structEricssonLTE.recordTypeNum);
				}

				// servedIMSI
				else if (mTagFieldCode.compareTo("81") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMSI =
					// "+structEricssonLTE.servedIMSI);
				}

				// servedIMEI
				else if (mTagFieldCode.compareTo("82") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedIMEI =
					// "+structEricssonLTE.servedIMEI);
				}

				// servedMSISDN
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("servedMSISDN =
					// "+structEricssonLTE.servedMSISDN);
				}

				// msNetworkCapability
				else if (mTagFieldCode.compareTo("84") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.msNetworkCapability += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("msNetworkCapability =
					// "+structEricssonLTE.msNetworkCapability);
				}

				// serviceCentre
				else if (mTagFieldCode.compareTo("85") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.serviceCentre += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("serviceCentre =
					// "+structEricssonLTE.serviceCentre);
				}

				// recordingEntity
				else if (mTagFieldCode.compareTo("86") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordingEntity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordingEntity =
					// "+structEricssonLTE.recordingEntity);
				}

				// locationArea
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordingEntity += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("recordingEntity =
					// "+structEricssonLTE.recordingEntity);
				}

				// routingArea
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.routingArea += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("routingArea =
					// "+structEricssonLTE.routingArea);
				}

				// cellIdentifier
				else if (mTagFieldCode.compareTo("89") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.cellIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("cellIdentifier =
					// "+structEricssonLTE.cellIdentifier);
				}

				// eventTimeStamp
				else if (mTagFieldCode.compareTo("8a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.eventTimeStamp += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("eventTimeStamp =
					// "+structEricssonLTE.eventTimeStamp);
				}

				// smsResult
				else if (mTagFieldCode.compareTo("ab") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// gsm0408Cause
						if (miTagFieldCode.compareTo("80") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0408Cause += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("smsResult.gsm0408Cause =
							// "+structEricssonLTE.gsm0408Cause);
						}

						// gsm0902MapErrorValue
						else if (miTagFieldCode.compareTo("81") == 0) {
							for (int i = 1; i <= miTagFieldLength; i++) {
								structEricssonLTE.gsm0902MapErrorValue += Global.fixSignedByte(
										mBuffer[mFileByte + mByteN + byteN]) * Math.pow(256, (mTagFieldLength - i));
								byteN++;
							}
							// System.out.println("smsResult.gsm0902MapErrorValue
							// = "+structEricssonLTE.gsm0902MapErrorValue);
						}

						else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// nodeID
				else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.nodeID += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("nodeID = "+structEricssonLTE.nodeID);
				}

				// localSequenceNumber
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("localSequenceNumber =
					// "+structEricssonLTE.localSequenceNumber);
				}

				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("9f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("chargingCharacteristics =
					// "+structEricssonLTE.chargingCharacteristics);
				}

				// rATType
				else if (mTagFieldCode.compareTo("90") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("rATType =
					// "+structEricssonLTE.rATTypeNum);
				}

				// chChSelectionMode
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chChSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("chChSelectionMode =
					// "+structEricssonLTE.chChSelectionModeNum);
				}

				// numberOfSM
				else if (mTagFieldCode.compareTo("9f65") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.numberOfSM += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("numberOfSM =
					// "+structEricssonLTE.numberOfSM);
				}

				// locationAreaLastSM
				else if (mTagFieldCode.compareTo("9f66") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.locationAreaLastSM += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("locationAreaLastSM =
					// "+structEricssonLTE.locationAreaLastSM);
				}

				// routingAreaLastSM
				else if (mTagFieldCode.compareTo("9f67") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.routingAreaLastSM += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("routingAreaLastSM =
					// "+structEricssonLTE.routingAreaLastSM);
				}

				// cellIdentifierLastSM
				else if (mTagFieldCode.compareTo("9f68") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.cellIdentifierLastSM += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("cellIdentifierLastSM =
					// "+structEricssonLTE.cellIdentifierLastSM);
				}

				// pLMNIdentifierLastSM
				else if (mTagFieldCode.compareTo("9f69") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pLMNIdentifierLastSM += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pLMNIdentifierLastSM =
					// "+structEricssonLTE.pLMNIdentifierLastSM);
				}

				// pLMNIdentifier
				else if (mTagFieldCode.compareTo("9f6a") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pLMNIdentifier += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("pLMNIdentifier =
					// "+structEricssonLTE.pLMNIdentifier);
				}

				else {
					mByteN += mTagFieldLength;
				}
			}

			mFileByte += mByteN;
		}

		private void egsnPDPRecord() {

			int mRet = 0;

			String miTagFieldCode;
			int miTagFieldLength;
			int byteN = 0;

			String miTagFieldCode1;
			int miTagFieldLength1;
			int byteN1 = 0;

			String miTagFieldCode2;
			int miTagFieldLength2;
			int byteN2 = 0;

			String miTagFieldCode3;
			int miTagFieldLength3;
			int byteN3 = 0;

			while (mByteN < mRecLength) {

				mTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
				mByteN++;

				if (mTagFieldCode.compareTo("9f") == 0 || mTagFieldCode.compareTo("bf") == 0) {

					mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					if (mLength > 128) {
						mByteN++;
						mRet = mLength - 128;
						for (int i = 1; i <= mRet; i++) {
							mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					} else {
						mTagFieldCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
				}

				if (mTagFieldCode.compareTo("bf22") == 0) {
					// System.out.println("");
				}

				mTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;

				if (mTagFieldLength > 128) {
					mRet = mTagFieldLength - 128;
					mTagFieldLength = 0;
					for (int i = 1; i <= mRet; i++) {
						mTagFieldLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mRet - i));
						mByteN++;
					}
				}

				// System.out.println("- mTagFieldCode: " + mTagFieldCode);
				// System.out.println("- mTagFieldLength: " + mTagFieldLength);

				// recordType
				if (mTagFieldCode.compareTo("80") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ recordType = " +
					// structEricssonLTE.recordTypeNum);
				}
				// servedIMSI
				else if (mTagFieldCode.compareTo("83") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMSI += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servedIMSI = " +
					// structEricssonLTE.servedIMSI);
				}
				// p-GWAddress
				else if (mTagFieldCode.compareTo("a4") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								if (!structEricssonLTE.pGWiPBinV4Address.equals("")) {
									structEricssonLTE.pGWiPBinV4Address += ".";
								}

								structEricssonLTE.pGWiPBinV4Address += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ pGWiPBinV4Address = " +
							// structEricssonLTE.pGWiPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// chargingID
				else if (mTagFieldCode.compareTo("85") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ chargingID = " +
					// structEricssonLTE.chargingID);
				}

				// servingNodeAddress
				else if (mTagFieldCode.compareTo("a6") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("80") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								if (!structEricssonLTE.servingNodeiPBinV4Address.equals("")) {
									structEricssonLTE.servingNodeiPBinV4Address += ".";
								}

								structEricssonLTE.servingNodeiPBinV4Address += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ servingNodeiPBinV4Address
							// = " +
							// structEricssonLTE.servingNodeiPBinV4Address);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}

				// accessPointNameNI
				else if (mTagFieldCode.compareTo("87") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.accessPointNameNI += Global
								.fixSignedCharByte(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ accessPointNameNI = " +
					// structEricssonLTE.accessPointNameNI);
				}

				// pdpPDNType
				else if (mTagFieldCode.compareTo("88") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pdpType += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ pdpType = " +
					// structEricssonLTE.pdpType);
				}

				// servedPDPPDNAddress
				else if (mTagFieldCode.compareTo("a9") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("a0") == 0) {

							miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
							byteN++;

							miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
							byteN++;
							// IPAddress Data
							if (miTagFieldCode.compareTo("80") == 0) {
								// iPBinV4Address
								for (int i = 1; i <= miTagFieldLength; i++) {

									if (!structEricssonLTE.servedPDPiPBinV4Address.equals("")) {
										structEricssonLTE.servedPDPiPBinV4Address += ".";
									}

									structEricssonLTE.servedPDPiPBinV4Address += Global
											.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

									byteN++;
								}
								// System.out.println("\t+
								// servedPDPiPBinV4Address = " +
								// structEricssonLTE.servedPDPiPBinV4Address);
							} else {
								byteN += miTagFieldLength;
							}
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// dynamicAddressFlag
				else if (mTagFieldCode.compareTo("8b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.dynamicAddressFlag += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ dynamicAddressFlag =
					// "+structEricssonLTE.dynamicAddressFlag);
				}
				// listOfTrafficVolumes
				else if (mTagFieldCode.compareTo("ac") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						if (miTagFieldCode.compareTo("30") == 0) {
							byteN1 = 0;
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// dataVolumeGPRSUplink
								if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}

									// System.out.println("\t+
									// dataVolumeGPRSUplink =
									// "+structEricssonLTE.dataVolumeGPRSUplink);
								}

								// dataVolumeGPRSDownlink
								else if (miTagFieldCode1.compareTo("84") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.dataVolumeGPRSDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("\t+
									// dataVolumeGPRSDownlink =
									// "+structEricssonLTE.dataVolumeGPRSDownlink);
								}

								// changeCondition
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeConditionNum += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
									// System.out.println("\t+
									// changeCondition="+structEricssonLTE.changeConditionNum);
								}

								// changeTime
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.changeTime += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
										if (i == 1 || i == 2) {
											structEricssonLTE.changeTime += "-";
										} else if (i == 3) {
											structEricssonLTE.changeTime += " ";
										} else if (i == 4 || i == 5) {
											structEricssonLTE.changeTime += ".";
										}
									}
									// System.out.println("\t+
									// changeTime="+structEricssonLTE.changeTime);
								}

								// userLocationInformation
								else if (miTagFieldCode1.compareTo("88") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.userLocationInformationTrafficVolumes += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("\t+
									// userLocationInformationTrafficVolumes="+structEricssonLTE.userLocationInformationTrafficVolumes);
								}

								// ePCQoSInformation
								else if (miTagFieldCode1.compareTo("89") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// qCI
										if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSqCI += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.qCI =
											// "+structEricssonLTE.ePCQoSqCI);
										}

										// maxRequestedBandwithUL
										else if (miTagFieldCode2.compareTo("82") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.maxRequestedBandwithUL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithUL);
										}

										// maxRequestedBandwithDL
										else if (miTagFieldCode2.compareTo("83") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSmaxRequestedBandwithDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.maxRequestedBandwithDL
											// =
											// "+structEricssonLTE.ePCQoSmaxRequestedBandwithDL);
										}

										// guaranteedBitrateUL
										else if (miTagFieldCode2.compareTo("84") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateUL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.guaranteedBitrateUL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateUL);
										}

										// guaranteedBitrateDL
										else if (miTagFieldCode2.compareTo("85") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSguaranteedBitrateDL += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.guaranteedBitrateDL
											// =
											// "+structEricssonLTE.ePCQoSguaranteedBitrateDL);
										}

										// aRP
										else if (miTagFieldCode2.compareTo("86") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.ePCQoSaRP += Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
											// System.out.println("\t+
											// ePCQoSInformation.aRP =
											// "+structEricssonLTE.ePCQoSaRP);
										} else {
											byteN2 += miTagFieldLength1;
										}
									}
								} else {
									byteN1 += miTagFieldLength;
								}
							}
						} else {
							byteN += mTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// recordOpeningTime
				else if (mTagFieldCode.compareTo("8d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordOpeningTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						if (i == 1 || i == 2) {
							structEricssonLTE.recordOpeningTime += "-";
						} else if (i == 3) {
							structEricssonLTE.recordOpeningTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.recordOpeningTime += ".";
						}
					}
					// System.out.println("\t+ recordOpeningTime =
					// "+structEricssonLTE.recordOpeningTime);
				}
				// duration
				else if (mTagFieldCode.compareTo("8e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.duration += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ duration = " +
					// structEricssonLTE.duration);
				}
				// causeForRecClosing
				else if (mTagFieldCode.compareTo("8f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.causeForRecClosingNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ causeForRecClosing = " +
					// structEricssonLTE.causeForRecClosingNum);
				}
				// recordSequenceNumber
				else if (mTagFieldCode.compareTo("91") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.recordSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ recordSequenceNumber =
					// "+structEricssonLTE.recordSequenceNumber);
				}
				// nodeID
				else if (mTagFieldCode.compareTo("92") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.nodeID += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ nodeID =
					// "+structEricssonLTE.nodeID);
				}
				// recordExtensions
				else if (mTagFieldCode.compareTo("b3") == 0) {
					// TODO
					mByteN += mTagFieldLength;
				}
				// localSequenceNumber
				else if (mTagFieldCode.compareTo("94") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.localSequenceNumber += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ localSequenceNumber = " +
					// structEricssonLTE.localSequenceNumber);
				}
				// apnSelectionMode
				else if (mTagFieldCode.compareTo("95") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.apnSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ apnSelectionMode = " +
					// structEricssonLTE.apnSelectionModeNum);
				}
				// servedMSISDN
				else if (mTagFieldCode.compareTo("96") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedMSISDN += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servedMSISDN = " +
					// structEricssonLTE.servedMSISDN);
				}
				// chargingCharacteristics
				else if (mTagFieldCode.compareTo("97") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chargingCharacteristics += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ chargingCharacteristics = " +
					// structEricssonLTE.chargingCharacteristics);
				}
				// chChSelectionMode
				else if (mTagFieldCode.compareTo("98") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.chChSelectionModeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ chChSelectionMode = " +
					// structEricssonLTE.chChSelectionModeNum);
				}
				// servingNodePLMNIdentifier
				else if (mTagFieldCode.compareTo("9b") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servingNodePLMNIdentifier += Global
								.HexToTBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ servingNodePLMNIdentifier = " +
					// structEricssonLTE.servingNodePLMNIdentifier);
				}
				// pSFurnishChargingInformation
				else if (mTagFieldCode.compareTo("9c") == 0) {
					// TODO
					mByteN += mTagFieldLength;
				}
				// servedIMEISV
				else if (mTagFieldCode.compareTo("9d") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.servedIMEISV += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}

					// System.out.println("\t+ servedIMEISV = " +
					// structEricssonLTE.servedIMEISV);
				}
				// rATType
				else if (mTagFieldCode.compareTo("9e") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.rATTypeNum += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ rATType =
					// "+structEricssonLTE.rATTypeNum);
				}
				// mSTimeZone
				else if (mTagFieldCode.compareTo("9f1f") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.mSTimeZone += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ mSTimeZone = " +
					// structEricssonLTE.mSTimeZone);
				}
				// userLocationInformation
				else if (mTagFieldCode.compareTo("9f20") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.userLocationInformation += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
					}
					// System.out.println("\t+ mByteN = " + mByteN);
					// System.out.println("\t+ userLocationInformation = " +
					// structEricssonLTE.userLocationInformation);
				}
				// listOfServiceData
				else if (mTagFieldCode.compareTo("bf22") == 0) {
					// TODO
					byteN = 0;
					byteN1 = 0;
					int dup = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						dup++;
						if (miTagFieldCode.compareTo("30") == 0) {
							while (byteN1 < miTagFieldLength) {
								miTagFieldCode1 = Global
										.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
								byteN1++;

								miTagFieldLength1 = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
								byteN1++;

								// ratingGroup
								if (miTagFieldCode1.compareTo("81") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.ratingGroup += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}

									// System.out.println("\t+ ratingGroup = " +
									// structEricssonLTE.ratingGroup);
								}

								// resultCode
								else if (miTagFieldCode1.compareTo("83") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.resultCode += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+ resultCode = " +
									// structEricssonLTE.resultCode);
								}

								// localSequenceNumber
								else if (miTagFieldCode1.compareTo("84") == 0) {
									for (int i = 0; i < miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.localSequenceNumberServiceData += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+
									// localSequenceNumberServiceData = " +
									// structEricssonLTE.localSequenceNumberServiceData);
								}

								// timeOfFirstUsage
								else if (miTagFieldCode1.compareTo("85") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1) {
											structEricssonLTE.timeOfFirstUsage += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));

											if (i == 1 || i == 2) {
												structEricssonLTE.timeOfFirstUsage += "-";
											} else if (i == 3) {
												structEricssonLTE.timeOfFirstUsage += " ";
											} else if (i == 4 || i == 5) {
												structEricssonLTE.timeOfFirstUsage += ".";
											}
										}
										byteN1++;
									}
									// System.out.println("\t+ timeOfFirstUsage
									// = " +
									// structEricssonLTE.timeOfFirstUsage);
								}

								// timeOfLastUsage
								else if (miTagFieldCode1.compareTo("86") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1) {
											structEricssonLTE.timeOfLastUsage += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
											if (i == 1 || i == 2) {
												structEricssonLTE.timeOfLastUsage += "-";
											} else if (i == 3) {
												structEricssonLTE.timeOfLastUsage += " ";
											} else if (i == 4 || i == 5) {
												structEricssonLTE.timeOfLastUsage += ".";
											}
										}
										byteN1++;
									}
									// System.out.println("\t+ timeOfLastUsage =
									// " + structEricssonLTE.timeOfLastUsage);
								}

								// timeUsage
								else if (miTagFieldCode1.compareTo("87") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeUsage += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (mTagFieldLength - i));
										byteN1++;
									}
									// System.out.println("\t+ timeUsage = " +
									// structEricssonLTE.timeUsage);
								}

								// serviceConditionChange
								else if (miTagFieldCode1.compareTo("88") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.serviceConditionChange += Global.HexToBINARY(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
									// System.out.println("\t+
									// serviceConditionChange = " +
									// structEricssonLTE.serviceConditionChange);
								}

								// qoSInformationNeg
								else if (miTagFieldCode1.compareTo("89") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1 && i <= 8)
											structEricssonLTE.qoSInformationNeg += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
										byteN1++;
									}
									// System.out.println("\t+ qoSInformationNeg
									// = " +
									// structEricssonLTE.qoSInformationNeg);
								}

								// sgsn-Address
								else if (miTagFieldCode1.compareTo("aa") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// IPAddress Data
										if (miTagFieldCode2.compareTo("80") == 0) {
											// iPBinV4Address
											for (int i = 1; i <= miTagFieldLength2; i++) {
												if (dup == 1) {
													if (!structEricssonLTE.sgsniPBinV4AddressServiceData.equals("")) {
														structEricssonLTE.sgsniPBinV4AddressServiceData += ".";
													}

													structEricssonLTE.sgsniPBinV4AddressServiceData += Global
															.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1
																	+ byteN2]);
												}

												byteN2++;
											}
											// System.out.println("\t+
											// sgsniPBinV4AddressServiceData = "
											// +
											// structEricssonLTE.sgsniPBinV4AddressServiceData);
										} else {
											byteN2 += miTagFieldLength1;
										}
									}

									byteN1 += miTagFieldLength1;
								}

								// sGSNPLMNIdentifier
								else if (miTagFieldCode1.compareTo("8b") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1) {
											structEricssonLTE.sGSNPLMNIdentifier += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]);
										}

										byteN1++;
									}
								}

								// datavolumeFBCUplink
								else if (miTagFieldCode1.compareTo("8c") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.datavolumeFBCUplink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// datavolumeFBCDownlink
								else if (miTagFieldCode1.compareTo("8d") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.datavolumeFBCDownlink += Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
												* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// timeOfReport
								else if (miTagFieldCode1.compareTo("8e") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.timeOfReport += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// rATType
								else if (miTagFieldCode1.compareTo("8f") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.rATTypeNum += Global
													.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1])
													* Math.pow(256, (miTagFieldLength1 - i));
										byteN1++;
									}
								}

								// failureHandlingContinue
								else if (miTagFieldCode1.compareTo("90") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.failureHandlingContinue += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// serviceIdentifier
								else if (miTagFieldCode1.compareTo("91") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										if (dup == 1)
											structEricssonLTE.serviceIdentifier += Global.HexToBCD(
													Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// pSFurnishChargingInformation
								else if (miTagFieldCode1.compareTo("b2") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// pSFreeFormatData
										if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength1; i++) {
												structEricssonLTE.pSFreeFormatDataServiceData += Global
														.HexToBCD(Global.fixSignedByte(
																mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
												byteN2++;
											}
										}

										// pSFFDAppendIndicator
										else if (miTagFieldCode2.compareTo("82") == 0) {
											for (int i = 1; i <= miTagFieldLength1; i++) {
												structEricssonLTE.pSFFDAppendIndicatorServiceData += Global
														.HexToBCD(Global.fixSignedByte(
																mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
												byteN2++;
											}
										}

										else {
											byteN2 += miTagFieldLength1;
										}

									}
								}

								// aFRecordInformation
								else if (miTagFieldCode1.compareTo("b3") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.aFRecordInformation += Global.HexToBCD(
												Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1]));
										byteN1++;
									}
								}

								// userLocationInformation
								else if (miTagFieldCode1.compareTo("94") == 0) {
									for (int i = 1; i <= miTagFieldLength1; i++) {
										structEricssonLTE.userLocationInformationServiceData += Global
												.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN
														+ byteN1 + byteN2 + byteN3]));
										byteN3++;
									}
								}

								// eventBasedChargingInformation
								else if (miTagFieldCode1.compareTo("b5") == 0) {
									byteN2 = 0;
									while (byteN2 < miTagFieldLength1) {
										miTagFieldCode2 = Global.HexToBCD(Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]));
										byteN2++;

										miTagFieldLength2 = Global
												.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2]);
										byteN2++;

										// eventTimeStamps
										if (miTagFieldCode2.compareTo("a2") == 0) {
											byteN3 = 0;
											while (byteN3 < miTagFieldLength2) {
												miTagFieldCode3 = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
														+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
												byteN3++;

												miTagFieldLength3 = Global.fixSignedByte(
														mBuffer[mFileByte + mByteN + byteN + byteN1 + byteN2 + byteN3]);
												byteN3++;

												// eventTimeStamp
												if (miTagFieldCode3.compareTo("04") == 0) {
													for (int i = 1; i <= miTagFieldLength3; i++) {
														structEricssonLTE.eventTimeStamp += Global
																.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
																		+ mByteN + byteN + byteN1 + byteN2 + byteN3]));
														byteN3++;
													}
												} else {
													byteN3 += miTagFieldLength3;
												}
											}

											byteN2 += miTagFieldLength2;
										}

										// numberOfEvents
										else if (miTagFieldCode2.compareTo("81") == 0) {
											for (int i = 1; i <= miTagFieldLength2; i++) {
												structEricssonLTE.numberOfEvents += Global
														.fixSignedByte(mBuffer[mFileByte + mByteN + byteN + byteN1
																+ byteN2 + byteN3])
														* Math.pow(256, (miTagFieldLength2 - i));
												byteN2++;
											}
										}

										else {
											byteN2 += miTagFieldLength1;
										}
									}
								}

								else {
									byteN1 += miTagFieldLength;
								}
							}

						} else {
							byteN += mTagFieldLength;
						}
					}
					mByteN += mTagFieldLength;
				}
				// servingNodeType
				else if (mTagFieldCode.compareTo("bf23") == 0) {
					byteN = 0;
					while (byteN < mTagFieldLength) {
						miTagFieldCode = Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]));
						byteN++;

						miTagFieldLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);
						byteN++;

						// IPAddress Data
						if (miTagFieldCode.compareTo("0a") == 0) {
							// iPBinV4Address
							for (int i = 1; i <= miTagFieldLength; i++) {
								// structEricssonLTE.pGWiPBinV4Address +=
								// Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte
								// + mByteN + byteN]));

								structEricssonLTE.servingNodeTypeNum += Global
										.fixSignedByte(mBuffer[mFileByte + mByteN + byteN]);

								byteN++;
							}
							// System.out.println("\t+ servingNodeTypeNum = " +
							// structEricssonLTE.servingNodeTypeNum);
						} else {
							byteN += miTagFieldLength;
						}
					}

					mByteN += mTagFieldLength;
				}
				// startTime
				else if (mTagFieldCode.compareTo("9f26") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.startTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;

						if (i == 1 || i == 2) {
							structEricssonLTE.startTime += "-";
						} else if (i == 3) {
							structEricssonLTE.startTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.startTime += ".";
						}
					}
					// System.out.println("\t+ startTime = " +
					// structEricssonLTE.startTime);
				}
				// stopTime
				else if (mTagFieldCode.compareTo("9f27") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.stopTime += Global
								.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;

						if (i == 1 || i == 2) {
							structEricssonLTE.stopTime += "-";
						} else if (i == 3) {
							structEricssonLTE.stopTime += " ";
						} else if (i == 4 || i == 5) {
							structEricssonLTE.stopTime += ".";
						}
					}
					// System.out.println("\t+ stopTime = " +
					// structEricssonLTE.stopTime);
				}
				// pDNConnectionID
				else if (mTagFieldCode.compareTo("9f29") == 0) {
					for (int i = 1; i <= mTagFieldLength; i++) {
						structEricssonLTE.pDNConnectionID += Global.fixSignedByte(mBuffer[mFileByte + mByteN])
								* Math.pow(256, (mTagFieldLength - i));
						mByteN++;
					}
					// System.out.println("\t+ pDNConnectionID = " +
					// structEricssonLTE.pDNConnectionID);
				} else {
					mByteN += mTagFieldLength;
				}
			}

			mFileByte += mByteN;
		}

	}

	class ConvertNokiaLTE { 

		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;
		protected String mStrValues = "";
		protected String mSQL = null; 

		protected StringBuilder str = new StringBuilder();
		protected StringBuilder textRecord = new StringBuilder(); // ghi lai toan bo noi
														// dung ban ghi duoi
														// dang text
		protected StructNokiaLTE structNokiaLTE = new StructNokiaLTE();

		private int convertNokiaLTE(String pSourceConvert, String pFileName, int pFileID, String pDestinationConvert,
				String pCurrent_dir, int pLocalSplitFilebyDay, int pCenterID) throws Exception {
			
			/**
			 * Text file io tool
			 */
			TextFile fileConvert = new TextFile();

			/**
			 * Read source file
			 */
			RandomAccessFile fileCDR = null;

			/**
			 * IO tool
			 */
			IOUtils IOUtil = new IOUtils();

			/**
			 * source file's path
			 */
			String mSource = null;

			/**
			 * source file's length
			 */
			int mFileLength = 0;
			
			/**
			 * Number of record CDR
			 */
			int mRecS = 0;
			int mRecP = 0;
			
			/**
			 * Time
			 */
			String firstCallingTime = "";
	        String lastCallingTime = "";
			
			try {
				//Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
				
				// get path
				mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
				
				// open file to read
				fileCDR = new RandomAccessFile(mSource, "r");
				
				// split by day
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource); // maker folder
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}
				
				// delete exists file
				IOUtil.deleteFile(mSource);
				
				fileConvert.openFile(mSource, 5242880);

				mConnection.setAutoCommit(false);
				
				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;
				
				Global.ExecuteSQL(mConnection, mSQL);
				
				mFileLength = (int) fileCDR.length();
				
				// khai bao buffer
				mBuffer = new byte[mFileLength];
				
				mLength = fileCDR.read(mBuffer);
				
				mFileByte = 0;
				
				// Total length of the CDR file in octets (header + CDR payload)
				//int cdrDataLength = 0;
				mFileByte = 0;
				boolean isFirstCall = true; // kiem tra xem neu la lan dau tien thi add header
				while (mFileByte < mFileLength) { 
					mRecLength = 0;
					mByteN = 0;
					mTagModuleCode = "";
					mTagModuleLength = 0;
					
					// mTagModuleCode
					mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN ++;
					
					if (mTagModuleCode.compareTo("bf") == 0 || mTagModuleCode.compareTo("9f") == 0) {
						mLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						if (mLength > 128) {
							mByteN++;
							mRet = mLength - 128;
							for (int i = 1; i <= mRet; i++) {
								mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
								mByteN++;
							}
						} else {
							mTagModuleCode += Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
							mByteN++;
						}
					}
					
					//mByteN = 2
					mRecLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
					mByteN ++;
					
					// mret = 2
					if(mRecLength > 128){
						mRet = mRecLength - 128; 
						mRecLength = 0;
						for(int i=1; i<= mRet; i++){
							mRecLength += Global.fixSignedByte(mBuffer[mFileByte + mByteN]) * Math.pow(256, (mRet - i));
							mByteN++;
						}
						mRecLength += mByteN;
					}else{
						mRecLength = mFileLength;
					}
					
					if (mTagModuleCode.compareTo("bf4e") == 0) {
						if (mRecS == 0){
							fileConvert.addText(Global.sgwNokiaLTEHeader);
						}
						
						mRecS ++;
						sGWRecord(mRecS);
						fileConvert.addText(textRecord.toString());
					} else if (mTagModuleCode.compareTo("bf4f") == 0){
						/*if (mRecP == 0){
							fileConvert.addText(Global.pgwNokiaLTEHeader);
						} */
						 
						mRecP++;
						convertPGWRecord(mRecP);
						fileConvert.addText(textRecord.toString()); 
					} else {
						mByteN = (mByteN - 1) + mRecLength;
						mFileByte += mByteN;
					} 
					
					// write to text file
					if (cdrfileParam.ChargeCDRFile) {
						fileConvert.addText(mStrValues);
						mStrValues = "";
					} else {}
				}
				
				mRecConvert = mRecS + mRecP;
				
				writeLogFile("         - sGW               : " + Global.rpad(Integer.toString(mRecS), 6, " "));
				writeLogFile("         - pGW               : " + Global.rpad(Integer.toString(mRecP), 6, " "));
				
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));
				
				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}
				
				Global.ExecuteSQL(mConnection, mSQL);
				
				mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();

				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status="
						+ Global.StateConvertedError + ",note='"
						+ ex.toString() + " at rec:" + mRecConvert
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL); // update file error converted
				mConnection.commit();

				if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
				/*	writeLogFile(" - " + ex.toString() + " - at record:"
							+ mRecConvert);*/
					return Global.ErrFileConverted;
				} else {
				//	System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					// mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception ex) {}
			}

			return Global.OKFileConverted;
		}

		/**
		 * 
		 * @author TrungNQ
		 * @author AnhVH edit 13/09/2017
		 */
		private void convertPGWRecord(int stt) {
			int tagLength = 0;
			long chargingId = 0;
			int duration = 0;
			long recordSequence = 0;
			long pdnConnection = 0;
			int localSequence = 0;
			int apnSelectionMode = 0;
			int ratingId = 0;
			int checkListData = 0;
			int currentPostion = mFileByte + mByteN;
			int resultCode = 0;
			int eventBasedNumberOfEvents =0;
			int timeQuotaType =0;
			int baseTimeInterval =0;
			currentPostion += 4;
			int count = 0;

			// SeveredImsi
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			for (int i = 0; i < tagLength; i++) {
				str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
			}
			String severedIMSI = str.toString();
			if (severedIMSI.endsWith("f")) {
				severedIMSI = severedIMSI.substring(0, severedIMSI.length()-1);
			}
			structNokiaLTE.setSeveredIMSI(severedIMSI);
			str.setLength(0);

			// P-gw Address
			currentPostion += 4;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
			}
			String tmp = str.toString();
			structNokiaLTE.setPgwAddress(tmp.substring(0, tmp.length()-1));
			str.setLength(0);

			// charingId
			currentPostion += 2;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				chargingId = (long) (chargingId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
			}
			structNokiaLTE.setCharingId(chargingId);
			
			// Serving Node Address
			currentPostion += 2;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			if (tagLength == 6) {
				currentPostion += 2;
				tagLength = toUnsignedByte(mBuffer[currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				while (tagLength-- > 0) {
					str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
				} 
				tmp = str.toString();
				structNokiaLTE.setServingNodeAddress(tmp.substring(0, tmp.length()-1));
				str.setLength(0);
			} else {
				// ip v6
				currentPostion += tagLength;
			}

			// Access Point Name Network Identifier

			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.ACCESS_POINT_NAME_NETWORKID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				while (tagLength-- > 0) {
					str.append(toChar(mBuffer[++currentPostion]));
				}
				structNokiaLTE.setAccessPointNameID(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}

			// PDP/PDN Type
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.PDP_PDN_TYPE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				//String s="";
				while (tagLength-- > 0) {
					String s =Global.HexToBCD(toUnsignedByte(mBuffer[++currentPostion]));
					str.append(s);
				}

				structNokiaLTE.setPdpPDNType(str.toString());
				
				str.setLength(0);
			} else {
				currentPostion--;
			}

			// Severed PDP/PDN Address
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVED_PDP_PDN_ADDRESS) {
				currentPostion += 5;
				tagLength = toUnsignedByte(mBuffer[currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				if (tagLength == 4) {
					while (tagLength-- > 0) {
						str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
					}
					tmp = str.toString();
					structNokiaLTE.setSeveredPDPDNPAdress(tmp.substring(0, tmp.length()-1));
				} else {
					currentPostion += tagLength;
				}
				str.setLength(0);
			} else {
				currentPostion--;
			}

			// Dynamic Flag
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.DYNAMIC_ADDRESS_FLAG) {
				currentPostion += 2;
				structNokiaLTE.setDynamicAddressFlag(mBuffer[currentPostion] == 1 ? "true" : "false");
			} else {
				currentPostion--;
			}

			//Record Opening Time
			currentPostion += 2;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			for (int i = 0; i < tagLength; i++) {
				if (i == 6) {
					str.append(toChar(mBuffer[++currentPostion]));
				} else {
					if(i==0){
						int a = toUnsignedByte(mBuffer[++currentPostion]);
						String b = Integer.toHexString(a);
						//toUnsignedByte(mBuffer[++currentPostion]);
						//str.append("20");
						str.append(a < 10 ? "0" + b : b);
					}
					else{
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					String b = Integer.toHexString(a);
					str.append(a < 10 ? "0" + b : b);
					}
				}
			}
			structNokiaLTE.setRecordOpeningTime(str.toString());
			str.setLength(0);

			// Duration
			currentPostion += 2;
			tagLength = mBuffer[currentPostion];
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				duration = (int) (duration << 8) + toUnsignedByte(mBuffer[++currentPostion]);
			}
			structNokiaLTE.setDuration(duration);

			// Cause for record Closing
			currentPostion += 3;
			structNokiaLTE.setCauseForRecordClosing(StructNokiaLTE.causeForRecordClosingMap.get((int) mBuffer[currentPostion]));
			
			// Diagnostics
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.DIAGNOSTICS) {
				tagLength = mBuffer[++currentPostion];
				
				//currentPostion += 4;
				
					if (Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])).equals("80")){
						currentPostion+=2;
						int Diagnostics = 0;
						Diagnostics = (int) mBuffer[currentPostion];
						structNokiaLTE.setDiagnostics(StructNokiaLTE.diagnoticsMap.get(Diagnostics));
					}
					else{
						for (int i =1; i< tagLength; i++)
							toUnsignedByte(mBuffer[++currentPostion]);
					}
					
				
				
			} else {
				currentPostion--;
			}
			
			// Record Sequence Number
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.RECORD_SEQUENCE_NUMBER) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				recordSequence = 0;
				while(tagLength-- > 0) {
					recordSequence = (long) (recordSequence << 8) + toUnsignedByte(mBuffer[++currentPostion]);
					
				}
				structNokiaLTE.setRecordSequenceNumber(recordSequence);
			}
			 else {
					currentPostion--;
				}
			
			// Node id
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.NODEID) {
				tagLength = mBuffer[++currentPostion];  
				while (tagLength-- > 0) {
					str.append(toChar(mBuffer[++currentPostion]));						
				}
				structNokiaLTE.setNodeId(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			//recordExtensions
			if (toUnsignedByte(mBuffer[++currentPostion]) ==0xB3) {
				tagLength = mBuffer[++currentPostion];  
				while (tagLength-- > 0) {
					str.append(toUnsignedByte(mBuffer[++currentPostion]));						
				}
				
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Local sequence number
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.LOCAL_SEQUENCE_NUMBER) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					localSequence = (int) (localSequence << 8) + toUnsignedByte(mBuffer[++currentPostion]);
				}
				//System.out.println("localSequence = "+ localSequence);
				structNokiaLTE.setLocalSequenceNumber(localSequence);
			} else {
				currentPostion--;
			}
			
			// Apn selection mode
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.APN_SELECTION_MODE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					apnSelectionMode = (int) (apnSelectionMode << 8) + toUnsignedByte(mBuffer[++currentPostion]);
				}
				structNokiaLTE.setApnSelectionMode(apnSelectionMode + "");
				
			} else {
				currentPostion--;
			}
			
			// Severed MSISDN
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVED_MSISDN) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]); 
				while (tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				
				try {
					if(str.toString().substring(0,2).equals("84"))
						structNokiaLTE.setServedMSISDN(str.toString());
					else
						structNokiaLTE.setServedMSISDN(str.toString().substring(2));
				} catch (Exception e) {
					structNokiaLTE.setServedMSISDN(str.toString());
				} 
				
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Charging Characteristics
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.CHARGING_CHARACTERISTICS) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					if (a <10)
					str.append("0"+(Integer.toHexString(a)));
					else str.append((Integer.toHexString(a)));
				}
				structNokiaLTE.setChargingCharacteristics(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Charging Characteristics Selection Mode
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.CHARGING_CHARACTERISTICS_SELECTION_MODE) {
				currentPostion += 2;
				structNokiaLTE.setChargingCharacteristicsSelectionMode(StructNokiaLTE.chargingCharacteristicsSMMap.get((int) mBuffer[currentPostion]));
			} else {
				currentPostion--;
			}
			//externalChargingID

			if ( toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.externalChargingID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				structNokiaLTE.setexternalChargingID(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			// Serving Node PLMN Identifier
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVING_NODE_PLMN_ID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				structNokiaLTE.setServingNodePLMNId(str.toString());
				str.setLength(0);
				
			} else {
				currentPostion--;
			}
			
			//servedIMEISV
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.served_IMEISV) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				structNokiaLTE.setServedIMEISV(str.toString());
				str.setLength(0);
				
			} else {
				currentPostion--;
			}
			
			// Rat type
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.RATTYPE) {
				currentPostion += 2;
				int a = toUnsignedByte(mBuffer[currentPostion]);
				structNokiaLTE.setRATType(a);
				structNokiaLTE.setrATType(StructNokiaLTE.rATTypeMap.get(a));
			} else {
				currentPostion--;
			}
			
			// Ms time zone
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.MS_TIME_ZONE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					if (a <10)
					str.append("0"+(Integer.toHexString(a)));
					else str.append((Integer.toHexString(a)));
				}
				structNokiaLTE.setMsTimeZone(str.toString());
				str.setLength(0);
			} else {
				currentPostion -= 2;
			}
			
			// user location information
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.USER_LOCATION_INFORMATION) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				/*1while(tagLength-- > 0) {
					str.append(Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])));
				}*/
				String s1 = Global.HexToText(toUnsignedByte(mBuffer[++currentPostion]));
				//System.out.println (s1.substring(0,1));
				/*String s2 = "";
				if (s1.substring(1).equals("8")) s2 += " TAI ";
				else{
					if (s1.substring(1).equals("4")) s2 += (" RAI ");
					else {
						if (s1.substring(1).equals("2")) s2 += (" SAI ");
						else{
							if (s1.substring(1).equals("1")) s2 += (" CGI ");
						}
					}
				}*/
				if (s1.substring(0,1).equals("1")) {
					//str.append("ECGI ");
					for (int i = 1; i <= 2; i++)
					{
						Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]));
					}
					
					Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]));
					for (int i=5; i<= tagLength; i++){
						if (Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])).equals("54"))
						{
							//str.append(s2);
							currentPostion--;
							for (int j = 1; j <= 2; j++)
							{
								str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
							}
							str.append(" "+Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]))+ " ");
							int a = 0;
							a += toUnsignedByte(mBuffer[++currentPostion])*65536;
							a += toUnsignedByte(mBuffer[++currentPostion])*256;
							a += toUnsignedByte(mBuffer[++currentPostion]);
							str.append(String.valueOf(a));
							str.append(" "+ String.valueOf(toUnsignedByte(mBuffer[++currentPostion])));
							break;
						}
						currentPostion--;
						toUnsignedByte(mBuffer[++currentPostion]);
					}
				}
				else {
					//str.append(s2);
					for (int i = 1; i <= 2; i++)
					{
						str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
					}
					
					str.append(" "+Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]))+" ");
					
					int a = 0;
					a += toUnsignedByte(mBuffer[++currentPostion])*256;
					a += toUnsignedByte(mBuffer[++currentPostion]);
					str.append(String.valueOf(a));
					
					int b = 0;
					b += toUnsignedByte(mBuffer[++currentPostion])*256;
					b += toUnsignedByte(mBuffer[++currentPostion]);
					str.append(" "+String.valueOf(b));
						
				}
				
				//Doc du lieu byte cuoi
				/*byte b = mBuffer[currentPostion]; 
				BitSet bs = Global.fromByte(b);
				
				String type = "";
				
				if(bs.get(5)) type = "ECGI ";
				else if(bs.get(2)) type = "SAI ";
				else if(bs.get(1)) type ="CGI ";
				else if(bs.get(4)) type ="TAI ";
				else if(bs.get(3)) type ="RAI ";*/
				
				String type = "";
				switch (structNokiaLTE.getRATType()) {
				case 1:
					type = "CGI ";
					break;
				case 2:
					type = "SAI ";
					break;
				case 6:
					type = "ECGI ";
					break;
				default:
					break;
				} 
				
				structNokiaLTE.setUserLocationInfor(type+str.toString());
				str.setLength(0);
				
			} else {
				currentPostion -= 2;
			}
			
			
			// list of service data
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.LIST_OF_SERVICE_DATA) {
				checkListData = currentPostion;
				System.out.println(checkListData);
				if (mBuffer[++currentPostion] < 0) {
					count = mBuffer[currentPostion] + 128;
					checkListData += count + 1;
					tagLength = 0;
					while (count-- > 0) {
						tagLength = (int) (tagLength << 8) + toUnsignedByte(mBuffer[++currentPostion]);
					}
					
				} else {
					tagLength = toUnsignedByte(mBuffer[currentPostion]);
					checkListData += 1;
				}
				//System.out.println(tagLength);
				checkListData += tagLength;
				while (currentPostion < checkListData) {
					if (mBuffer[++currentPostion] == 0x30) {
						count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
						currentPostion += count;
						
						// rating group
						if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
							tagLength = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : mBuffer[currentPostion];
							ratingId = 0;
							while (tagLength-- > 0) {
								ratingId = (int) (ratingId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							System.out.println(ratingId);
							structNokiaLTE.setRatingGroupId(ratingId);
						}
						 else {
								currentPostion--;
							}
						// charging Rule Base Name
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								str.append(toChar(mBuffer[++currentPostion]));
							}
							//System.out.println("charging Rule Base Name = "+ str.toString() );
							structNokiaLTE.setChargingRuleBaseName(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// result code
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x83) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								resultCode = (int) (resultCode << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								structNokiaLTE.setResultCode(resultCode);
							}
						} else {
							currentPostion--;
						}
						
						// Local sequence number
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x84) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							int localSequenceNumberList = 0;
							while (tagLength-- > 0) {
								localSequenceNumberList = (int) (localSequenceNumberList << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setLocalSequenceNumberListData(localSequenceNumberList);
						} else {
							currentPostion--;
						}
						
						// time of fist
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x85) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
									int a = toUnsignedByte(mBuffer[++currentPostion]);
									String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							structNokiaLTE.setTimeOfFirstUsage(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// time of last
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x86) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
									int a = toUnsignedByte(mBuffer[++currentPostion]);
									String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							structNokiaLTE.setTimeOfLastUsage(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// time usage
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x87) {
							int timeDuration = 0;
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								timeDuration = (int) (timeDuration << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setTimeUsage(timeDuration);
						} else {
							currentPostion--;
						}
						
						// Service Condition Change
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x88) {
							tagLength = mBuffer[++currentPostion];
							while (tagLength-- > 0) {
								str.append(mBuffer[++currentPostion] == 0 ? "00000000" : Integer.toBinaryString(toUnsignedByte(mBuffer[currentPostion])));
							}
							structNokiaLTE.setServiceConditionChange(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// qoS Information Neg
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xA9) {
							tagLength = mBuffer[++currentPostion];
							currentPostion += tagLength;
						} else {
							currentPostion--;
						}
						
						// serving node address
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xAA) {
							currentPostion += 3;
							tagLength = mBuffer[currentPostion];
							if (tagLength == 4) {
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
								}
								tmp = str.toString();
								//System.out.println("tmp = " + tmp);
								structNokiaLTE.setServingNodeAddressListData(tmp.substring(0,tmp.length()-1));
								str.setLength(0);
							} else {
								currentPostion += tagLength;
							}
						} else {
							currentPostion--;
						}
						
						//SGSN PLMN Identifier---null
						
						
						// mBuffer volume FBC Up link
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8C) {
							tagLength = mBuffer[++currentPostion];
							int mBufferUp = 0;
							while (tagLength -- > 0) {
								mBufferUp = (mBufferUp << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setDatavolumeFBCUplink(mBufferUp);
							
						} else {
							currentPostion--;
						}
						
						// mBuffer volume FBC Down link
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8D) {
							tagLength = mBuffer[++currentPostion];
							int mBufferDown = 0;
							while (tagLength -- > 0) {
								mBufferDown = (mBufferDown << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setDatavolumeFBCDownlink(mBufferDown);
							
						} else {
							currentPostion--;
						}
						
						// time of report
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8E) {
							tagLength = mBuffer[++currentPostion];
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
										int a = toUnsignedByte(mBuffer[++currentPostion]);
										String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							structNokiaLTE.setTimeOfReport(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						//failureHandlingContinue
						
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x90) {
							tagLength = mBuffer[++currentPostion];
							for (int i = 0; i < tagLength; i++) {
								
									str.append(toChar(mBuffer[++currentPostion]));
								
							}
							structNokiaLTE.setFailureHandlingContinue(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						
						// service Identifier
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x91) {
							tagLength = mBuffer[++currentPostion];
							int serviceId = 0;
							while (tagLength-- > 0) {
								serviceId = (serviceId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setServiceIdentifier(serviceId);
							
						} else {
							currentPostion--;
						}

						//pSFurnishChargingInformation
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB2) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								str.append("_");
								structNokiaLTE.setpSFurnishChargingInforListData(str.toString());
								str.setLength(0);
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								structNokiaLTE.setpSFurnishChargingInfor(str.toString());
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}else {
							currentPostion--;
						}
					
						
						//aFRecordInformation
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB3) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								structNokiaLTE.setaFRecordInformation(str.toString());
								str.setLength(0);
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0xA2) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}
						else {
							currentPostion--;
						}
						// user Location Information
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x94) {
							tagLength = mBuffer[++currentPostion];
							while (tagLength-- > 0) {
								str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
							}
							//structNokiaLTE.setUserLocationInfor(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						//eventBasedChargingInformation

						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB5) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								eventBasedNumberOfEvents =0;
								while (tagLength-- > 0) {
									eventBasedNumberOfEvents = (eventBasedNumberOfEvents << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								structNokiaLTE.seteventBasedNumberOfEvents(eventBasedNumberOfEvents);
								
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								str.append("_");
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								structNokiaLTE.seteventBasedEventTimeStamps(str.toString());
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}
						else {
							currentPostion--;
						}
						
						//timeQuotaMechanism

						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB6) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								timeQuotaType =0;
								String StimeQuotaType ="";
								while (tagLength-- > 0) {
									timeQuotaType = (timeQuotaType << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								if (timeQuotaType==0) StimeQuotaType = "dISCRETETIMEPERIOD_";
								else StimeQuotaType = "cONTINUOUSTIMEPERIOD_";
								structNokiaLTE.settimeQuotaType(StimeQuotaType);
								
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								baseTimeInterval =0;
								while (tagLength-- > 0) {
									baseTimeInterval = (baseTimeInterval << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								structNokiaLTE.setbaseTimeInterval(baseTimeInterval);
								
							} else {
								currentPostion--;
							}
						}else {
							currentPostion--;
						}
						
						
						
					} else currentPostion = checkListData;
					
				} // end list data record
				

			} else {
				currentPostion -= 2;
			}
			// servingNodeType

					if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0xBF << 8 + 0x23 ) {
						tagLength = toUnsignedByte(mBuffer[++currentPostion]);
						while(tagLength-- > 0) {
							str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
						}
						
						str.setLength(0);
					} else {
						currentPostion -= 2;
					}
			// p-GWPLMNIdentifier

			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x25 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x26 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x27 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			// pDNConnectionChargingID

					if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x29 ) {
						tagLength = toUnsignedByte(mBuffer[++currentPostion]);
						while(tagLength-- > 0) {
							str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
						}
								
						str.setLength(0);
					} else {
								currentPostion -= 2;
							}
			mFileByte += mRecLength;

			/**
			 * 
			 * add text to file
			 */
		
			textRecord.setLength(0);
			textRecord.append("PGWRecord;");
			textRecord.append("85;");
			textRecord.append((structNokiaLTE.getSeveredIMSI()+";"));
			textRecord.append((structNokiaLTE.getPgwAddress()+";"));
			textRecord.append((structNokiaLTE.getChargingId()+";"));
			textRecord.append((structNokiaLTE.getServingNodeAddress()+";"));
			textRecord.append((structNokiaLTE.getAccessPointNameID()+";"));
			textRecord.append((structNokiaLTE.getPdpPDNType()+";"));
			textRecord.append((structNokiaLTE.getSeveredPDPPDNAdress()+";"));
			textRecord.append((structNokiaLTE.isDynamicAddressFlag()+";"));
			textRecord.append((Global.FormatFullDate(structNokiaLTE.getRecordOpeningTime(), 0)+";"));
			textRecord.append((structNokiaLTE.getDuration()+";"));
			textRecord.append((structNokiaLTE.getCauseForRecordClosing()+";"));
			textRecord.append((structNokiaLTE.getDiagnostics()+";"));
			textRecord.append((structNokiaLTE.getRecordSequenceNumber()+";"));
			textRecord.append((structNokiaLTE.getNodeId()+";"));
			textRecord.append((structNokiaLTE.getLocalSequenceNumber()+";"));
			textRecord.append((structNokiaLTE.getApnSelectionMode()+";"));
			textRecord.append((structNokiaLTE.getServedMSISDN()+";"));
			textRecord.append((structNokiaLTE.getChargingCharacteristics()+";"));
			textRecord.append((structNokiaLTE.getChargingCharacteristicsSelectionMode()+";"));
			textRecord.append((structNokiaLTE.getServingNodePLMNId()+";"));
			
			textRecord.append((structNokiaLTE.getServedIMEISV()+";"));
			textRecord.append((structNokiaLTE.getrATType()+";"));
			textRecord.append((structNokiaLTE.getMsTimeZone()+";"));
			
			textRecord.append((structNokiaLTE.getUserLocationInfor()+";"));
			textRecord.append((structNokiaLTE.getRatingGroupId()+";"));
			textRecord.append((structNokiaLTE.getChargingRuleBaseName()+";"));
			textRecord.append((structNokiaLTE.getResultCode()+";"));
			textRecord.append((structNokiaLTE.getLocalSequenceNumberListData()+";"));
			textRecord.append((Global.FormatFullDate(structNokiaLTE.getTimeOfFirstUsage(), 0)+";")); 
			textRecord.append((Global.FormatFullDate(structNokiaLTE.getTimeOfLastUsage(), 0)+";")); 
			textRecord.append((structNokiaLTE.getTimeUsage()+";")); 
			textRecord.append((structNokiaLTE.getServiceConditionChange()+";"));
			textRecord.append((structNokiaLTE.getQoSInformationNeg()+";"));
			textRecord.append((structNokiaLTE.getServingNodeAddressListData()+";"));
			textRecord.append((structNokiaLTE.getServingNodePLMNId()+";"));
			textRecord.append((structNokiaLTE.getDatavolumeFBCUplink()+";"));
			textRecord.append((structNokiaLTE.getDatavolumeFBCDownlink()+";"));
			textRecord.append((Global.FormatFullDate(structNokiaLTE.getTimeOfReport(), 0)+";")); 
			textRecord.append((structNokiaLTE.getRATType()+";"));
			textRecord.append((structNokiaLTE.getFailureHandlingContinue()+";"));
			if ((structNokiaLTE.getServiceIdentifier()) != 0)
				textRecord.append((structNokiaLTE.getServiceIdentifier()+";"));
			else textRecord.append(";");
			textRecord.append((structNokiaLTE.getUserLocationInforListData()+";"));
			textRecord.append(((structNokiaLTE.getpSFurnishChargingInforListData())+ (structNokiaLTE.getpSFurnishChargingInfor())+";"));
			
			textRecord.append((structNokiaLTE.getaFRecordInformation()+";"));
			textRecord.append(((structNokiaLTE.geteventBasedNumberOfEvents()) + (structNokiaLTE.geteventBasedEventTimeStamps())+";"));
			
			if ((structNokiaLTE.gettimeQuotaType().equals("dISCRETETIMEPERIOD-"))|| (structNokiaLTE.gettimeQuotaType().equals("cONTINUOUSTIMEPERIOD-"))) {
				textRecord.append((structNokiaLTE.gettimeQuotaType() + "-"));
				textRecord.append(structNokiaLTE.getbaseTimeInterval()+";");
			}
			else textRecord.append((structNokiaLTE.gettimeQuotaType() + ";"));
				
			
			textRecord.append(structNokiaLTE.getNetworkInitiatedPDPContext()+";");
			textRecord.append(structNokiaLTE.getiMSSignalingContext()+";");
			textRecord.append(structNokiaLTE.getexternalChargingID()+";");
			textRecord.append(((structNokiaLTE.getpSFurnishChargingInforListData())+ (structNokiaLTE.getpSFurnishChargingInfor())+";"));
			textRecord.append(structNokiaLTE.getCAMELInformation());
    		
		}

		private void sGWRecord(int stt) {
		
			int tagLength = 0;
			long chargingId = 0;
			int duration = 0;
			long recordSequence = 0;
			long pdnConnection = 0;
			int localSequence = 0;
			int apnSelectionMode = 0;
			int ratingId = 0;
			int checkListData = 0;
			int currentPostion = mFileByte + mByteN;
			int resultCode = 0;
			int eventBasedNumberOfEvents =0;
			int timeQuotaType =0;
			int baseTimeInterval =0;
			currentPostion += 4;
			int count = 0;
			int tagLength_1 = 0;

			// SeveredImsi83
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			for (int i = 0; i < tagLength; i++) {
				str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
			}
			String severedIMSI = str.toString();
			if (severedIMSI.endsWith("f")) {
				severedIMSI = severedIMSI.substring(0, severedIMSI.length()-1);
			}
			structNokiaLTE.setSeveredIMSI(severedIMSI);
			str.setLength(0);

			// P-gw AddressA4
			currentPostion += 4;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
			}
			String tmp = str.toString();
			structNokiaLTE.setsGWAddress(tmp.substring(0, tmp.length()-1));
			str.setLength(0);

			// charingId85
			currentPostion += 2;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				chargingId = (long) (chargingId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
			}
			structNokiaLTE.setCharingId(chargingId);
			
			// Serving Node Address A6
			currentPostion += 2;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			if (tagLength == 6) {
				currentPostion += 2;
				tagLength = toUnsignedByte(mBuffer[currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				while (tagLength-- > 0) {
					str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
				} 
				tmp = str.toString();
				//structNokiaLTE.setServingNodeAddress(tmp.substring(0, tmp.length()-1));
				str.setLength(0);
			} else {
				// ip v6
				currentPostion += tagLength;
			}

			

			// Access Point Name Network Identifier 87

			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.ACCESS_POINT_NAME_NETWORKID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				while (tagLength-- > 0) {
					str.append(toChar(mBuffer[++currentPostion]));
				}
				structNokiaLTE.setAccessPointNameID(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			//Here
			// PDP/PDN Type 88 
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.PDP_PDN_TYPE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				//String s="";
				while (tagLength-- > 0) {
					String s =  Global.HexToBCD(toUnsignedByte(mBuffer[++currentPostion]));
					str.append(s);
				}
				structNokiaLTE.setPdpPDNType(str.toString());
				str.setLength(0);
				
			} else {
				currentPostion--;
			}

			// Severed PDP/PDN Address A9
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVED_PDP_PDN_ADDRESS) {
				currentPostion += 5;
				tagLength = toUnsignedByte(mBuffer[currentPostion]);
				tagLength = tagLength > 128 ? tagLength-128 : tagLength;
				if (tagLength == 4) {
					while (tagLength-- > 0) {
						str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
					}
					tmp = str.toString();
					structNokiaLTE.setSeveredPDPDNPAdress(tmp.substring(0, tmp.length()-1));
				} else {
					currentPostion += tagLength;
				}
				str.setLength(0);
			} else {
				currentPostion--;
			}

			// Dynamic Flag 8b
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.DYNAMIC_ADDRESS_FLAG) {
				currentPostion += 2;
				structNokiaLTE.setDynamicAddressFlag(mBuffer[currentPostion] == 1 ? "true" : "false");
			} else {
				currentPostion--;
			}

			/*
			 * check if current position is tag AC?
			 * 
			 */
			//Here
			//System.out.println("--------------------------------");
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.ac) {
				
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				//System.out.println("Total Length: " + tagLength);
				
				while(tagLength-- > 0) {
					
					//str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
					//System.out.println("++++");
					
					while (toUnsignedByte(mBuffer[++currentPostion]) == 0x30) {
						
						/*
						 * tagLength_1 : length of tag 30 (byte after tag 30)
						 * flag : start position
						 * 
						 */
						tagLength_1 = toUnsignedByte(mBuffer[++currentPostion]);
						//System.out.println("Length: " + tagLength_1);
						int flag = currentPostion;
						//System.out.println("Flag: " + flag);
						
						while(currentPostion - flag < tagLength_1) {
							
							currentPostion++;
							//System.out.println("Current: " + toUnsignedByte(mBuffer[currentPostion]));
							
							//Ecept node != 83 84
							if (toUnsignedByte(mBuffer[currentPostion]) != 0x83 && toUnsignedByte(mBuffer[currentPostion]) != 0x84) {
								//System.out.println("Helloxxxx: " + toUnsignedByte(mBuffer[currentPostion]));
								int len = mBuffer[++currentPostion];
								//System.out.println("----Length Next: " + len);
								currentPostion += len;
								continue;
							}
							
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x83) {
								tagLength = mBuffer[++currentPostion];
								int mBufferUp = 0;
								while (tagLength-- > 0) {
									mBufferUp = (mBufferUp << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								structNokiaLTE.setDatavolumeFBCUplink(mBufferUp);
								continue;
							} 
							
							// mBuffer volume FBC Down link
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x84) {
								tagLength = mBuffer[++currentPostion];
								int mBufferDown = 0;
								while (tagLength -- > 0) {
									mBufferDown = (mBufferDown << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								structNokiaLTE.setDatavolumeFBCDownlink(mBufferDown);
								continue;
							} 
							
						}  
						
					} 
					// Minus one step after currentPosition++
					currentPostion--;
				}
						
				//str.setLength(0);
			} else {
				currentPostion --;
			}
			
			//Record Opening Time 8D
			if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8D){
			currentPostion ++;
			tagLength = toUnsignedByte(mBuffer[currentPostion]);
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			for (int i = 0; i < tagLength; i++) {
				if (i == 6) {
					str.append(toChar(mBuffer[++currentPostion]));
				} else {
					if(i==0){
						int a = toUnsignedByte(mBuffer[++currentPostion]);
						String b = Integer.toHexString(a);
						//toUnsignedByte(mBuffer[++currentPostion]);
						//str.append("20");
						str.append(a < 10 ? "0" + b : b);
					}
					else{
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					String b = Integer.toHexString(a);
					str.append(a < 10 ? "0" + b : b);
					}
				}
			}
			structNokiaLTE.setRecordOpeningTime(str.toString());
			str.setLength(0);
			}
			else{
				currentPostion--;
			}

			// Duration 8E
			if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8E){
			currentPostion ++;
			tagLength = mBuffer[currentPostion];
			tagLength = tagLength > 128 ? tagLength-128 : tagLength;
			while (tagLength-- > 0) {
				duration = (int) (duration << 8) + toUnsignedByte(mBuffer[++currentPostion]);
			}
			structNokiaLTE.setDuration(duration);
			}
			else {
				currentPostion--;
			}
			// Cause for record Closing 8F
			if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8F){
			currentPostion += 2;
			structNokiaLTE.setCauseForRecordClosing(StructNokiaLTE.causeForRecordClosingMap.get((int) mBuffer[currentPostion]));
			}
			else{
				currentPostion--;
			}
			// Diagnostics B0
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.DIAGNOSTICS) {
				tagLength = mBuffer[++currentPostion];
				
				//currentPostion += 4;
				
					if (Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])).equals("80")){
						currentPostion+=2;
						int Diagnostics = 0;
						Diagnostics = (int) mBuffer[currentPostion];
						structNokiaLTE.setDiagnostics(StructNokiaLTE.diagnoticsMap.get(Diagnostics));
					}
					else{
						for (int i =1; i< tagLength; i++)
							toUnsignedByte(mBuffer[++currentPostion]);
					}
					
				
				
			} else {
				currentPostion--;
			}
			
			// Record Sequence Number 91
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.RECORD_SEQUENCE_NUMBER) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				recordSequence = 0;
				while(tagLength-- > 0) {
					recordSequence = (long) (recordSequence << 8) + toUnsignedByte(mBuffer[++currentPostion]);
					
				}
				structNokiaLTE.setRecordSequenceNumber(recordSequence);
			}
			 else {
					currentPostion--;
				}
			
			// Node id 92
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.NODEID) {
				tagLength = mBuffer[++currentPostion]; 
				//System.out.println("dem: "+tagLength);
				while (tagLength-- > 0) {
					str.append(toChar(mBuffer[++currentPostion]));						
				}
				//System.out.println("dem: "+str.toString());
				structNokiaLTE.setNodeId(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			//recordExtensions B3
			if (toUnsignedByte(mBuffer[++currentPostion]) ==0xB3) {
				tagLength = mBuffer[++currentPostion];  
				while (tagLength-- > 0) {
					str.append(toUnsignedByte(mBuffer[++currentPostion]));						
				}
				
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Local sequence number 94
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.LOCAL_SEQUENCE_NUMBER) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					localSequence = (int) (localSequence << 8) + toUnsignedByte(mBuffer[++currentPostion]);
				}
				//System.out.println("localSequence = "+ localSequence);
				structNokiaLTE.setLocalSequenceNumber(localSequence);
			} else {
				currentPostion--;
			}
			
			// Apn selection mode 95
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.APN_SELECTION_MODE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					apnSelectionMode = (int) (apnSelectionMode << 8) + toUnsignedByte(mBuffer[++currentPostion]);
				}
				structNokiaLTE.setApnSelectionMode(apnSelectionMode + "");
				
			} else {
				currentPostion--;
			}
			
			// Severed MSISDN 96
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVED_MSISDN) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				} 
				try {
					if(str.toString().substring(0,2).equals("84"))
						structNokiaLTE.setServedMSISDN(str.toString());
					else
						structNokiaLTE.setServedMSISDN(str.toString().substring(2));
				} catch (Exception e) {
					structNokiaLTE.setServedMSISDN(str.toString());
				} 
				 
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Charging Characteristics 97
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.CHARGING_CHARACTERISTICS) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while (tagLength-- > 0) {
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					if (a <10)
					str.append("0"+(Integer.toHexString(a)));
					else str.append((Integer.toHexString(a)));
				}
				structNokiaLTE.setChargingCharacteristics(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			
			// Charging Characteristics Selection Mode 98
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.CHARGING_CHARACTERISTICS_SELECTION_MODE) {
				currentPostion += 2;
				structNokiaLTE.setChargingCharacteristicsSelectionMode(StructNokiaLTE.chargingCharacteristicsSMMap.get((int) mBuffer[currentPostion]));
			} else {
				currentPostion--;
			}
			//externalChargingID 9A

			if ( toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.externalChargingID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				//structNokiaLTE.setexternalChargingID(str.toString());
				str.setLength(0);
			} else {
				currentPostion--;
			}
			// Serving Node PLMN Identifier 9B
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.SERVING_NODE_PLMN_ID) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				//structNokiaLTE.setServingNodePLMNId(str.toString());
				str.setLength(0);
				
			} else {
				currentPostion--;
			}
			
			//servedIMEISV 9D
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.served_IMEISV) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
				structNokiaLTE.setServedIMEISV(str.toString());
				str.setLength(0);
				
			} else {
				currentPostion--;
			}
			
			// Rat type 9E
			if (toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.RATTYPE) {
				currentPostion += 2;
				int a = toUnsignedByte(mBuffer[currentPostion]);
				structNokiaLTE.setRATType(a);
				structNokiaLTE.setrATType(StructNokiaLTE.rATTypeMap.get(a));
			} else {
				currentPostion--;
			}
			
			// Ms time zone 9F1F
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.MS_TIME_ZONE) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					int a = toUnsignedByte(mBuffer[++currentPostion]);
					if (a <10)
					str.append("0"+(Integer.toHexString(a)));
					else str.append((Integer.toHexString(a)));
				}
				//structNokiaLTE.setMsTimeZone(str.toString());
				str.setLength(0);
			} else {
				currentPostion -= 2;
			}
			
			// user location information 9F20
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.USER_LOCATION_INFORMATION) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				/*1while(tagLength-- > 0) {
					str.append(Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])));
				}*/
				String s1 = Global.HexToText(toUnsignedByte(mBuffer[++currentPostion]));
				//System.out.println (s1.substring(0,1));
				/*String s2 = "";
				if (s1.substring(1).equals("8")) s2 += " TAI ";
				else{
					if (s1.substring(1).equals("4")) s2 += (" RAI ");
					else {
						if (s1.substring(1).equals("2")) s2 += (" SAI ");
						else{
							if (s1.substring(1).equals("1")) s2 += (" CGI ");
						}
					}
				}*/
				if (s1.substring(0,1).equals("1")) {
					//str.append("ECGI ");
					for (int i = 1; i <= 2; i++)
					{
						Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]));
					}
					
					Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]));
					for (int i=5; i<= tagLength; i++){
						if (Global.HexToText(toUnsignedByte(mBuffer[++currentPostion])).equals("54"))
						{
							//str.append(s2);
							currentPostion--;
							for (int j = 1; j <= 2; j++)
							{
								str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
							}
							str.append(" "+Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]))+ " ");
							int a = 0;
							a += toUnsignedByte(mBuffer[++currentPostion])*65536;
							a += toUnsignedByte(mBuffer[++currentPostion])*256;
							a += toUnsignedByte(mBuffer[++currentPostion]);
							str.append(String.valueOf(a));
							str.append(" "+ String.valueOf(toUnsignedByte(mBuffer[++currentPostion])));
							break;
						}
						currentPostion--;
						toUnsignedByte(mBuffer[++currentPostion]);
					}
				}
				else {
					//str.append(s2);
					for (int i = 1; i <= 2; i++)
					{
						str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
					}
					
					str.append(" "+Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion]))+" ");
					
					int a = 0;
					a += toUnsignedByte(mBuffer[++currentPostion])*256;
					a += toUnsignedByte(mBuffer[++currentPostion]);
					str.append(String.valueOf(a));
					
					int b = 0;
					b += toUnsignedByte(mBuffer[++currentPostion])*256;
					b += toUnsignedByte(mBuffer[++currentPostion]);
					str.append(" "+String.valueOf(b));
						
				}
				
				//Doc du lieu byte cuoi
				/*byte b = mBuffer[currentPostion]; 
				BitSet bs = Global.fromByte(b);
				
				String type = "";
				
				if(bs.get(5)) type = "ECGI ";
				else if(bs.get(2)) type = "SAI ";
				else if(bs.get(1)) type ="CGI ";
				else if(bs.get(4)) type ="TAI ";
				else if(bs.get(3)) type ="RAI ";*/
				
				/*String type = "";
				switch (structNokiaLTE.getRATType()) {
				case 1:
					type = "CGI ";
					break;
				case 2:
					type = "SAI ";
					break;
				case 6:
					type = "ECGI ";
					break;
				default:
					break;
				} */
				
				//System.out.println(str.toString());
				if(str.toString() != null) {
					structNokiaLTE.setUserLocationInfor(str.toString().split(" ")[3]);
					structNokiaLTE.setLocationAreaCode(str.toString().split(" ")[2]);
				}
				
				str.setLength(0);
				
			} else {
				currentPostion -= 2;
			}
			// sGWChange
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x22 ) {
				currentPostion += 2;
				boolean sGWChange;
				if (mBuffer[currentPostion] == 1) sGWChange = true;
				else sGWChange = false;
				structNokiaLTE.setsGWChange(sGWChange);
			} else {
						currentPostion -= 2;
					}
			
			// list of service data
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) == PGWNokiaTagConstanct.LIST_OF_SERVICE_DATA) {
				checkListData = currentPostion;
				//System.out.println(checkListData);
				if (mBuffer[++currentPostion] < 0) {
					count = mBuffer[currentPostion] + 128;
					checkListData += count + 1;
					tagLength = 0;
					while (count-- > 0) {
						tagLength = (int) (tagLength << 8) + toUnsignedByte(mBuffer[++currentPostion]);
					}
					
				} else {
					tagLength = toUnsignedByte(mBuffer[currentPostion]);
					checkListData += 1;
				}
				//System.out.println(tagLength);
				checkListData += tagLength;
				while (currentPostion < checkListData) {
					if (mBuffer[++currentPostion] == 0x30) {
						count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
						currentPostion += count;
						
						// rating group
						if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
							tagLength = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : mBuffer[currentPostion];
							ratingId = 0;
							while (tagLength-- > 0) {
								ratingId = (int) (ratingId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							//System.out.println(ratingId);
							//structNokiaLTE.setRatingGroupId(ratingId);
						}
						 else {
								currentPostion--;
							}
						// charging Rule Base Name
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								str.append(toChar(mBuffer[++currentPostion]));
							}
							//System.out.println("charging Rule Base Name = "+ str.toString() );
							//structNokiaLTE.setChargingRuleBaseName(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// result code
						
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x83) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								resultCode = (int) (resultCode << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								//structNokiaLTE.setResultCode(resultCode);
							}
						} else {
							currentPostion--;
						}
						
						// Local sequence number
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x84) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							int localSequenceNumberList = 0;
							while (tagLength-- > 0) {
								localSequenceNumberList = (int) (localSequenceNumberList << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							//structNokiaLTE.setLocalSequenceNumberListData(localSequenceNumberList);
						} else {
							currentPostion--;
						}
						
						// time of fist
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x85) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
									int a = toUnsignedByte(mBuffer[++currentPostion]);
									String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							//structNokiaLTE.setTimeOfFirstUsage(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// time of last
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x86) {
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
									int a = toUnsignedByte(mBuffer[++currentPostion]);
									String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							//structNokiaLTE.setTimeOfLastUsage(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// time usage
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x87) {
							int timeDuration = 0;
							tagLength = toUnsignedByte(mBuffer[++currentPostion]);
							while (tagLength-- > 0) {
								timeDuration = (int) (timeDuration << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							//structNokiaLTE.setTimeUsage(timeDuration);
						} else {
							currentPostion--;
						}
						
						// Service Condition Change
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x88) {
							tagLength = mBuffer[++currentPostion];
							while (tagLength-- > 0) {
								str.append(mBuffer[++currentPostion] == 0 ? "00000000" : Integer.toBinaryString(toUnsignedByte(mBuffer[currentPostion])));
							}
							//structNokiaLTE.setServiceConditionChange(str.toString());
							str.setLength(0);
						} else {
							currentPostion--;
						}
						
						// qoS Information Neg
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xA9) {
							tagLength = mBuffer[++currentPostion];
							currentPostion += tagLength;
						} else {
							currentPostion--;
						}
						
						// serving node address
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xAA) {
							currentPostion += 3;
							tagLength = mBuffer[currentPostion];
							if (tagLength == 4) {
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
								}
								tmp = str.toString();
								//System.out.println("tmp = " + tmp);
								//structNokiaLTE.setServingNodeAddressListData(tmp.substring(0,tmp.length()-1));
								str.setLength(0);
							} else {
								currentPostion += tagLength;
							}
						} else {
							currentPostion--;
						}
						
						//SGSN PLMN Identifier---null
						
						
						// mBuffer volume FBC Up link
						/*
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8C) {
							tagLength = mBuffer[++currentPostion];
							int mBufferUp = 0;
							while (tagLength -- > 0) {
								mBufferUp = (mBufferUp << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setDatavolumeFBCUplink(mBufferUp);
							
						} else {
							currentPostion--;
						}
						
						// mBuffer volume FBC Down link
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8D) {
							tagLength = mBuffer[++currentPostion];
							int mBufferDown = 0;
							while (tagLength -- > 0) {
								mBufferDown = (mBufferDown << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							structNokiaLTE.setDatavolumeFBCUplink(mBufferDown);
							
						} else {
							currentPostion--;
						}
						*/
						// time of report
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x8E) {
							tagLength = mBuffer[++currentPostion];
							for (int i = 0; i < tagLength; i++) {
								if (i == 6) {
									str.append(toChar(mBuffer[++currentPostion]));
								} else {
										int a = toUnsignedByte(mBuffer[++currentPostion]);
										String b = Integer.toHexString(a);
									str.append(a < 10 ? "0" + b : b);
								}
							}
							//structNokiaLTE.setTimeOfReport(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						//failureHandlingContinue
						
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x90) {
							tagLength = mBuffer[++currentPostion];
							for (int i = 0; i < tagLength; i++) {
								
									str.append(toChar(mBuffer[++currentPostion]));
								
							}
							//structNokiaLTE.setFailureHandlingContinue(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						
						// service Identifier
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x91) {
							tagLength = mBuffer[++currentPostion];
							int serviceId = 0;
							while (tagLength-- > 0) {
								serviceId = (serviceId << 8) + toUnsignedByte(mBuffer[++currentPostion]);
							}
							//structNokiaLTE.setServiceIdentifier(serviceId);
							
						} else {
							currentPostion--;
						}

						//pSFurnishChargingInformation
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB2) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								str.append("_");
								//structNokiaLTE.setpSFurnishChargingInforListData(str.toString());
								str.setLength(0);
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								//structNokiaLTE.setpSFurnishChargingInfor(str.toString());
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}else {
							currentPostion--;
						}
					
						
						//aFRecordInformation
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB3) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								//structNokiaLTE.setaFRecordInformation(str.toString());
								str.setLength(0);
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0xA2) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}
						else {
							currentPostion--;
						}
						// user Location Information
						if (toUnsignedByte(mBuffer[++currentPostion]) == 0x94) {
							tagLength = mBuffer[++currentPostion];
							while (tagLength-- > 0) {
								str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
							}
							//structNokiaLTE.setUserLocationInfor(str.toString());
							str.setLength(0);
							
						} else {
							currentPostion--;
						}
						//eventBasedChargingInformation

						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB5) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								eventBasedNumberOfEvents =0;
								while (tagLength-- > 0) {
									eventBasedNumberOfEvents = (eventBasedNumberOfEvents << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								//structNokiaLTE.seteventBasedNumberOfEvents(eventBasedNumberOfEvents);
								
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								str.append("_");
								while (tagLength-- > 0) {
									str.append(toUnsignedByte(mBuffer[++currentPostion]));
								}
								//structNokiaLTE.seteventBasedEventTimeStamps(str.toString());
								str.setLength(0);
							} else {
								currentPostion--;
							}
						}
						else {
							currentPostion--;
						}
						
						//timeQuotaMechanism

						if (toUnsignedByte(mBuffer[++currentPostion]) == 0xB6) {
							count = mBuffer[++currentPostion] < 0 ? mBuffer[currentPostion] + 128 : 1;
							currentPostion += count;
							if (toUnsignedByte(mBuffer[currentPostion]) == 0x81) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								timeQuotaType =0;
								String StimeQuotaType ="";
								while (tagLength-- > 0) {
									timeQuotaType = (timeQuotaType << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								if (timeQuotaType==0) StimeQuotaType = "dISCRETETIMEPERIOD_";
								else StimeQuotaType = "cONTINUOUSTIMEPERIOD_";
								//structNokiaLTE.settimeQuotaType(StimeQuotaType);
								
							}
							else {
								currentPostion--;
							}
							if (toUnsignedByte(mBuffer[++currentPostion]) == 0x82) {
								tagLength = toUnsignedByte(mBuffer[++currentPostion]);
								baseTimeInterval =0;
								while (tagLength-- > 0) {
									baseTimeInterval = (baseTimeInterval << 8) + toUnsignedByte(mBuffer[++currentPostion]);
								}
								//structNokiaLTE.setbaseTimeInterval(baseTimeInterval);
								
							} else {
								currentPostion--;
							}
						}else {
							currentPostion--;
						}
						
						
						
					} else currentPostion = checkListData;
					
				} // end list data record
				

			} else {
				currentPostion -= 2;
			}
			// servingNodeType

					if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0xBF << 8 + 0x23 ) {
						tagLength = toUnsignedByte(mBuffer[++currentPostion]);
						int tag2 = tagLength;
						for(int i = 1; i<= tagLength; i++) {
							str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
						}
						//System.out.println("bf23 =" + tag2);
						str.setLength(0);
					} else {
						currentPostion -= 2;
					}
				// p-GWAddressUsed
					
					if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0xBF << 8 + 0x24 ) {
						tagLength = toUnsignedByte(mBuffer[++currentPostion]);
						tagLength = 4;
						currentPostion += 2;
						//System.out.println("tag =" + tagLength);
						while (tagLength-- > 0) {
							str.append(toUnsignedByte(mBuffer[++currentPostion]) + ".");
						}
						String tmp2 = str.toString();
						//System.out.println("tmp =" + tmp2);
						structNokiaLTE.setpGWAddressUsed(tmp2.substring(0, tmp2.length()-1));
						str.setLength(0);
					} else {
								currentPostion -= 2;
							}
					
			// p-GWPLMNIdentifier

			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x25 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x26 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x27 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x28 ) {
				tagLength = toUnsignedByte(mBuffer[++currentPostion]);
				while(tagLength-- > 0) {
					str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
				}
						
				str.setLength(0);
			} else {
						currentPostion -= 2;
					}
			
			// pDNConnectionChargingID

				/*	if (toUnsignedByte(mBuffer[++currentPostion])<< 8 + toUnsignedByte(mBuffer[++currentPostion]) ==0x9F << 8 + 0x29 ) {
						tagLength = toUnsignedByte(mBuffer[++currentPostion]);
						while(tagLength-- > 0) {
							str.append(Global.HexToTBCDHA(toUnsignedByte(mBuffer[++currentPostion])));
						}
								
						str.setLength(0);
					} else {
								currentPostion -= 2;
							}*/
			mFileByte += mRecLength;

			/**
			 * 
			 * add text to file
			 */
		
			textRecord.setLength(0);
			textRecord.append(stt + "|");
			textRecord.append("84|");
			textRecord.append((structNokiaLTE.getnetworkInitiation()+"|"));
			textRecord.append((structNokiaLTE.getSeveredIMSI()+"|"));
			textRecord.append((structNokiaLTE.getServedIMEISV()+"|"));
			textRecord.append((structNokiaLTE.getsGWAddress()+"|"));
			textRecord.append((structNokiaLTE.getmsNetworkCapability()+"|"));
			textRecord.append((structNokiaLTE.getRoutingAreaCode()+"|"));
			textRecord.append((structNokiaLTE.getLocationAreaCode()+"|"));
			textRecord.append((structNokiaLTE.getUserLocationInfor()+"|"));
			textRecord.append((structNokiaLTE.getChargingId()+"|"));
			textRecord.append((structNokiaLTE.getpGWAddressUsed()+"|"));
			textRecord.append((structNokiaLTE.getAccessPointNameID()+"|"));
			textRecord.append((structNokiaLTE.getPdpPDNType()+"|"));
			textRecord.append((structNokiaLTE.getSeveredPDPPDNAdress()+"|"));
			textRecord.append((structNokiaLTE.getDatavolumeFBCUplink()+"|"));
			textRecord.append((structNokiaLTE.getDatavolumeFBCDownlink()+"|"));
			textRecord.append((Global.FormatDate(structNokiaLTE.getRecordOpeningTime(), 0)+"|"));
			textRecord.append((structNokiaLTE.getDuration()+"|"));
			textRecord.append((structNokiaLTE.issGWChange()+"|"));
			textRecord.append((structNokiaLTE.getCauseForRecordClosing()+"|"));
			textRecord.append((structNokiaLTE.getDiagnostics()+"|"));
			textRecord.append((structNokiaLTE.getRecordSequenceNumber()+"|"));
			textRecord.append((structNokiaLTE.getNodeId()+"|"));
			textRecord.append((structNokiaLTE.getrecordExtensions()+"|"));
			textRecord.append((structNokiaLTE.getLocalSequenceNumber()+"|"));
			textRecord.append((structNokiaLTE.getApnSelectionMode()+"|"));
			textRecord.append((structNokiaLTE.getaccessPointNameOI()+"|"));
			textRecord.append((structNokiaLTE.getServedMSISDN()+"|"));
			textRecord.append((structNokiaLTE.getChargingCharacteristics()+"|"));
			textRecord.append((structNokiaLTE.getrATType()+"|"));
			textRecord.append(structNokiaLTE.getCAMELInformation()+"|");
			textRecord.append(structNokiaLTE.getrNCUnsentDownlinkVolume()+"|");
			textRecord.append((structNokiaLTE.getChargingCharacteristicsSelectionMode()+"|"));
			textRecord.append((structNokiaLTE.isDynamicAddressFlag()+"|"));
			textRecord.append((structNokiaLTE.getnumberOfSeq())); 
	}

		public Map<String, Object> analyseMinContent(String type, String name, int length) {
			StringBuffer sb = new StringBuffer();
			Map<String , Object> map = new HashMap<String , Object>();
			int typeInt=0;
			if(type.equals("int")){
				typeInt=1;
			}else if(type.equals("long")){
				typeInt=2;
			}else if(type.equals("char")){
				typeInt=3;
			}else if(type.equals("strBCD")){
				typeInt=4;
			}else if(type.equals("strTBCD")){
				typeInt=5;
			}else if(type.equals("strIp4")){
				typeInt=6;
			}else if(type.equals("strIp6")){
				typeInt=7;
			}else if(type.equals("time")){
				typeInt=8;
			}else if(type.equals("plmnId")){
				typeInt=9;
			}
			
			
			switch (typeInt) {
			case 1:
				while (length > 0) {
					sb.append(convertDecToHex( Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
					mByteN++;
					length--;
				}
				int intResult = convertIntDec(sb.toString());
				//System.out.println("----name " + name +" content "+intResult+" -----");
				
				
				map.put("int", String.valueOf(intResult));
				break;
			case 2:
				while (length > 0) {
					sb.append(convertDecToHex( Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
					mByteN++;
					length--;
				}
				long longResult = convertLongDec(sb.toString());
				//System.out.println("----name " + name +" content "+longResult+" -----");
				
				
				map.put("long", String.valueOf(longResult));
				break;
			case 3:
				while (length > 0) {
					sb.append((char) Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					length--;
				}
				String charResult = sb.toString();
				//System.out.println("----name " + name +" content "+charResult+" -----");
				
				
				map.put("char", charResult);
				break;
			case 4:
				while (length > 0) {
					sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
					mByteN++;
					length--;
				}
				String strResult = sb.toString();
				//System.out.println("----name " + name +" content "+strResult+" -----");
				
				
				map.put("strBCD", strResult);
				break;
			case 5:
				while (length > 0) {
					sb.append(Global.HexToTBCDHA(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
					mByteN++;
					length--;
				}
				strResult = sb.toString();
				//System.out.println("----name " + name +" content "+strResult+" -----");
				
				
				map.put("strTBCD", strResult);
				break;
			case 6:
				while (length > 0) {
					sb.append(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
					mByteN++;
					sb.append(".");
					length--;
				}
				strResult = sb.toString().substring(0,sb.length()-1);
				//System.out.println("----name " + name +" content "+strResult+" -----");
				
				
				map.put("strIp4", strResult);
				break;
			case 7:
				while (length > 0) {
					if(length%2==0){
						sb.append(":");
					}
					sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
					mByteN++;
					length--;
				}
				strResult = sb.toString().substring(1, sb.length());
				//System.out.println("----name " + name +" content "+strResult+" -----");
				
				
				map.put("strIp6", strResult);
				break;
			case 8:
				int i =0;
				while(length>0){
					length--;
					i++;
					if(i<3){
						sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
						sb.append("-");
					}else if(i==3){
						sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
						sb.append(" ");
					}else if(i<6){
						sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
						sb.append(".");
					}else if(i==6){
						sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
						sb.append(" ");
					}else if(i==7 && Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])).equals("2b")){
						mByteN++;
						sb.append("+");
					}else{
						sb.append(Global.HexToBCD(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
					}
				}
				strResult = sb.toString();
				//System.out.println("----name " + name +" content "+strResult+" -----");
				
				
				map.put("time", strResult);
				break;
			case 9:
				i =0;
				String str = null;
				while(length>0){
					length--;
					i++;
					if(i%2==1){
						sb.append(Global.HexToTBCDHA(Global.fixSignedByte(mBuffer[mFileByte + mByteN])));
						mByteN++;
						if(str!=null){
							sb.append(str.charAt(0));
						}
					}else if(i%2==0){
						str = Global.HexToTBCDHA(Global.fixSignedByte(mBuffer[mFileByte + mByteN]));
						mByteN++;
						sb.append(str.charAt(0));
					}else {
						
					}
				}
				strResult = sb.toString();
				//System.out.println("----name " + name +" content "+strResult+" -----");
				map.put("plmnId", strResult);
				break;
			default:
				
				break;
			}
			return map;
		}

		public String analysIpAddress(int ipType, String name) throws IOException {
			String ipAddress = "";
			if (ipType == 0) {// ipv4
				//System.out.println("IPV4");
				ipAddress = (String) analyseMinContent("strIp4", name,
						Global.fixSignedByte(mBuffer[mFileByte + mByteN])).get("strIp4");
				mByteN++;
			} else {// ipv6
				//System.out.println("IPV6");
				ipAddress = (String) analyseMinContent("strIp6", name,
						Global.fixSignedByte(mBuffer[mFileByte + mByteN])).get("strIp6");
				mByteN++;
			}
			return ipAddress;
		}

		public String analysPdpIpAddress(int pdpType, String name) throws IOException {
			String ipAddress = "";
			if (pdpType == 0) {// ipAddress
				System.out.println("ipAddress");
				int ipType = Global.fixSignedByte(mBuffer[mFileByte + mByteN]) - 128;
				mByteN++;
				ipAddress = analysIpAddress(ipType, name);
			} else {// etsi address NOT USE

			}
			return ipAddress;
		}

		public Integer convertIntDec(String inputHex) {
			Integer outputDecimal = Integer.parseInt(inputHex, 16);
			return outputDecimal;
		}

		public Short convertShortDec(String inputHex) {
			Integer outputDecimal = Integer.parseInt(inputHex, 16);
			return Short.valueOf(String.valueOf(outputDecimal));
		}

		public long convertLongDec(String inputHex) {
			return Long.parseLong(inputHex, 16);
		}

		public String convertDecToHex(int asc) {
			String str;
			if (asc < 10) {
				str = String.format("%02d", Integer.parseInt(Integer.toHexString(asc)));
			} else {
				str = Integer.toHexString(asc);
			}
			return str;
		}

		public int intDecToHex(int asc) {
			return Integer.parseInt(convertDecToHex(asc));
		}

		public ChangeOfCharCondition analysUniversal(int bigLength) {
			ChangeOfCharCondition listOfTrafficVolume = new ChangeOfCharCondition();
			String numberType="0";
			try {
				while ( bigLength>0) {
				int tagId = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mByteN++;
				if(tagId<=158){
					tagId = tagId -128;
				}else if(tagId == 169){
					tagId = tagId -160;
				}
				int length = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
				mFileByte++;
				bigLength -=(length+2);
				switch (tagId) {
				case ConstSgwTag.LTV_QOSREQUESTED://1 not yet supported
					numberType = (String)analyseMinContent( "int", "LTV_QOSREQUESTED", length).get("int");
					listOfTrafficVolume.setQosRequested(Integer.parseInt(numberType));
					break;
				case ConstSgwTag.LTV_QOSNEGOTIATED://2 not yet supported
					numberType = (String)analyseMinContent( "int", "LTV_QOSNEGOTIATED", length).get("int");
					listOfTrafficVolume.setQosNegotiated(Integer.parseInt(numberType));
					break;
				case ConstSgwTag.LTV_DATAVOLUMEGPRSUPLINK:
					numberType = (String)analyseMinContent( "int", "LTV_DATAVOLUMEGPRSUPLINK", length).get("int");
					listOfTrafficVolume.setDataVolumeGPRSUplink(Integer.parseInt(numberType));
					break;
				case ConstSgwTag.LTV_DATAVOLUMEGPRSDOWNLINK:
					numberType = (String)analyseMinContent( "int", "LTV_DATAVOLUMEGPRSDOWNLINK", length).get("int");
					listOfTrafficVolume.setDataVolumeGPRSDownlink(Integer.parseInt(numberType));
					break;
				case ConstSgwTag.LTV_CHANGECONDITION:// need return numeRated
					numberType = (String)analyseMinContent( "int", "LTV_CHANGECONDITION", length).get("int");
					listOfTrafficVolume.setChangeCondition(EnumeRatedSgw.getEnumeRated(Integer.parseInt(numberType),"Ltv_changeCondition"));
					break;
				case ConstSgwTag.LTV_CHANGETIME:
					listOfTrafficVolume.setChangeTime((String)analyseMinContent( "time", "LTV_CHANGETIME", length).get("time"));
					break;
				case ConstSgwTag.LTV_USERLOCATIONINFORMATION://not yet supported
					listOfTrafficVolume.setUserLocationInformation("ox"+(String)analyseMinContent( "strBCD", "LTV_USERLOCATIONINFORMATION", length).get("strBCD"));
					break;
				case ConstSgwTag.LTV_EPCQOSINFORMATION:
					while(length>0){
						int ltvEpc = Global.fixSignedByte(mBuffer[mFileByte + mByteN])-128;
						mByteN++;
						int ltvEpcLength = Global.fixSignedByte(mBuffer[mFileByte + mByteN]);
						mByteN++;
						length = length - 2 -ltvEpcLength;
						switch (ltvEpc) {
						case ConstSgwTag.LTV_EPC_QCI:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_QCI", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_qCI(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_MAXREQUESTEDBANDWITHUL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_MAXREQUESTEDBANDWITHUL", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_maxRequestedBandwithUL(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_MAXREQUESTEDBANDWITHDL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_MAXREQUESTEDBANDWITHDL", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_maxRequestedBandwithDL(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_GUARANTEEDBITRATEUL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_GUARANTEEDBITRATEUL", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_guaranteedBitrateUL(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_GUARANTEEDBITRATEDL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_GUARANTEEDBITRATEDL", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_guaranteedBitrateDL(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_ARP:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_ARP", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_aRP(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_APNAGGREGATEMAXBITRATEUL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_APNAGGREGATEMAXBITRATEUL",ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_aPNAggregateMaxBitrateUL(Integer.parseInt(numberType));
							break;
						case ConstSgwTag.LTV_EPC_APNAGGREGATEMAXBITRATEDL:
							numberType = (String)analyseMinContent( "int", "LTV_EPC_APNAGGREGATEMAXBITRATEDL", ltvEpcLength).get("int");
							listOfTrafficVolume.setePCQoSInfor_aPNAggregateMaxBitrateDL(Integer.parseInt(numberType));
							break;
						default:
							
							break;
						}
					}
					break;

				default:
					
					break;
				}
			}
			} catch (Exception e) {
				e.printStackTrace();
				
			}
			return listOfTrafficVolume;
		}

		int toUnsignedByte(byte b) {
			return b < 0 ? b + 256 : b;
		}

		char toChar(byte b) {
			return (char) toUnsignedByte(b);
		}

		class PGWNokiaTagConstanct {
			 public final static int RECORD_TYPE = 0x80;
			 public final static int SERVED_IMSI = 0x83;
			 public final static int PGW_ADDRESS = 0xA4;
			 public final static int CHARGINGID = 0x85;
			 public final static int SERVING_NODE_ADDRESS = 0xA6;
			 public final static int ACCESS_POINT_NAME_NETWORKID = 0x87;
			 public final static int PDP_PDN_TYPE = 0x88;
			 public final static int SERVED_PDP_PDN_ADDRESS = 0xA9;
			 public final static int DYNAMIC_ADDRESS_FLAG = 0x8B;
			 public final static int ac = 0xAC;
			 public final static int RECORD_OPENING_TIME = 0x8D;
			 public final static int DURATION = 0x8E;
			 public final static int CAUSE_FOR_RECORD_CLOSING = 0x8F;
			 public final static int DIAGNOSTICS = 0xB0;
			 public final static int RECORD_SEQUENCE_NUMBER = 0x91;
			 public final static int NODEID = 0x92;
			 public final static int LOCAL_SEQUENCE_NUMBER = 0x94;
			 public final static int APN_SELECTION_MODE = 0x95;
			 public final static int SERVED_MSISDN = 0x96;
			 public final static int CHARGING_CHARACTERISTICS = 0x97;
			 public final static int CHARGING_CHARACTERISTICS_SELECTION_MODE = 0x98;
			 public final static int SERVING_NODE_PLMN_ID = 0x9B;
			 public final static int served_IMEISV = 0x9D;
			 public final static int RATTYPE = 0x9E;
			 public final static int MS_TIME_ZONE = 0x9F << 8 + 0x1F;
			 public final static int USER_LOCATION_INFORMATION = 0x9F << 8 +  0x20;
			 public final static int LIST_OF_SERVICE_DATA = 0xBF <<8 +  0x22;
			 public final static int SEVERED_NODE_TYPE = 0xBF << 8 + 0x23;
			 public final static int PGW_PLMN_IDENTIFIER = 0x9F << 8 + 0x25;
			 public final static int START_TIME = 0x9F << 8 + 0x26;
			 public final static int STOP_TIME = 0x9F << 8 + 0x27;
			 public final static int PDN_CONNECTION_CHARGINGID = 0x9F << 8 + 0x29;
			 public final static int externalChargingID = 0x9A;
			 //		public final static int SERVED_PDP_PDN_ADDRESS_EXT = ;
			 //		public final static int DYNAMICÂ ADDRESSFLAGEXTENSION
			 //		public final static int RECORDÂ EXTENSIONS
			 //
		 }
	
	}
	
	/**
	 * 
	 * @author VHC-TRUNGNGAONGO
	 * update 15/4/2017
	 * Lay them 9 gia tri cua ban ghi cdr:
	 * ACCOUNTING ID FIELD
	 * INGRESS PSTN CIRCUIT END POINT FIELD
	 * INGRESS IP CIRCUIT END POINT FIELD
	 * EGRESS PSTN CIRCUIT END POINT FIELD
	 * EGRESS IP CIRCUIT END POINT FIELD
	 * CALL GROUP ID FIELD
	 * CALLING NAME FIELD
	 * INGRESS LOCAL GATEWAY SIGNALLING IP ADDRESS FIELD
	 * INGRESS REMOTE GATEWAY SIGNALLING IP ADDRESS FIELD
	 */
	
	class ConvertIGWSonic {

		protected String mTagModuleCode = "";
		protected int mTagModuleLength = 0;
		protected String mTagFieldCode = "";
		protected int mTagFieldLength = 0;
		protected String mStrValues = "";
		protected byte mBuffer[] = null;
		protected int mByteN = 0;
		protected int mFileByte = 0;
		protected int mRecOG = 0;
		protected int mRecIC = 0;
		protected int mRecSMO = 0;
		protected int mRecSMT = 0;
		protected int mRecAnnoun = 0;
		protected int mRecDivert = 0;
		protected int mRecTransit = 0;
		protected int mRecOther = 0;
		protected int mRecConvert = 0;
		protected int mRecData = 0;
		protected String mValue = "";
		protected int mRet = 0;
		protected int mRecLength = 0;
		protected int mLength = 0;
		protected String mSQL = null;
		
		public ConvertIGWSonic() {
			setDataMap();
		}

		StringBuilder str = new StringBuilder();
		StringBuilder textRecord = new StringBuilder(); // ghi lai toan bo noi dung ban ghi duoi dang text

		//private final int START_NUMBER_FIELDS = 176;
		private final int STOP_NUMBER_FIELDS = 239;
		private final int ATTEMPT_NUMBER_FIELDS = 192;
	//	private final int INETERMEDIATE_NUMBER_FIELDS = 169;
		private final int HEADER_NUMBER_FIELDS = 53;
		
	//	private Map<Integer, Integer> startMap;
		private Map<Integer, Integer>  stopMap;
		private Map<Integer, Integer>  attemptMap;
	//	private Map<Integer, Integer>  inermediateMap;
		
	//	private List<Integer> fieldPositionList = new ArrayList<Integer>();

		private int convertIGWSonic(String pSourceConvert, String pFileName,
				int pFileID, String pDestinationConvert, String pCurrent_dir,
				int pLocalSplitFilebyDay, int pCenterID) throws Exception {

			/**
			 * Text file io tool
			 */
			TextFile fileConvert = new TextFile();

			/**
			 * Read source file
			 */
			BufferedReader fileCDR = null;

			/**
			 * IO tool
			 */
			IOUtils IOUtil = new IOUtils();

			/**
			 * source file's path
			 */
			String mSource = null;

			String firstCallingTime = "";
	        String lastCallingTime = "";


			try {
				//Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");

				// get path
			mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;

				// open file to read
				// sua pSourceConvert thanh mSource
				fileCDR = new BufferedReader(new FileReader(mSource));
			//fileCDR = new BufferedReader(new FileReader(pSourceConvert));

				// split by day
				if (pLocalSplitFilebyDay == 1) {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
					IOUtil.forceFolderExist(mSource); // maker folder
					mSource += Global.mSeparate + pFileName;
				} else {
					mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
				}

				// delete exists file
				IOUtil.deleteFile(mSource);
	
				fileConvert.openFile(mSource, 5242880);

			//	mConnection.setAutoCommit(false);

				mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
				mSQL += "WHERE file_id=" + pFileID;

				//Global.ExecuteSQL(mConnection, mSQL);
						
				// BO QUA HEADER
				//fileConvert.openFile("file_convert.txt", 5242880);
				String line = fileCDR.readLine();
				StringBuilder content = new StringBuilder();
				content.append(Global.IGW_SONUS_HEADER + "\n");
				Pattern patt = Pattern.compile("([^\"|]+)(\"[^\"|]+\")");
				Matcher m;
				String footer = "File administratively closed.";
				String[] fields;
				String[] tmp = null;
				StringBuilder lineConvert = new StringBuilder();
				
				// data Map chi load mot lan luc khoi tao class
				//setDataMap();
				while ((line = fileCDR.readLine()) != null && !line.contains(footer)) {
					m = patt.matcher(line);
					lineConvert.setLength(0);

					// if - else: thay , bang |
					if (!m.find()) {
						lineConvert.append(line.replaceAll(",", "|") + "\n");
					} else {
						m.reset();
						while (m.find()) {
							lineConvert.append(m.group(1).replaceAll(",", "|"));
							lineConvert.append(m.group(2).replaceAll("\"", ""));
							line = line.substring(m.end());
							m = patt.matcher(line);
						}

						// append end of string
						m = patt.matcher(line);
						if (!m.find()) {
							lineConvert.append(line.replaceAll(",", "|"));
						}					
					}

					fields = lineConvert.toString().split("\\|");				
					int i , j;
					if (fields[0].equals("STOP")) {						
						j= STOP_NUMBER_FIELDS - fields.length;
						if (j > 0) {
							tmp= new String[STOP_NUMBER_FIELDS];
							for (i = 0; i < tmp.length; i++) {
								if (i < fields.length) {
									tmp[i] = fields[i];
								} else {
									tmp[i] = "";
								} 							
							}
							fields = tmp;

						}	
						tmp = new String [HEADER_NUMBER_FIELDS];
						for (i = 0; i < tmp.length; i++) {
							tmp[i] = "";
						}

						// map cac fileds voi header
						for (int pos : stopMap.keySet()) {
							int value = stopMap.get(pos);
							tmp[pos-1] = fields[value-1].equals("\n") ? "" : fields[value-1];
							
						}
						
						// lay hai gai tri gateway va trunkgroup cua filed Route Selected
						
						if (tmp[24] == null || tmp[24].split(":").length == 0) {
							tmp[24] = "";
							tmp[25] = "";
						} else {
							String gateway = tmp[24].split(":")[0];
							if (tmp[24].length() == 2) {
								
								String  trunkGroup = tmp[24].split(":")[1];
								
								tmp[25] = trunkGroup;
							}
							tmp[24] = gateway;
						}
						
						
						// lay cac gia tri netType, codecType, audioEncodeType
						if (tmp[34] == null || tmp[34].split(":").length == 0) {
							tmp[34] = "";
							tmp[35] = "";
							tmp[36] = "";
						} else {
							String netType = tmp[34].split(":")[0];
							if (tmp[34].split(":").length >=2) {
								String codecType = tmp[34].split(":")[1];
								tmp[35] = codecType;
							}
							
							if (tmp[34].split(":").length >=3) {
								String audioEncodeType = tmp[34].split(":")[2];
								tmp[36] = audioEncodeType;
							}
							tmp[34] = netType;
						}
						
					} else if (fields[0].equals("ATTEMPT")) {
						
						j= ATTEMPT_NUMBER_FIELDS - fields.length;
						if (j > 0) {
							tmp= new String[ATTEMPT_NUMBER_FIELDS];
							for (i = 0; i < tmp.length; i++) {
								if (i < fields.length) {
									tmp[i] = fields[i];
								} else {
									tmp[i] = "";
								} 							
							}
							fields = tmp;
						}	

						tmp = new String [HEADER_NUMBER_FIELDS];
						for (i = 0; i < tmp.length; i++) {
							tmp[i] = "";
						}

						// map cac fileds voi header
						for (int pos : attemptMap.keySet()) {
							tmp[pos-1] = fields[attemptMap.get(pos)-1].equals("\n") ? "" : fields[attemptMap.get(pos)-1];
						}

					} 
					else{
						continue;
					}
					lineConvert.setLength(0);
					for (String str : tmp) {
						lineConvert.append(str + "|");
					}
					
					lineConvert.deleteCharAt(lineConvert.length()-1);
					
					/*
					 * Add CALLING_NUMBER_CHANGE and CALLED_NUMBER_CHANGE
					 * CALLING_NUMBER = tmp[17]
					 * CALLED_NUMBER = tmp[18]
					 * @Author: thuongnv
					 */
					lineConvert.append("|" + convertHeadNumber(tmp[17]) + "|" +convertHeadNumber(tmp[18]));
					//System.out.println(tmp[18]);
					
					// End thuongnv edit
					
					content.append(lineConvert + "\n");
					
					
					mRecConvert++;
				}
//			System.out.println(content);
				fileConvert.addText(content.toString().trim());
				writeLogFile("      -------------------------------");
				writeLogFile("      Total record converted : " + Global.rpad(Integer.toString(mRecConvert), 6, " "));

				if (cdrfileParam.ChargeCDRFile) {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				} else {
					mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
				}

				//Global.ExecuteSQL(mConnection, mSQL);

				//mConnection.commit();
			} catch (FileNotFoundException e) {
				e.printStackTrace();

				return Global.ErrFileNotFound;
			} catch (Exception ex) {
				ex.printStackTrace();
				mConnection.rollback();
				mSQL = "UPDATE import_header SET status="
						+ Global.StateConvertedError + ",note='"
						+ ex.toString() + " at rec:" + mRecConvert
						+ "' WHERE file_id = " + pFileID;
				Global.ExecuteSQL(mConnection, mSQL); // update file error converted
				mConnection.commit();

			if (cdrfileParam.OnErrorResumeNext.compareTo("TRUE") == 0) {
						writeLogFile(" - " + ex.toString() + " - at record:"
							+ mRecConvert);
					return Global.ErrFileConverted;
				} else {
						//System.out.println(mRecConvert + " " + ex.toString());
					throw ex;
				}
			} finally {
				try {
					mSource = null;
					mSQL = null;
					mValue = null;
					mBuffer = new byte[0];
					IOUtil = null;
					fileConvert.closeFile();
					fileConvert = null;
					fileCDR.close();
					fileCDR = null;
				} catch (Exception ex) {}
			}

			return Global.OKFileConverted;
		}
		
		private void setDataMap() {
			// key la vi tri truong trong header, value la vi tri field trong ban ghi tuong ung
			stopMap = new HashMap<Integer, Integer>();
			attemptMap = new HashMap<Integer, Integer>();
			//	inermediateMap = new HashMap<Integer, Integer>();
			stopMap.put(1, 1);
			stopMap.put(2, 2);
			stopMap.put(3, 4);
			stopMap.put(4, 5);
			stopMap.put(5, 6);
			stopMap.put(6, 7);
			stopMap.put(7, 8);
			stopMap.put(8, 9);
			stopMap.put(9, 10);
			stopMap.put(10, 11);
			stopMap.put(11, 12);
			stopMap.put(12, 13);
			stopMap.put(13, 14);
			stopMap.put(14, 15);
			stopMap.put(15, 16);
			stopMap.put(16, 17);
			stopMap.put(17, 18);
			stopMap.put(18, 20);
			stopMap.put(19, 21);
			stopMap.put(20, 25);
			stopMap.put(21, 27);
			stopMap.put(22, 28);
			stopMap.put(23, 29);
			stopMap.put(24, 30);
			stopMap.put(25, 31);
			stopMap.put(27, 32);
			stopMap.put(28, 33);
			stopMap.put(29, 34);
			stopMap.put(30, 60);
			stopMap.put(31, 64);
			stopMap.put(32, 68);
			stopMap.put(33, 70);
			stopMap.put(34, 75);
			stopMap.put(35, 79);
			stopMap.put(38, 82);
			stopMap.put(41, 102);
			stopMap.put(42, 125);
			stopMap.put(43, 126);
			stopMap.put(44, 199);
			attemptMap.put(1, 1);
			attemptMap.put(5, 6);
			attemptMap.put(6, 7);
			attemptMap.put(8, 9);
			attemptMap.put(14, 12);
			attemptMap.put(17, 15);
			attemptMap.put(18, 17);
			attemptMap.put(19, 18);
			attemptMap.put(22, 25);
			attemptMap.put(23, 26);
			attemptMap.put(24, 27);
			attemptMap.put(27, 29);
			attemptMap.put(28, 30);
			attemptMap.put(29, 31);
			attemptMap.put(30, 53);
			attemptMap.put(31, 57);
			attemptMap.put(32, 58);
			attemptMap.put(33, 60);
			attemptMap.put(35, 69);
			attemptMap.put(36, 70);
			// them 9 gia tri vao cuoi file
			stopMap.put(45, 3);
			stopMap.put(46, 35);
			stopMap.put(47, 36);
			stopMap.put(48, 37);
			stopMap.put(49, 38);
			stopMap.put(50, 46);
			stopMap.put(51, 106);
			stopMap.put(52, 125);
			stopMap.put(53, 126);
			
			attemptMap.put(45, 3);
			attemptMap.put(46, 32);
			attemptMap.put(47, 33);
			attemptMap.put(48, 34);
			attemptMap.put(49, 35);
			attemptMap.put(50, 39);
			attemptMap.put(51, 97);
			attemptMap.put(52, 115);
			attemptMap.put(53, 116);

		}
	}

class ConvertFCDR {

	private BufferedInputStream bis;
	
	private StructFCDR structF = new StructFCDR();

	
	int readLen(int nlen) throws IOException {
		  
		  int clen=0;
		  if((nlen>128)&&(nlen<=132)){
		  for(int i=1;i<=nlen-128;i++)
		  {
			  int x=bis.read();
			  clen+= x << (8*(nlen-128-i));
		  }
		  }
		  else   clen=nlen;
		  return clen;
	  }
	int nByteLen(int nlen) throws IOException {
		   
		  int clen = 0;
		  if ((nlen >128)&&(nlen<=132)) clen = nlen - 128;
		  return clen;
	  }
	private String readChar (int len) throws IOException {
		String rl="";
		for (int i=1; i<= len; i++)
		{
			int r = bis.read();
			rl += Character.toString ((char) r);
		}
		return rl;
	}
	private int ReadInt (int len) throws IOException {
		int rl = 0;
		for (int i=1; i<= len; i++)
		{
			int x=bis.read();
			rl+= x << (8*(len-i));
		}
		return rl;
	}
	private String nguoc (String by) throws IOException
	{
		String kq="";
		if (by.length() == 1) kq = by + "0";
		else
		{
			String a = by.substring(0, 1);
			String b = by.substring(by.length()-1);
			if ((a.equals("a")) || (a.equals("b")) || (a.equals("c")) || (a.equals("d")) || (a.equals("e")) || (a.equals("f")))
				kq= b +"";
			else kq = b + a +"";
		}
		return kq;
	}
	private String lay_nua (String nby) throws IOException
	{
		String kq = "";
		if (nby.length() == 1) kq = nby;
		else
		{
			String b = nby.substring(nby.length()-1);
			kq = b + "";
		}
		return kq;
	}
	private String date (int len) throws IOException
	{
		String kq = "";
		if (len == 3)
		{
			String year = "";
			int n = bis.read();
			if (n < 10) year = "200" + String.valueOf(n);
			else
			{
				if (n < 100) year = "20" + String.valueOf(n);
				else
				{
					if (n < 1000) year = "2" + String.valueOf(n);
					else year = String.valueOf(n) + "";
				}
			}
			
			String month = "";
			int t = bis.read();
			if (t < 10) month = "0" + String.valueOf(t);
			else month = String.valueOf(t) + "";
			
			String day = "";
			int d = bis.read();
			if (d < 10) day = "0" + String.valueOf(d);
			else day = String.valueOf(d) + "";
			
			kq = day + "-" + month + "-" + year +"";	
		}
		else kq = null;
		return kq;
		
	}
	private String Time (int len) throws IOException
	{
		String kq = "";
		if ( len == 3)
		{
				int h = bis.read();
				if (h < 10) kq += "0" + String.valueOf(h) + ":";
				else kq +=String.valueOf(h) + ":";
				int m = bis.read();
				if (m < 10) kq += "0" + String.valueOf(m) + ":";
				else kq +=String.valueOf(m) + ":";
				int s = bis.read();
				if (s < 10) kq += "0" + String.valueOf(s) + "";
				else kq +=String.valueOf(s) + "";
			
		}
		else kq = null;
		return kq;
	}
	/*private String ton (int x) throws IOException
	{
		String kq = "";
		
		
			if (x == 0) kq = "unknown";
			if (x == 1) kq = "international";
			if (x == 2) kq = "national";
			if (x == 3) kq = "network";
			if (x == 4) kq = "short";
			if (x == 5) kq = "alphanumeric";
			if (x == 6) kq = "abbreviated";
			if (x == 7) kq = "reserved";
		
		return kq;
	}
	private String npi (int x) throws IOException
	{
		String kq = "";
		
			if (x == 0) kq = "unknown";
			if (x == 1) kq = "telephone";
			if (x == 2) kq = "reserved";
			if (x == 3) kq = "data";
			if (x == 4) kq = "telex";
			if (x == 5) kq = "scspecific5";
			if (x == 6) kq = "scspecific6";
			if (x == 7) kq = "reserved7";
			if (x == 8) kq = "national";
			if (x == 9) kq = "private";
			if (x == 10) kq = "ermes";
			if (x == 11) kq = "reserved11";
			if (x == 12) kq = "reserved12";
			if (x == 13) kq = "reserved13";
			if (x == 14) kq = "reserved14";
			if (x == 15) kq = "reserved15";
			
		
		return kq;
	}
	private String pid (int x) throws IOException
	{
		String kq = "";
			if (x == 0) kq = "plmn";
			if (x == 57) kq = "pc";
			if (x == 59) kq = "smpp";
			
		return kq;
	}*/
/*	private String Status (int x) throws IOException
	{
		String kq = "";
			if (x == 0) kq = "delivered";
			if (x == 1) kq = "expired";
			if (x == 2) kq = "deleted";
			if (x == 3) kq = "replaced";
			if (x == 4) kq = "submitted";
			if (x == 5) kq = "failed";
			
		return kq;
	}*/
/*	private String ss8LastFailureReason (int x) throws IOException
	{
		String kq = "";
			if (x == 0) kq = "noFailureReasonAvailable";
			if (x == 1) kq = "unknownSubscriber";
			if (x == 5) kq = "unidentifiedSubscriber";
			if (x == 9) kq = "illegalSubscriber";
			if (x == 11) kq = "teleServiceNotProvisioned";
			if (x == 12) kq = "illegalEquipment";
			if (x == 13) kq = "callBarred";
			if (x == 21) kq = "facilityNotsupported";
			if (x == 27) kq = "absentSubscriber";
			if (x == 31) kq = "subscriberBusyForMtSms";
			if (x == 33) kq = "messageWaitingListFull";
			if (x == 34) kq = "systemFailure";
			if (x == 35) kq = "dataMissing";
			if (x == 36) kq = "unexpectedDataValue";
			if (x == 50) kq = "memoryCapacityExceeded";
			if (x == 51) kq = "equipmentProtocolError";
			if (x == 52) kq = "equipmentNotSmEquipped";
			if (x == 80) kq = "internalSystemFailure";
			if (x == 86) kq = "hlrTimedOut";
			if (x == 87) kq = "mscTimeout";
			if (x == 101) kq = "tcapAbortReceived";
		return kq;
	}*/
	private int submitDate (String tag) throws IOException 
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.submitDate = date(len);
		return (len + nlen);
	} 
	private int submitTime (String tag) throws IOException 
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.submitTime = Time(len);
		return (len + nlen);
	}
	private int OrigAddress (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int d = 0;
		while (d < len)
		{
			String b = Integer.toHexString(bis.read());
			d++;
			if ((b.equals("83")) || (b.equals("84")))
			{
				if (b.equals("83"))
				{
					int l = bis.read();
					d++;
					int len83 = readLen(l);
					int nlen83 = nByteLen(l);
					String kq = "";
					int dlen = 0;
					for (int i=1; i<= len83; i++)
					{
						dlen++;
						int x = bis.read();
						if ((x <= 57) && (x >= 48))
						{
							String y = Integer.toHexString(x);
							kq += lay_nua(y) + "";
						}
						else
						{
							kq = "Value is not msisdn type";
							break;
						}
					}
					for(int i=1;i<=len83 - dlen;i++) bis.read();
					structF.OrigAddress_msisdn = kq;
					d+=(len83 + nlen83);
				}
				if (b.equals("84"))
				{
					int l = bis.read();
					d++;
					int len84 = readLen(l);
					int nlen84 = nByteLen(l);
					if (structF.OrigAddress_msisdn.equals("Value is not msisdn type"))
						structF.OrigAddress_msisdnUTF8 = readChar(len84);
					else 
					{
						/*String kq = "";
						for (int i=1; i<= len84; i++)
						{
							String x = Integer.toHexString(bis.read());
							kq += lay_nua(x) + "";
						}
						structF.OrigAddress_msisdnUTF8 = kq;*/
						structF.OrigAddress_msisdnUTF8 = readChar(len84);
					}
						d+=(len84 + nlen84);
				}
			}
			else 
			{
				int l = bis.read();
				int len8 = readLen(l);
				int nlen8 = nByteLen(l);
				
				d++;
				for (int i=1; i<= len8; i++)
				{
					bis.read();
				}
				d+=(len8 + nlen8);
			}
		}
		return (len + nlen );	
	}
	private int orglRecipAddress (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int d = 0;
		while (d < len)
		{
			String b = Integer.toHexString(bis.read());
			d++;
			if ((b.equals("83")) || (b.equals("84")))
			{
				if (b.equals("83"))
				{
					int l = bis.read();
					d++;
					int len83 = readLen(l);
					int nlen83 = nByteLen(l);
					String kq = "";
					
					for (int i=1; i<= len83; i++)
					{
						int x = bis.read();
						String y = Integer.toHexString(x);
						kq += lay_nua(y) + "";
						
					}
					//for(int i=1;i<=len83 - dlen;i++) bis.read();
					structF.orglRecipAddress_msisdn = kq;
					d+=(len83 + nlen83);
				}
				if (b.equals("84"))
				{
					int l = bis.read();
					d++;
					int len84 = readLen(l);
					int nlen84 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len84; i++)
					{
						String x = Integer.toHexString(bis.read());
						kq += lay_nua(x) + "";
					}
					structF.orglRecipAddress_msisdnUTF8 = kq;
					d+=(len84 + nlen84);
				}
			}
			else 
			{
				int l = bis.read();
				int len8 = readLen(l);
				int nlen8 = nByteLen(l);
				
				d++;
				for (int i=1; i<= len8; i++)
				{
					bis.read();
				}
				d+=(len8 + nlen8);
			}
		}
		return (len + nlen );	
	}
	private int ogtiAddress (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int d = 0;
		while (d < len)
		{
			String b = Integer.toHexString(bis.read());
			d++;
			if ((b.equals("83")) || (b.equals("84")))
			{
				if (b.equals("83"))
				{
					int l = bis.read();
					d++;
					int len83 = readLen(l);
					int nlen83 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len83; i++)
					{
						int x = bis.read();
						String y = Integer.toHexString(x);
						kq += lay_nua(y) + "";
						
					}
					
					structF.ogtiAddress_msisdn = kq;
					d+=(len83 + nlen83);
				}
				if (b.equals("84"))
				{
					int l = bis.read();
					d++;
					int len84 = readLen(l);
					int nlen84 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len84; i++)
					{
						String x = Integer.toHexString(bis.read());
						kq += lay_nua(x) + "";
					}
					structF.ogtiAddress_msisdnUTF8 = kq;
					
					d+=(len84 + nlen84);
				}
			}
			else 
			{
				int l = bis.read();
				int len8 = readLen(l);
				int nlen8 = nByteLen(l);
				
				d++;
				for (int i=1; i<= len8; i++)
				{
					bis.read();
				}
				d+=(len8 + nlen8);
			}
		}
		return (len + nlen );	
	}
	private int smscPresentationAddress (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int d = 0;
		while (d < len)
		{
			String b = Integer.toHexString(bis.read());
			d++;
			if ((b.equals("83")) || (b.equals("84")))
			{
				if (b.equals("83"))
				{
					int l = bis.read();
					d++;
					int len83 = readLen(l);
					int nlen83 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len83; i++)
					{
						int x = bis.read();
						String y = Integer.toHexString(x);
						kq += lay_nua(y) + "";
						
					}
					structF.smscPresentationAddress_msisdn = kq;
					d+=(len83 + nlen83);
				}
				if (b.equals("84"))
				{
					int l = bis.read();
					d++;
					int len84 = readLen(l);
					int nlen84 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len84; i++)
					{
						String x = Integer.toHexString(bis.read());
						kq += lay_nua(x) + "";
					}
					structF.smscPresentationAddress_msisdnUTF8 = kq;
					d+=(len84 + nlen84);
				}
			}
			else 
			{
				int l = bis.read();
				int len8 = readLen(l);
				int nlen8 = nByteLen(l);
				
				d++;
				for (int i=1; i<= len8; i++)
				{
					bis.read();
				}
				d+=(len8 + nlen8);
			}
		}
		return (len + nlen );	
	}
	private int dgtiAddress (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int d = 0;
		while (d < len )
		{
			String b = Integer.toHexString(bis.read());
			d++;
			if ((b.equals("83")) || (b.equals("84")))
			{
				if (b.equals("83"))
				{
					int l = bis.read();
					d++;
					int len83 = readLen(l);
					int nlen83 = nByteLen(l);
					String kq = "";
					int dlen =0;
					for (int i=1; i<= len83; i++)
					{
						int x = bis.read();
						String y = Integer.toHexString(x);
						kq += lay_nua(y) + "";
						
					}
					//for(int i=1;i<=len83 - dlen;i++) bis.read();
					structF.dgtiAddress_msisdn = kq;
					d+=(len83 + nlen83);
				}
				if (b.equals("84"))
				{
					int l = bis.read();
					d++;
					int len84 = readLen(l);
					int nlen84 = nByteLen(l);
					String kq = "";
					for (int i=1; i<= len84; i++)
					{
						String x = Integer.toHexString(bis.read());
						kq += lay_nua(x) + "";
					}
					structF.dgtiAddress_msisdnUTF8 = kq;
					d+=(len84 + nlen84);
				}
			}
			else 
			{
				int l = bis.read();
				int len8 = readLen(l);
				int nlen8 = nByteLen(l);
				
				d++;
				for (int i=1; i<= len8; i++)
				{
					bis.read();
				}
				d+=(len8 + nlen8);
			}
		}
		return (len + nlen );	
	}
	private int origIntlMobileSubId (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int x = 0;
		for(int i=1;i<=len;i++)
			{
			String test= Integer.toHexString(bis.read());
			x++;
			if(test.equals("91")) break;
			}
		if(x < len){
		  String kq = "";
			for(int i=1;i<=len - x - 1;i++)
			{
				String by = Integer.toHexString(bis.read());
				kq += nguoc(by);
			}
		String cuoi = Integer.toHexString(bis.read());
		if (cuoi.length() == 1) kq += cuoi;
		
		structF.origIntlMobileSubId = kq;
		}
		else structF.origIntlMobileSubId = "alphanumeric/unknown Vodafone";
		return (len + nlen );
	}
	private int recipientRoutingNumber (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.recipientRoutingNumber = readChar(len);
		return (len + nlen );
	}
/*	private int smsContentDcs (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.smsContentDcs = readChar(len);
		return (len + nlen );
	}*/
	private int smsContents (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.smsContents = readChar(len);
		return (len + nlen );
	}
	private int intlMobileSubId (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		String kq = "";
		for(int i=1;i<=len - 1;i++)
		{
			String by = Integer.toHexString(bis.read());
			kq += nguoc(by);
		}
		String cuoi = Integer.toHexString(bis.read());
		if (cuoi.length() == 1) kq += cuoi;
		else kq += nguoc(cuoi);
		structF.intlMobileSubId = kq;
		return (len + nlen );
	}
	private int lengthOfMessage (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		structF.lengthOfMessage = ReadInt(len);
		return (len + nlen );
	}
	/*private int status (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int x = bis.read();
		structF.status = Status (x);
		return (len + nlen );
	}
	private int Ss8LastFailureReason (String tag) throws IOException
	{
		int a= bis.read();
		int len = readLen(a);
		int nlen = nByteLen(a);
		int x = bis.read();
		structF.ss8LastFailureReason = ss8LastFailureReason (x);
		return (len + nlen );
	}*/
		
	private int convertFCDR(String pSourceConvert, String pFileName,
			int pFileID, String pDestinationConvert, String pCurrent_dir,
			int pLocalSplitFilebyDay, int pCenterID) throws Exception {
		
		/**
		 * IO tool
		 */
		IOUtils IOUtil = new IOUtils();

		/**
		 * source file's path
		 */
		String mSource = null;
		
		BufferedWriter out = null;
		String firstCallingTime = "";
        String lastCallingTime = "";
     
        try {
        	
        Global.ExecuteSQL(mConnection, "alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss'");
        
        mSource = IOUtil.FillPath(pSourceConvert, Global.mSeparate) + pFileName;
        
        File f = new File(mSource);
        
        // split by day
		if (pLocalSplitFilebyDay == 1) {
			mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pCurrent_dir;
			IOUtil.forceFolderExist(mSource); // maker folder
			mSource += Global.mSeparate + pFileName;
		} else {
			mSource = IOUtil.FillPath(pDestinationConvert, Global.mSeparate) + pFileName;
		}
        
		// delete exists file
		IOUtil.deleteFile(mSource);
		
		mConnection.setAutoCommit(false);

		mSQL = "UPDATE import_header SET time_begin_convert=sysdate ";
		mSQL += "WHERE file_id=" + pFileID;

		Global.ExecuteSQL(mConnection, mSQL);
					
        bis = new BufferedInputStream(new FileInputStream(f));
        
		out = new BufferedWriter(new FileWriter(mSource));
		
		out.write(Global.FCDR_HEADER);
		 
		String bt = "";
        bt = Integer.toHexString(bis.read());
		int dem = 0;
		while ((bt.equals("30")) || (bt.equals("7f")))
		{
			if (bt.equals("30"))
			{
				bt+= Integer.toHexString(bis.read());
				dem++;
				if (bt.equals("3080")) structF.bantin = "CallDetailed";
			}
			if (bt.equals("7f"))
			{
				bt += Integer.toHexString(bis.read()) + Integer.toHexString(bis.read()) + Integer.toHexString(bis.read());
				dem += 3;
				if(bt.equals("7f837380")) structF.bantin = "OutboundMt";
				if(bt.equals("7f837480")) structF.bantin = "InboundMt";	
			}
			String tag = Integer.toHexString(bis.read());
			//System.out.println("----tag ="+tag);
			dem++;
			while (!tag.equals("0"))
			{
				if(tag.equals("b3")){
					dem++;
					dem += dgtiAddress(tag);
				}else if(tag.equals("9d")){
					dem++;
					dem += intlMobileSubId(tag);
				}else if(tag.equals("89")){
					dem++;
					dem += lengthOfMessage(tag);
				}else if (tag.equals("b6")){
					dem++;
					dem += ogtiAddress(tag);
				}else if(tag.equals("a0")){
					dem++;
					dem += OrigAddress(tag);
				}else if(tag.equals("a2")){
					dem++;
					dem += orglRecipAddress(tag);
				}else if(tag.equals("87")){
					dem++;
					dem += submitDate(tag); 
				}else if(tag.equals("88")){
					dem++;
					dem += submitTime(tag);
				/*}else if(tag.equals("86")){
					dem++;
					dem += status(tag);*/
				}else if(tag.equals("9f")){
					tag += Integer.toHexString(bis.read());
					if(tag.equals("9f26")){
						dem++;
						dem += origIntlMobileSubId(tag);
					/*}else if(tag.equals("9f30")){
						dem++;
						dem += smsContentDcs(tag);*/
					}else if(tag.equals("9f31")){
						dem++;
						dem += smsContents(tag);
					}else if(tag.equals("9f83")){
						String tag2 = Integer.toHexString(bis.read());
						if ((tag2.equals("68")) || (tag2.equals("6a")))
						{
							if (tag2.equals("68"))
							{
								dem++;
								dem += recipientRoutingNumber(tag);
							}
							/*else
							{
								dem++;
								dem += Ss8LastFailureReason(tag);
							}*/
						}
						else
						{
							int len9 = readLen(bis.read());
							for (int i =0; i< len9 ; i++) bis.read();
						}
					
					}else{
						int len9 = readLen(bis.read());
						for (int i =0; i< len9 ; i++) bis.read();
					}
				}else if(tag.equals("bf")){
					tag += Integer.toHexString(bis.read());
					if (tag.equals("bf83"))
					{
						tag+= Integer.toHexString(bis.read());
						if (tag.equals("bf836f"))
						{
							dem++;
							dem += smscPresentationAddress(tag);
						}
						else
						{
							int lenb = readLen(bis.read());
							for (int i = 0; i< lenb; i++) bis.read();
						}
					}
					else
					{ 
						int lenb = readLen(bis.read());
						for (int i = 0; i< lenb; i++) bis.read();
					}
				}else{
					int len = readLen(bis.read());
					for (int i = 0; i< len; i++) bis.read();
				}
				
				tag = Integer.toHexString(bis.read());
				if (tag.equals("ffffffff")) break; 
			}
			
			bis.read(); 
			if(structF.bantin.equals("OutboundMt")) 
			{
				out.newLine();
	    		out.write(structF.toString()); 
			}
			
			structF = new StructFCDR();//AnhNT edit -- restart struct
			bt = Integer.toHexString(bis.read());
			if (bt.equals("ffffffff")) break;  
		}
        
        if (cdrfileParam.ChargeCDRFile) {
			mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateConverted + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
		} else {
			mSQL = "UPDATE import_header SET time_end_convert=sysdate,status=" + Global.StateRated + ",rec_total=" + mRecConvert + ",min_calling_time='" + lastCallingTime + "',max_calling_time='" + firstCallingTime + "' WHERE file_id = " + pFileID;
		}

		Global.ExecuteSQL(mConnection, mSQL);

		mConnection.commit();
		
        }catch (Exception ex) { 
        	ex.printStackTrace();
			mConnection.rollback();
			mSQL = "UPDATE import_header SET status="
					+ Global.StateConvertedError + ",note='"
					+ ex.toString() + " at rec:" + mRecConvert
					+ "' WHERE file_id = " + pFileID;
			Global.ExecuteSQL(mConnection, mSQL); // update file error converted
			mConnection.commit();
		} finally {
			if (bis != null) bis.close();
			if (out != null){
				out.flush();
				out.close();
			} 
		}
	
		return Global.OKFileConverted;
	} 
				
}
	
	public void convertFiles(String path, String fileName, String outPath) {
		ConvertIN cvIN = new ConvertIN();
		ConvertICC cvICC = new ConvertICC();

		try {
			// Duong dan file out.
			// int mret = cvIN.INFile_PPS421(path, fileName, 1, "C:/Documents
			// and Settings/do dinh
			// quang/Desktop/cdrfileINConcvertTool(16-9)/Out", "", 0, 2);
			int mret = cvICC.INFile_ICC462(path, fileName, 1, outPath, "", 0, 2);
			// System.out.println("mRet: " + mret);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public static void main(String args[]) throws Exception {
		ConvertThread cThread = new ConvertThread();
		 //cThread.processSession();
		// cThread.openConnection();
		 cThread.goitest();
		 //cThread.closeConnection();
	}

	public void goitest() {
		ConvertIN cv = new ConvertIN();
		ConvertHuawei cvH = new ConvertHuawei();
		ConvertICC cvICC = new ConvertICC();
		ConvertAlcatel cvA = new ConvertAlcatel();
		ConvertEricsson cvE = new ConvertEricsson();
		// ConvertMOSMPPG4 cvM = new ConvertMOSMPPG4();
		ConvertSGSN cvSGSN = new ConvertSGSN();
		ConvertSMSC cvSMSC = new ConvertSMSC();
		ConvertICCNEIF cvNEIF = new ConvertICCNEIF();
		ConvertGGSN cvGGSN = new ConvertGGSN();
		ConvertSamSungLTE convertSamSung = new ConvertSamSungLTE();
		ConvertEricssonLTE convertEricsson = new ConvertEricssonLTE();
		ConvertIGWSonic convertIGWSonic = new ConvertIGWSonic();
		ConvertFCDR convertFw = new ConvertFCDR();
		ConvertNokiaLTE cvNokiaLTE = new ConvertNokiaLTE();
		try {
			String pSourceConvert = "E:\\ha\\";
			String fileName = "cdr_TKLHNI-FW01_200_20170507_000623_164.dat";
			String outFile = "E:\\ha\\convert\\";
			//convertFw.convertFCDR(pSourceConvert, fileName, 1, outFile, "", 1, 1);
			long startTime = System.currentTimeMillis();
			// int mret = cvSGSN.SG7CD8_GPP_SGSNFile("D:\\Docs\\CDRFILE\\SGSN",
			// "SGDNI_1N_CF00000120.D01_20120515232810.ASN", 1,
			// "D:\\Docs\\CDRFILE\\SGSN\\Out", "", 0, 2);
			// int mret = cvSGSN.SG7CD8_GPP_SGSNFile("D:\\Docs\\CDRFILE\\SGSN",
			// "SGDNG_1N_CF00075936.D00_20130911103129.ASN", 1,
			// "D:\\Docs\\CDRFILE\\SGSN\\Out", "", 0, 2);
			// int mret = cvSMSC.BRF_V452("D:\\Docs\\CDRFILE\\SMSC",
			// "bills.1.20130927092000", 1, "D:\\Docs\\CDRFILE\\SMSC\\Out", "",
			// 0, 2);
			// int mret = cvA.AlcatelFile_R6("C:\\Documents and
			// Settings\\quangdd3\\Desktop\\Working22-2", "MSCCTO-1347.CDR", 1,
			// "C:\\Documents and
			// Settings\\quangdd3\\Desktop\\Working22-2\\Out", "", 0, 4);
			/* int mret = cvE.EricssonFile_R10("C:\\Users\\VHCSOFT\\Desktop\\input\\",
			 "TTFILE02-145942", 1, "C:\\Users\\VHCSOFT\\Desktop\\output", "", 0,
			 2);
			int mret =
					 cvH.Huawei_V212("C:\\Users\\VHCSOFT\\Desktop\\input\\",
					 "b00794370.dat", 1,
					 "C:\\Users\\VHCSOFT\\Desktop\\output", "", 0,
					 2);*/
			
			 
			// int mret = cv.INFile_PPS421("c:\\Documents and
			// Settings\\quangdd\\Desktop\\Working 04_Oct\\In",
			// "acc27804753_3209", 1, "c:\\Documents and
			// Settings\\quangdd\\Desktop\\Working 04_Oct\\Out", "", 0, 1);
			
			
			//----------------------Ericsson R10--------------------------------
			/*
			 * Test convert 11 to 10 Ericsson R10
			 */
			
			 /*
			 int mret =
			 cvE.EricssonFile_R10("C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\Sample\\Ericsson_R10",
			 "TTFILE01-332596", 1,
			 "C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\output", "", 0, 2);
			 */
			
			
			//-----------------------IGW Sonic------------------------------
			 /*
			  * Test convert 11 to 10 IGW Sonic
			  */
					/*
					 int mret =
					 convertIGWSonic.convertIGWSonic("C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\Sample\\IGW_SONIC", 
							 "IGW16929548.dat", 1, "C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\output", "", 0, 2);
					*/
			 
			 //---------------------Huawei V212-----------------------------

			/*
			 * Test convert 11 to 10 Huawei V212
			 */
					/*
					 int mret =
					 cvH.Huawei_V212("C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\Sample\\Huawei_R212",
					 "MSDN02H_AP2-39040.dat", 1,
					 "C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\output", "", 0,
					 2);
					 */
			//---------------------ICC-----------------------------
			/*
			 * Test convert 11 to 10 Huawei V212
			 */
				 int mret =
				 cvICC.INFile_ICC462("C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\Error",
				 "acc19904329_3222", 1,
				 "C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\output", "", 0, 2);
				
			
			
			
			// int mret =
			// cvNEIF.ICC_NEIF("C:\\Users\\datnh\\Desktop\\Data\\CDRFILE\\ICC_NEIF",
			// "acc11400038_1864", 1,
			// "C:\\Users\\datnh\\Desktop\\Data\\CDRFILE\\ICC_NEIF\\Out", "", 0,
			// 2);
			// int mret =
			// cvSGSN.SG7CD8_GPP_SGSNFile("C:\\Users\\Phoenix\\Desktop\\Data\\CDRFILE\\SGSN",
			// "SGCTO_2N_CF00071746.D00_20130916202502.ASN", 1,
			// "C:\\Users\\Phoenix\\Desktop\\Data\\CDRFILE\\SGSN\\Out", "", 0,
			// 2);
			// int mret =
			// cvGGSN.eGSN("C:\\Users\\datnh\\Desktop\\Data\\CDRFILE\\GGSN",
			// "FNGHCM_2N_-_0000004681.20150918_-_1508+0700",
			// 1,"C:\\Users\\datnh\\Desktop\\Data\\CDRFILE\\GGSN\\Out", "", 0,
			// 2);
			// int mret =
			// convertSamSung.convertSamSung("C:\\Users\\BUIQUANG\\Desktop\\cdrfile\\in",
			// "ChaData_20160517_1015_003932", 1,
			// "C:\\Users\\BUIQUANG\\Desktop\\cdrfile\\out", "", 0, 2);
			/*int mret = convertEricsson.convertEricssonLTE("C:\\Users\\BUIQUANG\\Desktop\\cdrfile\\in\\EPG CDR\\",
					"EPG_C3001E_20160406083135_130", 1, "C:\\Users\\BUIQUANG\\Desktop\\cdrfile\\out", "", 0, 2);*/
			//sgwcdr_FINGHBT01N_00010231_20180624080316.asn
			//pgwcdr_EPG_MGYHA01N_00006742_20180611065052.asn
			//sgwcdr_EPG_MGYHA01N_00000004_20180614021048.asn
			/*
			 int mret =
					cvNokiaLTE.convertNokiaLTE("C:\\Users\\Thuong\\Desktop",
					 "sgwcdr_FINGHBT01N_00002093_20180411040731.asn", 1,
					 "C:\\Users\\Thuong\\Desktop\\VHC\\VTQT\\CDR\\output", "", 0, 2);
			*/
			long endTime = System.currentTimeMillis();
			long totalTime = endTime - startTime;
			System.out.println(totalTime);

			//System.out.println("mret=" + mret);
		} catch (Exception de) {
			de.printStackTrace();
		}
	}
} // End class Convert Thread
